"use strict";
/*
 * Copyright Â© 2021 Atomist, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.cachify = exports.save = exports.hydrate = void 0;
const fs = require("fs-extra");
const os = require("os");
const path = require("path");
const console_1 = require("./log/console");
const util_1 = require("./util");
async function hydrate(configurationName, ctx, value) {
    const key = stateKey(configurationName, ctx);
    try {
        const stateFile = await ctx.storage.retrieve(key);
        const state = await fs.readJson(stateFile);
        return Object.assign(Object.assign({}, (value || {})), state);
    }
    catch (e) {
        return value || {};
    }
}
exports.hydrate = hydrate;
async function save(state, configurationName, ctx) {
    const key = stateKey(configurationName, ctx);
    try {
        const targetFilePath = path.join(os.tmpdir() || "/tmp", util_1.guid());
        await fs.ensureDir(path.dirname(targetFilePath));
        await fs.writeJson(targetFilePath, state);
        await ctx.storage.store(key, targetFilePath);
    }
    catch (e) {
        console_1.debug(`Failed to save state: ${e.message}`);
    }
}
exports.save = save;
function stateKey(configurationName, ctx) {
    return `state/${ctx.workspaceId}/${ctx.skill.namespace}/${ctx.skill.name}/${configurationName.replace(/[^a-zA-Z0-9-_]/g, "").toLowerCase()}.json`;
}
function cachify(func, resolver) {
    return (async (ctx, ...args) => {
        let key;
        if (resolver) {
            key = resolver(...args);
        }
        else {
            key = args.reduce((p, c) => {
                if (util_1.isPrimitive(c)) {
                    return `${p}_${c.toString()}`;
                }
                else {
                    return p;
                }
            }, "");
        }
        const resultKey = `${ctx.configuration.name}/${key.toLowerCase()}`;
        const old = await hydrate(resultKey, ctx, {
            result: undefined,
        });
        if (old.result) {
            return JSON.parse(old.result);
        }
        const result = await func(ctx, ...args);
        await util_1.handleError(() => save({ result: JSON.stringify(result) }, resultKey, ctx));
        return result;
    });
}
exports.cachify = cachify;
//# sourceMappingURL=state.js.map