import { Check, CreateCheck } from "../github/check";
import { CloneOptions } from "../project/clone";
import { Project } from "../project/project";
import { AuthenticatedRepositoryId, RepositoryId } from "../repository/id";
import { EventContext, EventHandler, HandlerStatus } from "./handler";
export declare type ChainedHandler<D, C, S> = (context: EventContext<D, C> & {
    chain: S;
}) => Promise<void | HandlerStatus>;
/**
 * Chain a series of [[ChainedHandler]]s until the first one
 * returns a [[HandlerStatus]].
 */
export declare function chain<D, C, S = any>(...handlers: Array<ChainedHandler<D, C, S>>): EventHandler<D, C>;
export declare type CreateRepositoryId<D, C> = (ctx: EventContext<D, C>) => Pick<RepositoryId, "owner" | "repo" | "sha" | "branch">;
export declare function createRef<D, C>(id: CreateRepositoryId<D, C>): ChainedHandler<D, C, {
    id?: AuthenticatedRepositoryId<any>;
}>;
export declare type CreateCloneOptions<D, C> = (ctx: EventContext<D, C>) => CloneOptions;
export declare function cloneRef<D, C>(options?: CloneOptions | CreateCloneOptions<D, C>): ChainedHandler<D, C, {
    id?: AuthenticatedRepositoryId<any>;
    project?: Project;
}>;
export declare type CreateCheckOptions<D, C> = (ctx: EventContext<D, C>) => Omit<CreateCheck, "sha"> | Promise<Omit<CreateCheck, "sha">>;
export declare function createCheck<D, C>(options: Omit<CreateCheck, "sha"> | CreateCheckOptions<D, C>): ChainedHandler<D, C, {
    id?: AuthenticatedRepositoryId<any>;
    check?: Check;
}>;
//# sourceMappingURL=util.d.ts.map