"use strict";
/*
 * Copyright Â© 2021 Atomist, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.createCheck = exports.cloneRef = exports.createRef = exports.chain = void 0;
const check_1 = require("../github/check");
const id_1 = require("../repository/id");
const resolver_1 = require("../secret/resolver");
const status_1 = require("../status");
/**
 * Chain a series of [[ChainedHandler]]s until the first one
 * returns a [[HandlerStatus]].
 */
function chain(...handlers) {
    return async (ctx) => {
        ctx.chain = {};
        for (const handler of handlers) {
            const result = await handler(ctx);
            if (result) {
                return result;
            }
        }
        return undefined;
    };
}
exports.chain = chain;
function createRef(id) {
    return async (ctx) => {
        const repositoryId = typeof id === "function" ? id(ctx) : id;
        if (!repositoryId.credential) {
            const credential = await ctx.credential.resolve(resolver_1.gitHubAppToken(repositoryId));
            ctx.chain.id = id_1.gitHubComRepository(Object.assign(Object.assign({}, repositoryId), { credential }));
        }
        else {
            ctx.chain.id = id_1.gitHubComRepository(Object.assign({}, repositoryId));
        }
    };
}
exports.createRef = createRef;
function cloneRef(options) {
    return async (ctx) => {
        if (!ctx.chain.id) {
            return status_1.failure("'id' missing in chain. Make sure to include 'createRef' in handler chain");
        }
        ctx.chain.project = await ctx.project.clone(ctx.chain.id, typeof options === "function" ? options(ctx) : options);
        return undefined;
    };
}
exports.cloneRef = cloneRef;
function createCheck(options) {
    return async (ctx) => {
        if (!ctx.chain.id) {
            return status_1.failure("'id' missing in chain. Make sure to include 'createRef' in handler chain");
        }
        const optsToUse = typeof options === "function" ? await options(ctx) : options;
        ctx.chain.check = await check_1.createCheck(ctx, ctx.chain.id, Object.assign({ sha: ctx.chain.id.sha }, optsToUse));
        return undefined;
    };
}
exports.createCheck = createCheck;
//# sourceMappingURL=util.js.map