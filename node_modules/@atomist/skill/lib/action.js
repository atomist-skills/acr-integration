"use strict";
/*
 * Copyright Â© 2021 Atomist, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.eventHandlerLoader = void 0;
const function_1 = require("./function");
const map_1 = require("./map");
const status_1 = require("./status");
const util_1 = require("./util");
function eventHandlerLoader(type) {
    const hl = util_1.handlerLoader(type);
    return async (name, cwd) => {
        if (name === "onAttachmentAction") {
            return onAttachmentAction;
        }
        else {
            const eh = await hl(name, cwd);
            return map_1.wrapEventHandler(eh);
        }
    };
}
exports.eventHandlerLoader = eventHandlerLoader;
const UpdateTaskStateMutation = `mutation updateTaskState($id: ID!, $state: AtmJobTaskState!){
  setAtmJobTaskState(id: $id, jobTaskState: { state: $state }) {
    id
  }
}`;
const onAttachmentAction = async (ctx) => {
    var _a;
    const trigger = ctx.trigger;
    const task = (_a = ctx.data.AtmJobTask) === null || _a === void 0 ? void 0 : _a[0];
    const data = JSON.parse(task.data);
    if (data.configuration !== ctx.configuration.name) {
        return status_1.success(`Not running command for configuration`).hidden();
    }
    const payload = data.payload;
    payload.skill = trigger.skill;
    payload.secrets = trigger.secrets;
    try {
        const result = await function_1.processCommand(payload, {
            eventId: ctx.executionId,
        });
        await ctx.graphql.mutate(UpdateTaskStateMutation, {
            id: task.id,
            state: "success",
        });
        return result;
    }
    catch (e) {
        await ctx.graphql.mutate(UpdateTaskStateMutation, {
            id: task.id,
            state: "failed",
        });
        throw e;
    }
};
//# sourceMappingURL=action.js.map