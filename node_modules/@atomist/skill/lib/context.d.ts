import { CommandContext, Configuration, ContextualLifecycle, EventContext, WebhookContext } from "./handler/handler";
import { CommandIncoming, EventIncoming, SubscriptionIncoming, WebhookIncoming } from "./payload";
export declare type ContextFactory = (payload: CommandIncoming | EventIncoming | WebhookIncoming | SubscriptionIncoming, ctx: {
    eventId: string;
}) => ((CommandContext | EventContext | WebhookContext) & ContextualLifecycle) | undefined;
export declare function createContext(payload: CommandIncoming | EventIncoming | WebhookIncoming | SubscriptionIncoming, ctx: {
    eventId: string;
}): ((CommandContext | EventContext | WebhookContext) & ContextualLifecycle) | undefined;
export declare function extractConfiguration(payload: CommandIncoming | EventIncoming | WebhookIncoming | SubscriptionIncoming): {
    configuration: Array<Configuration<any>>;
};
//# sourceMappingURL=context.d.ts.map