"use strict";
/*
 * Copyright Â© 2021 Atomist, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.setLogger = exports.clearLogger = exports.error = exports.warn = exports.info = exports.debug = void 0;
const util = require("util");
const redact_1 = require("./redact");
const util_1 = require("./util");
/**
 * Print the debug level message to stdout
 *
 * @param message The message to print
 * @param optionalParams Optional params to pass to the logger
 */
function debug(message, ...optionalParams) {
    log("debug", message, ...optionalParams);
}
exports.debug = debug;
/**
 * Print the info level message to stdout
 *
 * @param message The message to print
 * @param optionalParams Optional params to pass to the logger
 */
function info(message, ...optionalParams) {
    log("info", message, ...optionalParams);
}
exports.info = info;
/**
 * Print the warn level message to stdout
 *
 * @param message The message to print
 * @param optionalParams Optional params to pass to the logger
 */
function warn(message, ...optionalParams) {
    log("warn", message, ...optionalParams);
}
exports.warn = warn;
/**
 * Print the error level message to stdout
 *
 * @param message The message to print
 * @param optionalParams Optional params to pass to the logger
 */
function error(message, ...optionalParams) {
    log("error", message, ...optionalParams);
}
exports.error = error;
function clearLogger() {
    global._logger = undefined;
}
exports.clearLogger = clearLogger;
function setLogger(logger) {
    global._logger = logger;
}
exports.setLogger = setLogger;
function getLogger() {
    return global._logger;
}
function log(level, message, ...optionalParams) {
    if (util_1.enabled(level)) {
        const fmsg = redact_1.redact(util.format(message, ...optionalParams));
        if (getLogger()) {
            getLogger()[level](fmsg);
        }
        else {
            // tslint:disable-next-line:no-console
            let prefix = `[${level}]`;
            while (prefix.length < 7) {
                prefix = ` ${prefix}`;
            }
            console[level](`${prefix} ${fmsg}`);
        }
    }
}
//# sourceMappingURL=console.js.map