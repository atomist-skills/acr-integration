"use strict";
/*
 * Copyright Â© 2021 Atomist, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.runtime = exports.url = exports.enabled = exports.initLogging = void 0;
const skill_logging_1 = require("@atomist/skill-logging");
const util_1 = require("../util");
const console_1 = require("./console");
function initLogging(context, onComplete, labels = {}) {
    const logger = skill_logging_1.createLogger(context, labels);
    console_1.setLogger(logger);
    onComplete(async () => {
        await logger.close();
        console_1.clearLogger();
    });
}
exports.initLogging = initLogging;
var Level;
(function (Level) {
    Level[Level["error"] = 0] = "error";
    Level[Level["warn"] = 1] = "warn";
    Level[Level["info"] = 2] = "info";
    Level[Level["debug"] = 3] = "debug";
})(Level || (Level = {}));
function enabled(level) {
    const configuredLevel = Level[process.env.ATOMIST_LOG_LEVEL || "debug"];
    return configuredLevel >= Level[level];
}
exports.enabled = enabled;
function url(ctx) {
    return `https://go.atomist.${(process.env.ATOMIST_GRAPHQL_ENDPOINT || "").includes("staging")
        ? "services"
        : "com"}/log/${ctx.workspaceId}/${ctx.correlationId}`;
}
exports.url = url;
function runtime() {
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    const gitInfo = require("../../git-info.json");
    const nodeVersion = process.version;
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    const packageJson = require("../../package.json");
    const hostGitInfo = util_1.handleErrorSync(() => require("../../../../../git-info.json"), () => {
        // intentionally left empty
    }) || {};
    return {
        node: {
            version: nodeVersion.replace(/v/g, ""),
        },
        skill: {
            version: packageJson.version,
            sha: gitInfo.sha,
            date: gitInfo.date,
        },
        host: {
            sha: hostGitInfo.sha,
            date: hostGitInfo.date,
        },
    };
}
exports.runtime = runtime;
//# sourceMappingURL=util.js.map