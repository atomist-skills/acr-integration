"use strict";
/*
 * Copyright Â© 2020 Atomist, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.findGraphQLFile = exports.createGraphQLClient = void 0;
const findUp = require("find-up");
const fs = require("fs-extra");
const pRetry = require("p-retry");
const path = require("path");
const util_1 = require("./definition/subscription/util");
const console_1 = require("./log/console");
const retry_1 = require("./retry");
const util_2 = require("./util");
const GraphQLCache = new Map();
class NodeFetchGraphQLClient {
    constructor(apiKey, url) {
        this.apiKey = apiKey;
        this.url = url;
    }
    async query(query, variables) {
        const body = JSON.stringify({
            query: await this.graphql(query, "query"),
            variables,
        });
        console_1.debug(`GraphQL query: ${body}`);
        const result = await this.fetch(body);
        console_1.debug(`GraphQL result: ${JSON.stringify(result, util_2.replacer)}`);
        if (result.errors) {
            throw new Error(JSON.stringify(result.errors, undefined, 2));
        }
        return result.data;
    }
    async mutate(mutation, variables) {
        const body = JSON.stringify({
            query: await this.graphql(mutation, "mutation"),
            variables,
        });
        console_1.debug(`GraphQL mutation: ${body}`);
        const result = await this.fetch(body);
        console_1.debug(`GraphQL result: ${JSON.stringify(result, util_2.replacer)}`);
        if (result.errors) {
            throw new Error(JSON.stringify(result.errors, undefined, 2));
        }
        return result.data;
    }
    async graphql(query, prefix) {
        if (typeof query === "string") {
            let q = query === null || query === void 0 ? void 0 : query.trim();
            if (GraphQLCache.has(query)) {
                return GraphQLCache.get(query);
            }
            else if (q.endsWith(".graphql")) {
                q = await findGraphQLFile(q, prefix);
            }
            q = q.replace(/\n/g, "");
            GraphQLCache.set(query, q);
            return q;
        }
        else {
            const l = query;
            const p = path.resolve(l.root, l.path);
            if (GraphQLCache.has(p)) {
                return GraphQLCache.get(p);
            }
            else {
                let q = (await fs.readFile(p)).toString();
                q = q.replace(/\n/g, "");
                GraphQLCache.set(p, q);
                return q;
            }
        }
    }
    async fetch(body) {
        const f = (await Promise.resolve().then(() => require("node-fetch"))).default;
        const result = await (await retry_1.retry(async () => {
            var _a, _b;
            try {
                return await f(this.url, {
                    method: "post",
                    body,
                    headers: {
                        "authorization": `bearer ${this.apiKey}`,
                        "content-type": "application/json",
                    },
                });
            }
            catch (e) {
                // Retry DNS issues
                if (((_a = e.message) === null || _a === void 0 ? void 0 : _a.includes("EAI_AGAIN")) &&
                    ((_b = e.message) === null || _b === void 0 ? void 0 : _b.includes("getaddrinfo"))) {
                    console_1.warn("Retrying GraphQL operation due to DNS lookup failure");
                    throw e;
                }
                else {
                    throw new pRetry.AbortError(e);
                }
            }
        })).json();
        return result;
    }
}
function createGraphQLClient(apiKey, wid, endpoint = process.env.ATOMIST_GRAPHQL_ENDPOINT ||
    "https://automation.atomist.com/graphql") {
    const url = `${endpoint}/team/${wid}`;
    return new NodeFetchGraphQLClient(apiKey, url);
}
exports.createGraphQLClient = createGraphQLClient;
async function findGraphQLFile(q, prefix) {
    const trace = await Promise.resolve().then(() => require("stack-trace"));
    const stack = trace.get();
    const callSite = stack
        .filter(s => !!s.getFileName())
        .find(s => !s.getFileName().includes("node_modules/@atomist/skill") &&
        s.getFileName().startsWith("/"));
    if (callSite) {
        // This only works for Node.js > 12
        let cwd = path.dirname(callSite.getFileName());
        while (cwd) {
            const p = await findUp("graphql", {
                cwd,
                type: "directory",
            });
            if (!p) {
                throw new Error(`No 'graphql' found up from '${cwd}'`);
            }
            const gp = path.join(p, prefix, q);
            if (await fs.pathExists(gp)) {
                return util_1.inlineFragments((await fs.readFile(gp)).toString(), p);
            }
            else {
                cwd = cwd.split(path.sep).slice(0, -1).join(path.sep);
            }
        }
    }
    else {
        const cwd = path.join(process.cwd(), "graphql");
        const gp = path.join(cwd, prefix, q);
        if (await fs.pathExists(gp)) {
            return util_1.inlineFragments((await fs.readFile(gp)).toString(), cwd);
        }
    }
    throw new Error(`GraphQL file not found '${prefix}/${q}'`);
}
exports.findGraphQLFile = findGraphQLFile;
//# sourceMappingURL=graphql.js.map