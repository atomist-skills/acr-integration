import { Arg } from "./payload";
export declare function hash(obj: any): string;
export declare function truncate(text: string, length: number, options?: {
    direction: "start" | "middle" | "end";
    separator: string;
}): string;
export declare function toArray<T>(value: T | T[]): T[];
export declare function handlerLoader<T>(type: string): (name: string, cwd?: string) => Promise<T>;
export declare function requirePath(type: string, file: string, cwd?: string): Promise<string>;
export declare function extractParameters(intent: string): Arg[];
export declare function replacer(key: string, value: any): any;
export declare function hideString(value: any): any;
export declare function guid(): string;
export declare function bytes(x: string): string;
export declare function handleError<T>(f: () => Promise<T>, cb?: (err: Error) => T | undefined): Promise<T | undefined>;
export declare function handleErrorSync<T>(f: () => T, cb?: (err: Error) => T | undefined): T | undefined;
export declare const DefaultErrorHandler: (err: Error) => undefined;
export declare function isStaging(): boolean;
export declare function pluralize(text: string, count: number | any[], options?: {
    include?: boolean;
    includeOne?: boolean;
}): string;
export declare function levenshteinSort(word: string, elements: string[]): string[];
export declare function isPrimitive(test: any): boolean;
export declare function sourceLocationFromOffset(match: string, offset: number, content: string): {
    startLine: number;
    startOffset: number;
    endLine: number;
    endOffset: number;
};
//# sourceMappingURL=util.d.ts.map