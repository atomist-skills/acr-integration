"use strict";
/*
 * Copyright Â© 2021 Atomist, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.GoogleCloudStorageProvider = exports.createStorageProvider = void 0;
const fs = require("fs-extra");
const os = require("os");
const path = require("path");
const util_1 = require("../util");
function createStorageProvider(workspaceId) {
    return new GoogleCloudStorageProvider(bucketName(workspaceId));
}
exports.createStorageProvider = createStorageProvider;
class GoogleCloudStorageProvider {
    constructor(bucket) {
        this.bucket = bucket;
    }
    async retrieve(key, filePath) {
        const targetFilePath = filePath || path.join(os.tmpdir() || "/tmp", util_1.guid());
        await fs.ensureDir(path.dirname(targetFilePath));
        const storage = new (await Promise.resolve().then(() => require("@google-cloud/storage"))).Storage();
        await storage
            .bucket(this.bucket)
            .file(key)
            .download({ destination: targetFilePath });
        return targetFilePath;
    }
    async store(key, filePath) {
        const storage = new (await Promise.resolve().then(() => require("@google-cloud/storage"))).Storage();
        await storage.bucket(this.bucket).upload(filePath, {
            destination: key,
            resumable: false,
        });
    }
    async delete(key) {
        const storage = new (await Promise.resolve().then(() => require("@google-cloud/storage"))).Storage();
        await storage
            .bucket(this.bucket)
            .file(key)
            .delete({ ignoreNotFound: true });
    }
}
exports.GoogleCloudStorageProvider = GoogleCloudStorageProvider;
function bucketName(workspaceId) {
    const bucket = process.env.ATOMIST_STORAGE ||
        (workspaceId
            ? `gs://${workspaceId.toLowerCase()}-workspace-storage`
            : undefined);
    if (bucket) {
        return bucket.replace(/gs:\/\//, "");
    }
    else {
        return undefined;
    }
}
//# sourceMappingURL=provider.js.map