"use strict";
/*
 * Copyright Â© 2021 Atomist, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.restore = exports.store = void 0;
const fs = require("fs-extra");
const JSZip = require("jszip");
const os = require("os");
const path = require("path");
const console_1 = require("../log/console");
const util_1 = require("../project/util");
/**
 * Glob files and store archive in storage backend
 */
async function store(ctx, key, cwdOrProject, ...pattern) {
    const cwd = typeof cwdOrProject === "string" ? cwdOrProject : cwdOrProject.path();
    console_1.debug(`Storing cache '${key}' for pattern '${pattern.join(", ")}'...`);
    const files = await util_1.globFiles({ path: () => cwd }, pattern);
    console_1.debug(`Caching ${files.length} files`);
    const zip = new JSZip();
    for (const file of files) {
        const p = path.join(cwd, file);
        if ((await fs.stat(p)).isFile()) {
            zip.file(file, fs.createReadStream(p));
        }
    }
    const fileName = path.join(os.tmpdir() || "/tmp", `${ctx.correlationId}-${Date.now()}.zip`);
    await new Promise(resolve => {
        zip.generateNodeStream({
            type: "nodebuffer",
            streamFiles: true,
            compression: "DEFLATE",
            compressionOptions: { level: 6 },
        })
            .pipe(fs.createWriteStream(fileName))
            .on("finish", () => {
            resolve(fileName);
        });
    });
    await ctx.storage.store(key, fileName);
    console_1.debug(`Cache '${key}' stored`);
}
exports.store = store;
/**
 * Restore archive from storage backend and extract files
 */
async function restore(ctx, key, cwdOrProject) {
    const cwd = typeof cwdOrProject === "string" ? cwdOrProject : cwdOrProject.path();
    console_1.debug(`Restoring cache '${key}'...`);
    try {
        const fileName = path.join(os.tmpdir() || "/tmp", `${ctx.correlationId}-${Date.now()}.zip`);
        await ctx.storage.retrieve(key, fileName);
        const zip = await JSZip.loadAsync(await fs.readFile(fileName));
        for (const file in zip.files) {
            if (zip.files[file]) {
                const entry = zip.file(file);
                if (entry) {
                    const p = path.join(cwd, file);
                    await fs.ensureDir(path.dirname(p));
                    await fs.writeFile(p, await zip.file(file).async("nodebuffer"));
                }
            }
        }
    }
    catch (e) {
        console_1.debug(`Error extracting cache: %s`, e.message);
    }
    console_1.debug(`Cache '${key}' restored`);
}
exports.restore = restore;
//# sourceMappingURL=cache.js.map