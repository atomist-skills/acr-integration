import { Contextual } from "../handler/handler";
import { AuthenticatedRepositoryId } from "../repository/id";
import { CloneOptions } from "./clone";
import { Project } from "./project";
export interface ProjectLoader {
    load<C>(id: AuthenticatedRepositoryId<C>, baseDir: string): Promise<Project<C>>;
    clone<C>(id: AuthenticatedRepositoryId<C>, options?: CloneOptions): Promise<Project<C>>;
}
export declare function createProjectLoader(ctx?: Pick<Contextual<any, any>, "onComplete">): ProjectLoader;
export declare class DefaultProjectLoader implements ProjectLoader {
    private readonly ctx?;
    constructor(ctx?: Pick<Contextual<any, any>, "onComplete">);
    load(id: AuthenticatedRepositoryId<any>, baseDir: string): Promise<Project>;
    clone(id: AuthenticatedRepositoryId<any>, options?: CloneOptions): Promise<Project>;
}
//# sourceMappingURL=loader.d.ts.map