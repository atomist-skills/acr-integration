/// <reference types="node" />
import { SpawnSyncOptions } from "child_process";
import { ExecPromiseResult, SpawnPromiseOptions, SpawnPromiseReturns } from "../child_process";
import { AuthenticatedRepositoryId } from "../repository/id";
import { CloneOptions } from "./clone";
export declare type Spawn = (cmd: string, args?: string[], opts?: SpawnPromiseOptions & {
    level?: "debug" | "info";
}) => Promise<SpawnPromiseReturns>;
export declare type Exec = (cmd: string, args?: string[], opts?: SpawnSyncOptions) => Promise<ExecPromiseResult>;
/** Git repository project */
export interface Project<C = any> {
    id: AuthenticatedRepositoryId<C>;
    path(...elements: string[]): string;
    spawn: Spawn;
    exec: Exec;
}
/** Create a [[Project]] from an existing local directory */
export declare function load<C>(id: AuthenticatedRepositoryId<C>, baseDir: string): Promise<Project<C>>;
/** Clone a repository to create a [[Project]] */
export declare function clone<C>(id: AuthenticatedRepositoryId<C>, options?: CloneOptions): Promise<Project<C>>;
//# sourceMappingURL=project.d.ts.map