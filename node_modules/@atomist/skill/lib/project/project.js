"use strict";
/*
 * Copyright Â© 2021 Atomist, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.clone = exports.load = void 0;
const fs = require("fs-extra");
const path = require("path");
const child_process_1 = require("../child_process");
const git_1 = require("../git");
const log_1 = require("../log");
const util_1 = require("../util");
const clone_1 = require("./clone");
/** Create a [[Project]] from an existing local directory */
async function load(id, baseDir) {
    const project = {
        id,
        path: (...elements) => path.join(baseDir, ...(elements || [])),
        spawn: (cmd, args, opts) => child_process_1.spawnPromise(cmd, args, Object.assign({ log: log(opts === null || opts === void 0 ? void 0 : opts.level), cwd: baseDir }, (opts || {}))),
        exec: (cmd, args, opts) => child_process_1.execPromise(cmd, args, Object.assign({ cwd: baseDir }, (opts || {}))),
    };
    if (!(await fs.pathExists(path.join(baseDir, ".git")))) {
        await git_1.init(baseDir);
    }
    await util_1.handleError(() => git_1.setUserConfig(project));
    return project;
}
exports.load = load;
/** Clone a repository to create a [[Project]] */
async function clone(id, options) {
    const baseDir = await clone_1.doClone(id, options);
    const project = {
        id,
        path: (...elements) => path.join(baseDir, ...(elements || [])),
        spawn: (cmd, args, opts) => child_process_1.spawnPromise(cmd, args, Object.assign({ log: log(opts === null || opts === void 0 ? void 0 : opts.level), cwd: baseDir }, (opts || {}))),
        exec: (cmd, args, opts) => child_process_1.execPromise(cmd, args, Object.assign({ cwd: baseDir }, (opts || {}))),
    };
    await util_1.handleError(() => git_1.setUserConfig(project));
    return project;
}
exports.clone = clone;
function log(level = "debug") {
    let cb;
    switch (level) {
        case "debug":
            cb = log_1.debug;
            break;
        case "info":
            cb = log_1.info;
            break;
        default:
            cb = log_1.debug;
            break;
    }
    return {
        write: (msg) => {
            let line = msg;
            if (line.endsWith("\n")) {
                line = line.slice(0, -1);
            }
            const lines = line.split("\n");
            lines.forEach(l => cb(l.trimRight()));
        },
    };
}
//# sourceMappingURL=project.js.map