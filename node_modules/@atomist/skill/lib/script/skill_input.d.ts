export declare type Maybe<T> = T | null;
export declare type Scalars = {
    ID: string;
    String: string;
    Boolean: boolean;
    Int: number;
    Float: number;
};
/** Start: registration inputs */
export declare type AtomistSkillInput = {
    artifacts: AtomistSkillArtifactsInput;
    author: Scalars["String"];
    branchId: Scalars["String"];
    categories?: Maybe<Array<AtomistSkillCategoryKey>>;
    commands?: Maybe<Array<AtomistChatCommandInput>>;
    commitSha: Scalars["String"];
    description: Scalars["String"];
    dispatchStyle?: Maybe<AtomistSkillEventDispatchStyle>;
    displayName?: Maybe<Scalars["String"]>;
    homepageUrl: Scalars["String"];
    iconUrl: Scalars["String"];
    integration?: Maybe<Scalars["Boolean"]>;
    ingesters?: Maybe<Array<Scalars["String"]>>;
    license: Scalars["String"];
    longDescription: Scalars["String"];
    maxConfigurations?: Maybe<Scalars["Int"]>;
    name: Scalars["String"];
    namespace: Scalars["String"];
    parameters?: Maybe<Array<AtomistSkillParameterSpecInput>>;
    readme?: Maybe<Scalars["String"]>;
    repoId: Scalars["String"];
    resourceProviders?: Maybe<Array<AtomistSkillResourceProviderSpecInput>>;
    subscriptions?: Maybe<Array<Scalars["String"]>>;
    technologies?: Maybe<Array<AtomistSkillTechnology>>;
    version: Scalars["String"];
    videoUrl?: Maybe<Scalars["String"]>;
    datalogSubscriptions?: Maybe<Array<{
        name: string;
        query: string;
    }>>;
    schemata?: Maybe<Array<{
        name: string;
        schema: string;
    }>>;
};
export declare type AtomistSkillArtifactsInput = {
    docker?: Maybe<Array<AtomistDockerSkillArtifactInput>>;
    gcf?: Maybe<Array<AtomistGcfSkillArtifactInput>>;
};
export declare type AtomistDockerSkillArtifactInput = {
    args?: Maybe<Array<Scalars["String"]>>;
    command?: Maybe<Array<Scalars["String"]>>;
    env?: Maybe<Array<AtomistSkillEnvVariableInput>>;
    image: Scalars["String"];
    name: Scalars["ID"];
    workingDir?: Maybe<Scalars["String"]>;
};
export declare type AtomistSkillEnvVariableInput = {
    name: Scalars["String"];
    value: Scalars["String"];
};
export declare type AtomistGcfSkillArtifactInput = {
    entryPoint: Scalars["String"];
    memory?: Maybe<Scalars["Int"]>;
    name: Scalars["ID"];
    runtime: AtomistSkillRuntime;
    timeout?: Maybe<Scalars["Int"]>;
    url: Scalars["String"];
};
export declare enum AtomistSkillRuntime {
    Nodejs10 = "nodejs10",
    Nodejs12 = "nodejs12",
    Nodejs14 = "nodejs14",
    Python37 = "python37",
    Go113 = "go113"
}
export declare enum AtomistSkillCategoryKey {
    Chat = "CHAT",
    CodeMaintenance = "CODE_MAINTENANCE",
    DevOps = "DEVOPS",
    DevSecOps = "DEVSECOPS",
    RepoManagement = "REPO_MANAGEMENT",
    Security = "SECURITY"
}
export declare type AtomistChatCommandInput = {
    description: Scalars["String"];
    displayName?: Maybe<Scalars["String"]>;
    name: Scalars["String"];
    pattern: Scalars["String"];
};
export declare enum AtomistSkillEventDispatchStyle {
    Single = "single",
    Multiple = "multiple"
}
export declare enum AtomistSkillParameterVisiblity {
    Hidden = "hidden",
    Advanced = "advanced",
    Normal = "normal"
}
export declare type AtomistSkillParameterSpecInput = {
    boolean?: Maybe<AtomistSkillBooleanParameterSpecInput>;
    chatChannels?: Maybe<AtomistSkillChatChannelsParameterSpecInput>;
    float?: Maybe<AtomistSkillFloatParameterSpecInput>;
    int?: Maybe<AtomistSkillIntParameterSpecInput>;
    multiChoice?: Maybe<AtomistSkillMultiChoiceParameterSpecInput>;
    repoFilter?: Maybe<AtomistSkillRepoFilterParameterSpecInput>;
    schedule?: Maybe<AtomistSkillScheduleParameterSpecInput>;
    secret?: Maybe<AtomistSkillSecretParameterSpecInput>;
    singleChoice?: Maybe<AtomistSkillSingleChoiceParameterSpecInput>;
    string?: Maybe<AtomistSkillStringParameterSpecInput>;
    stringArray?: Maybe<AtomistSkillStringArrayParameterSpecInput>;
};
export declare type AtomistSkillBooleanParameterSpecInput = {
    defaultValue?: Maybe<Scalars["Boolean"]>;
    description: Scalars["String"];
    displayName?: Maybe<Scalars["String"]>;
    name: Scalars["String"];
    required: Scalars["Boolean"];
};
export declare type AtomistSkillChatChannelsParameterSpecInput = {
    description: Scalars["String"];
    displayName?: Maybe<Scalars["String"]>;
    maxAllowed?: Maybe<Scalars["Int"]>;
    minRequired?: Maybe<Scalars["Int"]>;
    name: Scalars["String"];
    required: Scalars["Boolean"];
    visibility?: Maybe<AtomistSkillParameterVisiblity>;
};
export declare type AtomistSkillFloatParameterSpecInput = {
    defaultValue?: Maybe<Scalars["Float"]>;
    description: Scalars["String"];
    displayName?: Maybe<Scalars["String"]>;
    maximum?: Maybe<Scalars["Float"]>;
    minimum?: Maybe<Scalars["Float"]>;
    name: Scalars["String"];
    placeHolder?: Maybe<Scalars["String"]>;
    required: Scalars["Boolean"];
    visibility?: Maybe<AtomistSkillParameterVisiblity>;
};
export declare type AtomistSkillIntParameterSpecInput = {
    defaultValue?: Maybe<Scalars["Int"]>;
    description: Scalars["String"];
    displayName?: Maybe<Scalars["String"]>;
    maximum?: Maybe<Scalars["Int"]>;
    minimum?: Maybe<Scalars["Int"]>;
    name: Scalars["String"];
    placeHolder?: Maybe<Scalars["String"]>;
    required: Scalars["Boolean"];
    visibility?: Maybe<AtomistSkillParameterVisiblity>;
};
export declare type AtomistSkillMultiChoiceParameterSpecInput = {
    defaultValues?: Maybe<Array<Scalars["String"]>>;
    description: Scalars["String"];
    displayName?: Maybe<Scalars["String"]>;
    maxAllowed?: Maybe<Scalars["Int"]>;
    minRequired?: Maybe<Scalars["Int"]>;
    name: Scalars["String"];
    options?: Maybe<Array<AtomistSkillChoiceInput>>;
    required: Scalars["Boolean"];
    visibility?: Maybe<AtomistSkillParameterVisiblity>;
};
export declare type AtomistSkillChoiceInput = {
    description?: Maybe<Scalars["String"]>;
    text: Scalars["String"];
    value: Scalars["String"];
};
export declare type AtomistSkillRepoFilterParameterSpecInput = {
    description: Scalars["String"];
    displayName?: Maybe<Scalars["String"]>;
    name: Scalars["String"];
    required: Scalars["Boolean"];
    visibility?: Maybe<AtomistSkillParameterVisiblity>;
};
export declare type AtomistSkillScheduleParameterSpecInput = {
    defaultValue?: Maybe<Scalars["String"]>;
    description: Scalars["String"];
    displayName?: Maybe<Scalars["String"]>;
    name: Scalars["String"];
    required: Scalars["Boolean"];
    visibility?: Maybe<AtomistSkillParameterVisiblity>;
};
export declare type AtomistSkillSingleChoiceParameterSpecInput = {
    defaultValue?: Maybe<Scalars["String"]>;
    description: Scalars["String"];
    displayName?: Maybe<Scalars["String"]>;
    name: Scalars["String"];
    options?: Maybe<Array<AtomistSkillChoiceInput>>;
    required: Scalars["Boolean"];
    visibility?: Maybe<AtomistSkillParameterVisiblity>;
};
export declare type AtomistSkillStringParameterSpecInput = {
    defaultValue?: Maybe<Scalars["String"]>;
    description: Scalars["String"];
    displayName?: Maybe<Scalars["String"]>;
    lineStyle?: Maybe<AtomistSkillStringParameterLineStyle>;
    name: Scalars["String"];
    pattern?: Maybe<Scalars["String"]>;
    placeHolder?: Maybe<Scalars["String"]>;
    required: Scalars["Boolean"];
    visibility?: Maybe<AtomistSkillParameterVisiblity>;
};
export declare type AtomistSkillSecretParameterSpecInput = {
    description: Scalars["String"];
    displayName?: Maybe<Scalars["String"]>;
    lineStyle?: Maybe<AtomistSkillStringParameterLineStyle>;
    name: Scalars["String"];
    required: Scalars["Boolean"];
    visibility?: Maybe<AtomistSkillParameterVisiblity>;
};
export declare enum AtomistSkillStringParameterLineStyle {
    Single = "single",
    Multiple = "multiple"
}
export declare type AtomistSkillStringArrayParameterSpecInput = {
    defaultValue?: Maybe<Array<Maybe<Scalars["String"]>>>;
    description: Scalars["String"];
    displayName?: Maybe<Scalars["String"]>;
    maxAllowed?: Maybe<Scalars["Int"]>;
    minRequired?: Maybe<Scalars["Int"]>;
    name: Scalars["String"];
    pattern?: Maybe<Scalars["String"]>;
    required: Scalars["Boolean"];
    visibility?: Maybe<AtomistSkillParameterVisiblity>;
};
export declare type AtomistSkillResourceProviderSpecInput = {
    description?: Maybe<Scalars["String"]>;
    maxAllowed?: Maybe<Scalars["Int"]>;
    minRequired?: Maybe<Scalars["Int"]>;
    name: Scalars["String"];
    typeName: Scalars["String"];
};
export declare enum AtomistSkillTechnology {
    Java = "JAVA",
    Maven = "MAVEN",
    Docker = "DOCKER",
    Javascript = "JAVASCRIPT",
    Npm = "NPM",
    Lein = "LEIN",
    Clojure = "CLOJURE",
    Kubernetes = "KUBERNETES"
}
export declare function createJavaScriptSkillInput(cwd: string, genArtifacts: boolean, name?: string): Promise<AtomistSkillInput>;
export declare function validateSkillInput(cwd: string, s: AtomistSkillInput, options?: {
    validateHandlers: boolean;
}): Promise<void>;
export declare function generateSkill(cwd: string, validate: boolean, artifacts: boolean): Promise<void>;
export declare function writeSkillYaml(cwd: string, skill: AtomistSkillInput): Promise<void>;
export declare function content(cwd: string): (key: string) => Promise<string[]>;
export declare function icon(cwd: string, key: string): Promise<string>;
//# sourceMappingURL=skill_input.d.ts.map