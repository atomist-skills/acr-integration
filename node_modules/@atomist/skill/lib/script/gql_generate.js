"use strict";
/*
 * Copyright Â© 2021 Atomist, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateGql = void 0;
const fs = require("fs-extra");
const path = require("path");
const child_process_1 = require("../child_process");
const log_1 = require("../log");
const util_1 = require("../project/util");
async function generateGql(options) {
    process.env.ATOMIST_LOG_LEVEL = "info";
    // Load globs from the codegen.yaml
    const yaml = await Promise.resolve().then(() => require("js-yaml"));
    const localCodegenPath = path.join(options.cwd, "codegen.yml");
    const graphqlCodegenPath = path.join(options.cwd, "graphql", "codegen.yml");
    const npmCodegenPath = path.join(options.cwd, "node_modules", "@atomist", "skill", "graphql", "codegen.yaml");
    const skillCodegenPath = path.join(__dirname, "..", "..", "graphql", "codegen.yaml");
    const config = options.config ||
        (fs.existsSync(localCodegenPath) && localCodegenPath) ||
        (fs.existsSync(graphqlCodegenPath) && graphqlCodegenPath) ||
        (fs.existsSync(npmCodegenPath) && npmCodegenPath) ||
        skillCodegenPath;
    log_1.info(`Using codegen configuration '${config}'`);
    const codegen = yaml.load(await fs.readFile(config, "utf8"));
    // Exit gracefully when there are no files found
    const files = await util_1.globFiles(options.cwd, codegen.documents);
    if (files.length === 0) {
        log_1.info("No graphql files found. Skipping type generation...");
        return;
    }
    const cli = path.join(options.cwd, "node_modules", "@graphql-codegen", "cli", "bin.js");
    const result = await child_process_1.spawnPromise(cli, ["--config", config, "-e"], {
        logCommand: false,
        log: {
            write: async (msg) => msg
                .trimRight()
                .split("\n")
                .forEach(l => log_1.info(l.trimRight())),
        },
    });
    if (result.status !== 0) {
        throw new Error("Type generation failed");
    }
    else {
        log_1.info(`Successfully generated graphql types in 'lib/typings/types.ts'`);
    }
}
exports.generateGql = generateGql;
//# sourceMappingURL=gql_generate.js.map