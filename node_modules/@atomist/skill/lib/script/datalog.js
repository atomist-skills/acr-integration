"use strict";
/*
 * Copyright Â© 2021 Atomist, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.query = void 0;
const fs = require("fs-extra");
const yaml = require("js-yaml");
const path = require("path");
const client_1 = require("../datalog/client");
const util_1 = require("../util");
const skill_register_1 = require("./skill_register");
async function query(args) {
    const skill = {
        id: util_1.guid(),
    };
    if (args.config) {
        const content = (await fs.readFile(path.join(args.cwd, ".atomist", "skill.yaml"))).toString();
        const atomistYaml = yaml.load(content);
        skill.name = atomistYaml.skill.name;
        skill.namespace = atomistYaml.skill.namespace;
        skill.version = atomistYaml.skill.version;
        skill.configuration = {
            name: args.config,
        };
    }
    const client = client_1.createDatalogClient(await skill_register_1.apiKey(), await skill_register_1.wid(args.workspace), util_1.guid(), skill);
    const query = (await fs.readFile(path.join(args.cwd, args.query))).toString();
    const result = await client.query(query, {
        configurationName: args.config,
        tx: args.tx,
        mode: !args.parse ? "raw" : undefined,
    });
    if (args.parse) {
        console.log(JSON.stringify(result));
    }
    else {
        console.log(result);
    }
}
exports.query = query;
//# sourceMappingURL=datalog.js.map