import { HandlerStatus } from "./handler/handler";
declare class BuildableHandlerStatus implements HandlerStatus {
    code: number;
    reason?: string;
    visibility?: undefined | "hidden";
    _abort?: boolean;
    constructor(code: number, reason?: string, visibility?: undefined | "hidden", _abort?: boolean);
    hidden(): this;
    abort(): this;
}
/**
 * Create a successful HandlerStatus with optionally provided
 * reason text
 *
 * The return object exposes a hidden function that can be used to
 * set the status to visibility: hidden or abort the step processing early.
 */
export declare function success(reason?: string): HandlerStatus & {
    hidden: () => BuildableHandlerStatus;
    abort: () => BuildableHandlerStatus;
};
/**
 * Create a failed HandlerStatus with optionally provided
 * reason text
 *
 * The return object exposes a hidden function that can be used to
 * set the status to visibility: hidden or abort the step processing early.
 */
export declare function failure(reason?: string): HandlerStatus & {
    hidden: () => BuildableHandlerStatus;
    abort: () => BuildableHandlerStatus;
};
export {};
//# sourceMappingURL=status.d.ts.map