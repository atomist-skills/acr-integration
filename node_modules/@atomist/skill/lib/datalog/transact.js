"use strict";
/*
 * Copyright Â© 2021 Atomist, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTransact = void 0;
const pubsub_1 = require("@google-cloud/pubsub");
const edn_data_1 = require("edn-data");
const console_1 = require("../log/console");
const util_1 = require("../util");
function createTransact(workspaceId, correlationId, skillId) {
    const topicName = process.env.ATOMIST_TOPIC || `${workspaceId}-${skillId}-response`;
    let topic;
    return async (entities) => {
        const invalidEntities = util_1.toArray(entities).filter(e => Object.values(e).some(v => v === undefined));
        if (invalidEntities.length > 0) {
            console_1.debug(`Entities with 'undefined' properties detected: ${JSON.stringify(invalidEntities)}`);
            throw new Error("Entities with 'undefined' properties detected");
        }
        const message = {
            api_version: "1",
            correlation_id: correlationId,
            team: {
                id: workspaceId,
            },
            type: "facts_ingestion",
            entities: edn_data_1.toEDNStringFromSimpleObject(util_1.toArray(entities)).replace(/":(.*?)"/gm, ":$1"),
        };
        try {
            console_1.debug(`Sending message: ${JSON.stringify(message, util_1.replacer)}`);
            if (!topic) {
                topic = new pubsub_1.PubSub().topic(topicName, {
                    messageOrdering: true,
                });
            }
            const messageBuffer = Buffer.from(JSON.stringify(message), "utf8");
            await topic.publishMessage({
                data: messageBuffer,
                orderingKey: correlationId,
            });
        }
        catch (err) {
            console_1.error(`Error occurred sending message: ${err.message}`);
        }
    };
}
exports.createTransact = createTransact;
//# sourceMappingURL=transact.js.map