"use strict";
/*
 * Copyright Â© 2021 Atomist, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.entityRef = exports.entityRefs = exports.entity = void 0;
const kebabcase = require("lodash.kebabcase");
const util_1 = require("../util");
/**
 * Helper to create a Datalog entity of given type and attributes
 */
function entity(type, nameOrAttributes, attributes) {
    const e = {
        "schema/entity-type": `:${type}`,
    };
    if (typeof nameOrAttributes === "string") {
        e["schema/entity"] = nameOrAttributes;
    }
    else {
        e["schema/entity"] = `$${type.split("/")[1]}-${util_1.guid()}`;
    }
    const attributesToUse = typeof nameOrAttributes === "string"
        ? attributes
        : nameOrAttributes || {};
    const prefix = type.replace(/\//g, ".");
    for (const attribute of Object.keys(attributesToUse)) {
        const value = attributesToUse[attribute];
        if (value) {
            if (attribute.includes("/")) {
                e[attribute] = value;
            }
            else {
                e[`${prefix}/${kebabcase(attribute)}`] = value;
            }
        }
    }
    return e;
}
exports.entity = entity;
/**
 * Helper to extract entity references from a list of provided entities
 * optionally filtered by schema/entity-type
 */
function entityRefs(entities, type) {
    return entities
        .filter(e => !type || e["schema/entity-type"] === `:${type}`)
        .filter(e => e["schema/entity"])
        .map(e => e["schema/entity"]);
}
exports.entityRefs = entityRefs;
/**
 * Helper to extract an entity reference from a list of provided entities
 * optionally filtered by schema/entity-type
 */
function entityRef(entities, type) {
    const refs = entityRefs(util_1.toArray(entities), type);
    if (refs.length > 0) {
        return refs[0];
    }
    return undefined;
}
exports.entityRef = entityRef;
//# sourceMappingURL=util.js.map