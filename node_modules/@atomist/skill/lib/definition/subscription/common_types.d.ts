export interface Repo {
    name: string;
    defaultBranch: string;
    org: {
        installationToken: string;
        name: string;
        url: string;
        baseUrl: string;
    };
}
export interface Commit {
    sha: string;
    message: string;
    repo: Repo;
    author: {
        name: string;
        login: string;
        emails: Array<{
            address: string;
        }>;
    };
    refs: Array<{
        name: string;
        type: "branch";
    }>;
}
export interface DockerImage {
    digest: string;
    tags?: string[];
    sha: string;
    labels?: Array<{
        name: string;
        value: string;
    }>;
    repository: {
        host: string;
        name: string;
    };
}
export declare enum DockerRegistryType {
    Gcr = "GCR",
    DockerHub = "DOCKER_HUB"
}
export interface DockerRegistry {
    type: DockerRegistryType;
    secret: string;
    username: string;
    serverUrl: string;
}
export declare enum DockerImageVulnerabilitySeverity {
    Unspecified = "SEVERITY_UNSPECIFIED",
    Minimal = "MINIMAL",
    Low = "LOW",
    Medium = "MEDIUM",
    High = "HIGH",
    Critical = "CRITICAL"
}
export interface BaseDockerVulnerability {
    sourceId: string;
    severity: DockerImageVulnerabilitySeverity;
    fixAvailable: boolean;
    affected: Array<{
        name: string;
        version: string;
    }>;
}
export interface DockerImageVulnerability extends BaseDockerVulnerability {
    title: string;
    description: string;
    cvssScore: string;
    fixed: Array<{
        name: string;
        version: string;
    }>;
}
export declare enum DockerAnalysisDiscoverySource {
    Gcr = "GCR",
    Trivy = "TRIVY"
}
export declare enum DockerAnalysisDiscoveryStatus {
    Pending = "PENDING",
    Scanning = "SCANNING",
    FinishedSuccess = "FINISHED_SUCCESS",
    FinishedFailed = "FINISHED_FAILED",
    FinishedUnsupported = "FINISHED_UNSUPPORTED",
    Unspecified = "ANALYSIS_STATUS_UNSPECIFIED"
}
export declare type BaseDockerImageWithVulnerabilities = Pick<DockerImage, "digest" | "sha"> & {
    vulnerabilities: BaseDockerVulnerability[];
};
export declare type DockerImageWithVulnerabilities = DockerImage & {
    layers: Array<{
        blob: {
            digest: string;
            vulnerabilities: Array<{
                sourceId: string;
            }>;
        };
    }>;
    repository: {
        baseline: Array<{
            vulnerabilities: DockerImageVulnerability[];
        }>;
    };
    vulnerabilities: DockerImageVulnerability[];
    dockerFile: {
        path: string;
        sha: string;
        lines: Array<{
            number: number;
            instruction: string;
            argsMap: Record<string, string>;
            argsArray: string[];
            argsString: string;
            tag: string;
            digest: string;
            layers: Array<{
                digest: string;
            }>;
            repository: {
                host: string;
                name: string;
            };
        }>;
    };
};
export interface WithCommitAndRegistry {
    commit: Commit;
    registry: DockerRegistry;
}
/**
 * Subscription type to be used with the on_docker_image datalog subscription
 */
export interface OnDockerImage extends WithCommitAndRegistry {
    image: DockerImage[];
}
/**
 * Subscription type to be used with on_docker_image_unlinked
 */
export interface OnDockerImageUnlinked {
    image: DockerImage;
    registry: DockerRegistry;
}
/**
 * Subscription type to be used with the on_dockerfile datalog subscription
 */
export interface OnDockerFile extends WithCommitAndRegistry {
    image: DockerImage;
    file: {
        id: number;
        path: string;
        sha: string;
        lines: Array<{
            number: number;
            instruction: string;
            argsMap: Record<string, string>;
            argsArray: string[];
            argsString: string;
        }>;
    };
}
/**
 * Subscription type to be used with the on_docker_analysis_complete datalog subscription
 */
export interface OnDockerAnalysisComplete {
    discovery: {
        status: DockerAnalysisDiscoveryStatus;
        source: DockerAnalysisDiscoverySource;
    };
    commit: Commit;
    image: [DockerImageWithVulnerabilities, BaseDockerImageWithVulnerabilities];
}
/**
 * Subscription type to be used with the on_push datalog subscription
 */
export interface OnPush {
    commit: Commit;
}
//# sourceMappingURL=common_types.d.ts.map