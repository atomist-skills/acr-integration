"use strict";
/*
 * Copyright Â© 2020 Atomist, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.secretProvider = exports.npmRegistry = exports.npmJSRegistry = exports.mavenRepository = exports.dockerRegistry = exports.gcp = exports.kubernetes = exports.gitHub = exports.msteams = exports.slack = exports.chat = exports.resourceProvider = void 0;
/**
 * Create a ResourceProvider instance to use in Skill resourceProvider definitions
 */
function resourceProvider(options) {
    return {
        typeName: options.typeName,
        displayName: options.displayName,
        description: options.description || options.displayName,
        minRequired: (options === null || options === void 0 ? void 0 : options.minRequired) !== undefined ? options.minRequired : 0,
        maxAllowed: options === null || options === void 0 ? void 0 : options.maxAllowed,
    };
}
exports.resourceProvider = resourceProvider;
/**
 * Create an ChatProvider to use in Skill resourceProvider definitions
 */
function chat(options = {}) {
    return resourceProvider(Object.assign({ displayName: "Chat", typeName: "ChatProvider" }, options));
}
exports.chat = chat;
/**
 * Create an SlackResourceProvider to use in Skill resourceProvider definitions
 */
function slack(options = {}) {
    return resourceProvider(Object.assign({ displayName: "Slack", typeName: "SlackResourceProvider" }, options));
}
exports.slack = slack;
/**
 * Create an MicrosoftTeamsResourceProvider to use in Skill resourceProvider definitions
 */
function msteams(options = {}) {
    return resourceProvider(Object.assign({ displayName: "Microsoft Teams", typeName: "MicrosoftTeamsResourceProvider" }, options));
}
exports.msteams = msteams;
/**
 * Create an GitHubAppResourceProvider to use in Skill resourceProvider definitions
 */
function gitHub(options = {}) {
    return resourceProvider(Object.assign({ displayName: "GitHub", typeName: "GitHubAppResourceProvider" }, options));
}
exports.gitHub = gitHub;
/**
 * Create an KubernetesClusterProvider to use in Skill resourceProvider definitions
 */
function kubernetes(options = {}) {
    return resourceProvider(Object.assign({ displayName: "Kubernetes cluster", typeName: "KubernetesClusterProvider" }, options));
}
exports.kubernetes = kubernetes;
/**
 * Create a GoogleCloudPlatformProvider to use in Skill resourceProvider definitions
 */
function gcp(options = {}) {
    return resourceProvider(Object.assign({ displayName: "Google Cloud Platform", typeName: "GoogleCloudPlatformProvider" }, options));
}
exports.gcp = gcp;
/**
 * Create an DockerRegistryProvider to use in Skill resourceProvider definitions
 */
function dockerRegistry(options = {}) {
    return resourceProvider(Object.assign({ displayName: "Docker registry", typeName: "DockerRegistry" }, options));
}
exports.dockerRegistry = dockerRegistry;
/**
 * Create an MavenRepositoryProvider to use in Skill resourceProvider definitions
 */
function mavenRepository(options = {}) {
    return resourceProvider(Object.assign({ displayName: "Maven repository", typeName: "MavenRepositoryProvider" }, options));
}
exports.mavenRepository = mavenRepository;
/**
 * Create an NpmJSRegistryProvider to use in Skill resourceProvider definitions
 * @deprecated use npmRegistry
 */
function npmJSRegistry(options = {}) {
    return resourceProvider(Object.assign({ displayName: "npmjs.com registry", typeName: "NpmJSRegistryProvider" }, options));
}
exports.npmJSRegistry = npmJSRegistry;
/**
 * Create an NpmRegistryProvider to use in Skill resourceProvider definitions
 */
function npmRegistry(options = {}) {
    return resourceProvider(Object.assign({ displayName: "npm registry", typeName: "NpmRegistryProvider" }, options));
}
exports.npmRegistry = npmRegistry;
/**
 * Create an SecretProvider to use in Skill resourceProvider definitions
 */
function secretProvider(options = {}) {
    return resourceProvider(Object.assign({ displayName: "Secrets", typeName: "SecretProvider", maxAllowed: 1 }, options));
}
exports.secretProvider = secretProvider;
//# sourceMappingURL=definition.js.map