import { AtomistSkillCategoryKey as Category } from "../script/skill_input";
export { Category };
export declare enum Technology {
    Java = "JAVA",
    Maven = "MAVEN",
    Docker = "DOCKER",
    JavaScript = "JAVASCRIPT",
    NPM = "NPM",
    Leiningen = "LEIN",
    Clojure = "CLOJURE",
    Kubernetes = "KUBERNETES"
}
export declare enum Platform {
    NodeJs10 = "nodejs10",
    NodeJs12 = "nodejs12",
    NodeJs14 = "nodejs14",
    Python37 = "python37",
    Python38 = "python38",
    Go113 = "go113",
    Java11 = "java11"
}
export interface SkillRuntime {
    entryPoint?: string;
    platform?: Platform;
    url?: string;
    memory?: number;
    timeout?: number;
}
export interface SkillPackage {
    bundle?: boolean;
    minify?: boolean;
    sourceMaps?: boolean;
}
export interface SkillContainer {
    image: string;
    args?: string[];
    command?: string[];
    env?: Array<{
        name: string;
        value: string;
    }>;
    workingDir?: string;
    resources?: {
        limit?: {
            cpu: number;
            memory: number;
        };
        request?: {
            cpu: number;
            memory: number;
        };
    };
}
export interface ResourceProvider {
    description?: string;
    displayName?: string;
    maxAllowed?: number;
    minRequired?: number;
    typeName: string;
}
export declare enum ParameterVisibility {
    Hidden = "hidden",
    Advanced = "advanced",
    Normal = "normal"
}
export declare enum LineStyle {
    Single = "single",
    Multiple = "multiple"
}
export interface Parameter<T, D = any> {
    type: T;
    defaultValue?: D;
    description: string;
    displayName?: string;
    required: boolean;
    visibility?: ParameterVisibility;
}
export declare type BooleanParameter = Parameter<ParameterType.Boolean, boolean>;
export interface ChatChannelParameterValue {
    channelName: string;
    channelId: string;
    chatTeamId: string;
    resourceProviderId: string;
}
export interface ChatChannelsParameter extends Omit<Parameter<ParameterType.ChatChannels, ChatChannelParameterValue[]>, "defaultValue"> {
    maxAllowed?: number;
    minRequired?: number;
}
export interface FloatParameter extends Parameter<ParameterType.Float, number> {
    maximum?: number;
    minimum?: number;
    placeHolder?: string;
}
export interface IntParameter extends Parameter<ParameterType.Int, number> {
    maximum?: number;
    minimum?: number;
    placeHolder?: string;
}
export interface MultiChoiceParameter extends Omit<Parameter<ParameterType.MultiChoice>, "defaultValue"> {
    defaultValues?: string[];
    maxAllowed?: number;
    minRequired?: number;
    options: Array<{
        description?: string;
        text: string;
        value: string;
    }>;
}
export interface SingleChoiceParameter extends Parameter<ParameterType.SingleChoice, string> {
    maxAllowed?: number;
    minRequired?: number;
    options: Array<{
        description?: string;
        text: string;
        value: string;
    }>;
}
export declare type RepoFilterParameter = Omit<Parameter<ParameterType.RepoFilter>, "defaultValue" | "visibility">;
export interface WebhookParameter extends Omit<Parameter<ParameterType.Webhook>, "defaultValue"> {
    maxAllowed?: number;
    minRequired?: number;
}
export declare type ScheduleParameter = Parameter<ParameterType.Schedule, string>;
export interface StringParameter extends Parameter<ParameterType.String, string> {
    lineStyle?: LineStyle;
    pattern?: string;
    placeHolder?: string;
}
export interface SecretParameter extends Omit<Parameter<ParameterType.Secret>, "defaultValue"> {
    lineStyle?: LineStyle;
}
export interface StringArrayParameter extends Parameter<ParameterType.StringArray, string[]> {
    maxAllowed?: number;
    minRequired?: number;
    pattern?: string;
}
export interface Named {
    name: string;
    namespace?: string;
}
export interface Metadata extends Required<Named> {
    version?: string;
    author: string;
    displayName: string;
    description: string;
    longDescription: string;
    readme?: string;
    license: string;
    categories?: Category[];
    technologies?: Technology[];
    homepageUrl: string;
    repositoryUrl: string;
    iconUrl: string;
    videoUrl?: string;
    integration?: boolean;
}
export declare enum ParameterType {
    Boolean = "boolean",
    ChatChannels = "chatChannels",
    Float = "float",
    Int = "int",
    MultiChoice = "multiChoice",
    SingleChoice = "singleChoice",
    RepoFilter = "repoFilter",
    Schedule = "schedule",
    String = "string",
    Secret = "secret",
    StringArray = "stringArray",
    Webhook = "webhook"
}
export declare type ParametersIndexType = string;
export declare type ParametersType = {
    [key in ParametersIndexType]?: number | boolean | string | number | string[];
};
export interface Configuration<PARAMS extends ParametersType = any> {
    maxConfigurations?: number;
    runtime?: SkillRuntime;
    containers?: Record<string, SkillContainer>;
    package?: SkillPackage;
    parameters?: Record<keyof PARAMS, BooleanParameter | FloatParameter | IntParameter | MultiChoiceParameter | SingleChoiceParameter | RepoFilterParameter | ScheduleParameter | StringParameter | StringArrayParameter | ChatChannelsParameter | WebhookParameter | SecretParameter>;
    resourceProviders?: Record<string, ResourceProvider>;
}
export interface Command {
    name: string;
    displayName?: string;
    description: string;
    pattern: RegExp;
}
export declare enum CapabilityScope {
    Ingestion = "ingestion",
    Configuration = "configuration",
    Subscription = "subscription"
}
export interface Operations {
    commands?: Command[];
    subscriptions?: string[];
    datalogSubscriptions?: Array<{
        name: string;
        query: string;
    }>;
    schemata?: Array<{
        name: string;
        schema: string;
    }>;
    capabilities?: {
        provides?: Array<{
            name: string;
            namespace: string;
        }>;
        requires?: Array<{
            description?: string;
            displayName?: string;
            maxAllowed?: number;
            minRequired?: number;
            name: string;
            namespace?: string;
            scopes: CapabilityScope[];
            usage: string;
        }>;
    };
}
export declare type Skill<PARAMS = any> = Metadata & Configuration<PARAMS> & Operations;
export declare function packageJson(path?: string): Partial<Metadata>;
export declare type SkillInput<PARAMS = any> = Partial<Metadata> & Configuration<PARAMS> & Operations;
export declare function skill<PARAMS = any>(skill: SkillInput<PARAMS> | Promise<SkillInput<PARAMS>>): Promise<Skill<PARAMS>>;
//# sourceMappingURL=skill.d.ts.map