"use strict";
/*
 * Copyright Â© 2021 Atomist, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.skill = exports.packageJson = exports.CapabilityScope = exports.ParameterType = exports.LineStyle = exports.ParameterVisibility = exports.Platform = exports.Technology = exports.Category = void 0;
const fs = require("fs-extra");
const path = require("path");
const skill_input_1 = require("../script/skill_input");
Object.defineProperty(exports, "Category", { enumerable: true, get: function () { return skill_input_1.AtomistSkillCategoryKey; } });
var Technology;
(function (Technology) {
    Technology["Java"] = "JAVA";
    Technology["Maven"] = "MAVEN";
    Technology["Docker"] = "DOCKER";
    Technology["JavaScript"] = "JAVASCRIPT";
    Technology["NPM"] = "NPM";
    Technology["Leiningen"] = "LEIN";
    Technology["Clojure"] = "CLOJURE";
    Technology["Kubernetes"] = "KUBERNETES";
})(Technology = exports.Technology || (exports.Technology = {}));
var Platform;
(function (Platform) {
    Platform["NodeJs10"] = "nodejs10";
    Platform["NodeJs12"] = "nodejs12";
    Platform["NodeJs14"] = "nodejs14";
    Platform["Python37"] = "python37";
    Platform["Python38"] = "python38";
    Platform["Go113"] = "go113";
    Platform["Java11"] = "java11";
})(Platform = exports.Platform || (exports.Platform = {}));
var ParameterVisibility;
(function (ParameterVisibility) {
    ParameterVisibility["Hidden"] = "hidden";
    ParameterVisibility["Advanced"] = "advanced";
    ParameterVisibility["Normal"] = "normal";
})(ParameterVisibility = exports.ParameterVisibility || (exports.ParameterVisibility = {}));
var LineStyle;
(function (LineStyle) {
    LineStyle["Single"] = "single";
    LineStyle["Multiple"] = "multiple";
})(LineStyle = exports.LineStyle || (exports.LineStyle = {}));
var ParameterType;
(function (ParameterType) {
    ParameterType["Boolean"] = "boolean";
    ParameterType["ChatChannels"] = "chatChannels";
    ParameterType["Float"] = "float";
    ParameterType["Int"] = "int";
    ParameterType["MultiChoice"] = "multiChoice";
    ParameterType["SingleChoice"] = "singleChoice";
    ParameterType["RepoFilter"] = "repoFilter";
    ParameterType["Schedule"] = "schedule";
    ParameterType["String"] = "string";
    ParameterType["Secret"] = "secret";
    ParameterType["StringArray"] = "stringArray";
    ParameterType["Webhook"] = "webhook";
})(ParameterType = exports.ParameterType || (exports.ParameterType = {}));
var CapabilityScope;
(function (CapabilityScope) {
    CapabilityScope["Ingestion"] = "ingestion";
    CapabilityScope["Configuration"] = "configuration";
    CapabilityScope["Subscription"] = "subscription";
})(CapabilityScope = exports.CapabilityScope || (exports.CapabilityScope = {}));
function packageJson(path = "package.json") {
    var _a, _b, _c;
    try {
        const pj = require(path); // eslint-disable-line @typescript-eslint/no-var-requires
        const name = (_a = pj.name) === null || _a === void 0 ? void 0 : _a.split("/");
        return {
            name: name ? ((name === null || name === void 0 ? void 0 : name.length) === 2 ? name[1] : name[0]) : undefined,
            namespace: name
                ? (name === null || name === void 0 ? void 0 : name.length) === 2
                    ? name[0].replace(/@/g, "")
                    : undefined
                : undefined,
            displayName: pj.displayName || pj.description,
            author: typeof pj.author === "string" ? pj.author : (_b = pj.author) === null || _b === void 0 ? void 0 : _b.name,
            license: pj.license,
            categories: pj.categories || pj.keywords,
            technologies: pj.technologies,
            homepageUrl: pj.homepage,
            repositoryUrl: typeof pj.repository === "string"
                ? pj.repository
                : (_c = pj.repository) === null || _c === void 0 ? void 0 : _c.url,
            iconUrl: pj.icon ? pj.icon : undefined,
        };
    }
    catch (e) {
        return {};
    }
}
exports.packageJson = packageJson;
async function skill(skill) {
    // Get the directory of the calling script
    let cwd = process.cwd();
    try {
        throw new Error();
    }
    catch (e) {
        const stack = (await Promise.resolve().then(() => require("stack-trace"))).parse(e);
        cwd = path.dirname(stack[1].getFileName());
    }
    // Merge in an existing skill.yaml file from the root of the project
    const skillYamlPath = path.join(cwd, "skill.yaml");
    let skillYaml = {};
    if (await fs.pathExists(skillYamlPath)) {
        const yaml = await Promise.resolve().then(() => require("js-yaml"));
        skillYaml = yaml.load((await fs.readFile(skillYamlPath)).toString());
        if (skillYaml.skill) {
            skillYaml = skillYaml.skill;
        }
    }
    return Object.assign(Object.assign(Object.assign({}, packageJson(path.join(cwd, "package.json"))), (skillYaml || {})), (await skill));
}
exports.skill = skill;
//# sourceMappingURL=skill.js.map