"use strict";
/*
 * Copyright Â© 2020 Atomist, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.genericSecret = void 0;
const context_1 = require("../context");
const SecretProviderQuery = `query SecretProvider($id: ID) {
	SecretProvider(id: $id) {
		id
		name
		credential {
		... on Password {
				secret
			}
			owner {
				login
			}
			id
		}
	}
}`;
function genericSecret(name) {
    return async (graph, payload) => {
        var _a, _b, _c, _d, _e;
        const cfg = (_a = context_1.extractConfiguration(payload)) === null || _a === void 0 ? void 0 : _a.configuration.find(i => !!i.resourceProviders[name]);
        if (cfg) {
            const id = (_c = (_b = cfg.resourceProviders[name].selectedResourceProviders) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.id;
            const provider = (_d = (await graph.query(SecretProviderQuery, { id }))
                .SecretProvider) === null || _d === void 0 ? void 0 : _d[0];
            return {
                name: provider.name,
                secret: (_e = provider.credential) === null || _e === void 0 ? void 0 : _e.secret,
            };
        }
        return undefined;
    };
}
exports.genericSecret = genericSecret;
//# sourceMappingURL=generic_resolver.js.map