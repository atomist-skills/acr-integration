"use strict";
/*
 * Copyright Â© 2021 Atomist, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.separator = exports.ts = exports.footer = exports.supportLink = exports.progressMessage = exports.errorMessage = exports.warningMessage = exports.infoMessage = exports.questionMessage = exports.successMessage = void 0;
const slack_messages_1 = require("@atomist/slack-messages");
const util_1 = require("../log/util");
const util_2 = require("../util");
function successMessage(title, text, ctx, options = {}) {
    const msg = {
        attachments: [
            Object.assign({ author_icon: `https://images.atomist.com/rug/check-circle.gif?gif=${util_2.guid()}`, author_name: title, author_link: util_1.url(ctx), text, fallback: text, color: "#37A745", mrkdwn_in: ["text"], footer: footer(ctx), footer_icon: "https://images.atomist.com/logo/atomist-black-mark-xsmall.png", ts: ts() }, options),
        ],
    };
    return msg;
}
exports.successMessage = successMessage;
function questionMessage(title, text, ctx, options = {}) {
    const msg = {
        attachments: [
            Object.assign({ author_icon: `https://images.atomist.com/rug/question.png`, author_name: title, author_link: util_1.url(ctx), text, fallback: text, color: "#B5B5B5", mrkdwn_in: ["text"], footer: footer(ctx), footer_icon: "https://images.atomist.com/logo/atomist-black-mark-xsmall.png", ts: ts() }, options),
        ],
    };
    return msg;
}
exports.questionMessage = questionMessage;
function infoMessage(title, text, ctx, options = {}) {
    const msg = {
        attachments: [
            Object.assign({ author_icon: `https://images.atomist.com/rug/info.png`, author_name: title, author_link: util_1.url(ctx), text, fallback: text, color: "#B5B5B5", mrkdwn_in: ["text"], footer: footer(ctx), footer_icon: "https://images.atomist.com/logo/atomist-black-mark-xsmall.png", ts: ts() }, options),
        ],
    };
    return msg;
}
exports.infoMessage = infoMessage;
function warningMessage(title, text, ctx, options = {}) {
    const msg = {
        attachments: [
            Object.assign({ author_icon: `https://images.atomist.com/rug/warning-yellow.png`, author_name: title, author_link: util_1.url(ctx), text, fallback: text, color: "#D7B958", mrkdwn_in: ["text"], footer: supportLink(ctx), footer_icon: "https://images.atomist.com/logo/atomist-black-mark-xsmall.png", ts: ts() }, options),
        ],
    };
    return msg;
}
exports.warningMessage = warningMessage;
function errorMessage(title, text, ctx, options = {}) {
    const msg = {
        attachments: [
            Object.assign({ author_icon: "https://images.atomist.com/rug/error-circle.png", author_name: title, author_link: util_1.url(ctx), text, fallback: text, color: "#BC3D33", mrkdwn_in: ["text"], footer: supportLink(ctx), footer_icon: "https://images.atomist.com/logo/atomist-black-mark-xsmall.png", ts: ts() }, options),
        ],
    };
    return msg;
}
exports.errorMessage = errorMessage;
function progressMessage(title, text, progress, ctx, options = {}) {
    let color;
    switch (progress.state) {
        case "canceled":
            color = progress.color || "#B5B5B5";
            break;
        case "stopped":
            color = progress.color || "#D7B958";
            break;
        case "in_process":
            color = progress.color || "#2A7D7D";
            break;
        case "requested":
        case "planned":
            color = progress.color || "#D7B958";
            break;
        case "failure":
            color = progress.color || "#BC3D33";
            break;
        case "waiting_for_approval":
        case "approved":
            color = progress.color || "#D7B958";
            break;
        case "waiting_for_pre_approval":
        case "pre_approved":
            color = progress.color || "#D7B958";
            break;
        default:
            color = progress.color || "#37A745";
            break;
    }
    const params = [];
    if (progress.counter === false) {
        params.push("counter=no");
    }
    if (progress.status === false) {
        params.push("status=no");
    }
    if (progress.image === false) {
        params.push("image=no");
    }
    if (progress.color) {
        params.push(`color=${progress.color}`);
    }
    const slackMsg = {
        attachments: [
            Object.assign({ mrkdwn_in: ["text"], fallback: title, title, title_link: util_1.url(ctx), text, thumb_url: `https://badge.atomist.com/v2/progress/${progress.state}/${progress.count}/${progress.total}${params.length > 0 ? `?${params.join("&")}` : ""}`, color, footer: footer(ctx), footer_icon: "https://images.atomist.com/logo/atomist-black-mark-xsmall.png", ts: ts() }, (options || {})),
        ],
    };
    return slackMsg;
}
exports.progressMessage = progressMessage;
function supportLink(ctx) {
    const supportUrl = `https://atomist.typeform.com/to/yvnyOj?message_id=${Buffer.from(ctx.correlationId).toString("base64")}`;
    return `${footer(ctx)} \u00B7 ${slack_messages_1.url(supportUrl, "Support")}`;
}
exports.supportLink = supportLink;
function footer(ctx) {
    return `${ctx.skill.namespace}/${ctx.skill.name}`;
}
exports.footer = footer;
function ts() {
    return Math.floor(Date.now() / 1000);
}
exports.ts = ts;
function separator() {
    return "\u00B7";
}
exports.separator = separator;
//# sourceMappingURL=messages.js.map