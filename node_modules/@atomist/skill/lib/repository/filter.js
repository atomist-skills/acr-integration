"use strict";
/*
 * Copyright Â© 2021 Atomist, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.matchesRefFilter = exports.matchesRepoFilter = exports.matchesFilter = void 0;
const util_1 = require("../util");
/**
 * @deprecated use matchesRepoFilter
 */
exports.matchesFilter = matchesRepoFilter;
function matchesRepoFilter(repoId, orgId, configurationName, parameterName, ctx) {
    const cfg = util_1.toArray(ctx.configuration).find(c => c.name === configurationName);
    const repoFilter = cfg.parameters[parameterName];
    if (repoFilter) {
        const excludes = repoFilter.excludes || [];
        const includes = repoFilter.includes || [];
        if (includes.length === 0 && excludes.length === 0) {
            return true;
        }
        else if (excludes.some(e => (e.repoIds || []).includes(repoId))) {
            return false;
        }
        else if (includes.some(i => (i.repoIds || []).includes(repoId))) {
            return true;
        }
        else if (excludes.some(e => e.ownerId === orgId &&
            (!e.repoIds || e.repoIds.length === 0))) {
            return false;
        }
        else if (includes.some(i => i.ownerId === orgId &&
            (!i.repoIds || i.repoIds.length === 0))) {
            return true;
        }
        return false;
    }
    return true;
}
exports.matchesRepoFilter = matchesRepoFilter;
function matchesRefFilter(parameterName, ctx) {
    var _a, _b, _c, _d;
    const filter = ((_b = (_a = ctx.configuration) === null || _a === void 0 ? void 0 : _a.parameters) === null || _b === void 0 ? void 0 : _b[parameterName]) || [
        ".*",
    ];
    if ((filter === null || filter === void 0 ? void 0 : filter.length) > 0) {
        const push = (_c = ctx.data.Push) === null || _c === void 0 ? void 0 : _c[0];
        const tag = (_d = ctx.data.Tag) === null || _d === void 0 ? void 0 : _d[0];
        let ref;
        if (push) {
            ref = push.branch;
        }
        else if (tag) {
            ref = tag.name;
        }
        return filter.some(f => new RegExp(f).test(ref));
    }
    return true;
}
exports.matchesRefFilter = matchesRefFilter;
//# sourceMappingURL=filter.js.map