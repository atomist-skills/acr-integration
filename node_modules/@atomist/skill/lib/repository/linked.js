"use strict";
/*
 * Copyright Â© 2021 Atomist, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.linkedRepository = exports.linkedRepositories = void 0;
const id_1 = require("./id");
const LinkedRepositoriesQuery = `query LinkedRepositories($id: String!) {
  ChatChannel(channelId: $id) {
    repos {
      id
      name
      owner
      defaultBranch
      org {
        id
        provider {
          apiUrl
        }
      }
    }
  }
}
`;
/**
 * Return all linked repositories from the given command context; or an empty array if no
 * linked repositories exist.
 */
async function linkedRepositories(ctx) {
    var _a, _b, _c, _d, _e, _f;
    const channelId = (_c = (_b = (_a = ctx.trigger.source) === null || _a === void 0 ? void 0 : _a.slack) === null || _b === void 0 ? void 0 : _b.channel) === null || _c === void 0 ? void 0 : _c.id;
    if (!channelId) {
        return [];
    }
    const channel = await ctx.graphql.query(LinkedRepositoriesQuery, {
        id: channelId,
    });
    if (((_d = channel.ChatChannel) === null || _d === void 0 ? void 0 : _d.length) > 0 &&
        ((_f = (_e = channel.ChatChannel[0]) === null || _e === void 0 ? void 0 : _e.repos) === null || _f === void 0 ? void 0 : _f.length) > 0) {
        return channel.ChatChannel[0].repos.map(r => {
            var _a, _b, _c;
            return ({
                owner: r.owner,
                repo: r.name,
                apiUrl: (_b = (_a = r.org) === null || _a === void 0 ? void 0 : _a.provider) === null || _b === void 0 ? void 0 : _b.apiUrl,
                branch: r.defaultBranch,
                type: id_1.RepositoryProviderType.GitHubCom,
                repoId: r.id,
                ownerId: (_c = r.org) === null || _c === void 0 ? void 0 : _c.id,
            });
        });
    }
    return [];
}
exports.linkedRepositories = linkedRepositories;
async function linkedRepository(ctx) {
    const repositories = await linkedRepositories(ctx);
    if ((repositories === null || repositories === void 0 ? void 0 : repositories.length) === 1) {
        return repositories[0];
    }
    else if ((repositories === null || repositories === void 0 ? void 0 : repositories.length) > 1) {
        const repository = await ctx.parameters.prompt({
            slug: {
                description: "Select repository",
                type: {
                    kind: "single",
                    options: repositories.map(r => ({
                        description: `${r.owner}/${r.repo}`,
                        value: `${r.owner}/${r.repo}`,
                    })),
                },
            },
        });
        const owner = repository.slug.split("/")[0];
        const repo = repository.slug.split("/")[1];
        return repositories.find(r => r.owner === owner && r.repo === repo);
    }
    return undefined;
}
exports.linkedRepository = linkedRepository;
//# sourceMappingURL=linked.js.map