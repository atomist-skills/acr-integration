"use strict";
/*
 * Copyright Â© 2021 Atomist, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.convergeLabel = exports.formatFooter = exports.formatMarkers = exports.api = void 0;
const console_1 = require("../log/console");
const payload_1 = require("../payload");
const util_1 = require("../util");
const DefaultGitHubApiUrl = "https://api.github.com/";
function api(id) {
    const url = (id === null || id === void 0 ? void 0 : id.apiUrl) || DefaultGitHubApiUrl;
    const { Octokit } = require("@octokit/rest"); // eslint-disable-line @typescript-eslint/no-var-requires
    const { throttling } = require("@octokit/plugin-throttling"); // eslint-disable-line @typescript-eslint/no-var-requires
    const { retry } = require("@octokit/plugin-retry"); // eslint-disable-line @typescript-eslint/no-var-requires
    const ConfiguredOctokit = Octokit.plugin(throttling, retry);
    return new ConfiguredOctokit({
        auth: (id === null || id === void 0 ? void 0 : id.credential) ? `token ${id.credential.token}` : undefined,
        baseUrl: url.endsWith("/") ? url.slice(0, -1) : url,
        throttle: {
            onRateLimit: (retryAfter, options) => {
                console.warn(`Request quota exhausted for request '${options.method} ${options.url}'`);
                if (options.request.retryCount === 0) {
                    // only retries once
                    console.debug(`Retrying after ${retryAfter} seconds!`);
                    return true;
                }
                return false;
            },
            onAbuseLimit: (retryAfter, options) => {
                console.warn(`Abuse detected for request '${options.method} ${options.url}'`);
            },
        },
        log: {
            debug: console_1.debug,
            info: console_1.debug,
            warn: console_1.debug,
            error: console_1.debug,
        },
    });
}
exports.api = api;
function formatMarkers(ctx, ...tags) {
    const tx = payload_1.isSubscriptionIncoming(ctx.trigger)
        ? ctx.trigger.subscription.tx
        : undefined;
    return `
<!--
  [atomist:generated]
  [atomist-skill:${ctx.skill.namespace}/${ctx.skill.name}]
  [atomist-version:${ctx.skill.version}]
  [atomist-configuration:${util_1.toArray(ctx.configuration)
        .map(c => c.name)
        .join(",")}]
  [atomist-workspace-id:${ctx.workspaceId}]${tx
        ? `
  [atomist-tx:${tx}]`
        : ""}
  [atomist-correlation-id:${ctx.correlationId}]${tags.length > 0 ? "\n" : ""}${tags.map(t => `  [${t}]`).join("\n")}
-->`;
}
exports.formatMarkers = formatMarkers;
function formatFooter(ctx) {
    return `
---

<p align="center">
<sub>
<a href="https://go.atomist.com/catalog/skills/${ctx.skill.namespace}/${ctx.skill.name}">${ctx.skill.namespace}/${ctx.skill.name}</a> \u00B7 ${util_1.toArray(ctx.configuration)
        .map(c => `<a href="${c.url}">Configure</a>`)
        .join("\u00B7")}
</sub>
</p>`;
}
exports.formatFooter = formatFooter;
async function convergeLabel(id, name, color, description) {
    try {
        await api(id).issues.updateLabel({
            name,
            color,
            description,
            repo: id.repo,
            owner: id.owner,
        });
    }
    catch (err) {
        await api(id).issues.createLabel({
            name,
            color,
            description,
            repo: id.repo,
            owner: id.owner,
        });
    }
}
exports.convergeLabel = convergeLabel;
//# sourceMappingURL=operation.js.map