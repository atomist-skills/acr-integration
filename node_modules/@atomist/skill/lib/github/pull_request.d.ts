import { PushStrategy } from "../definition/parameter/definition";
import * as git from "../git/operation";
import { Contextual, HandlerStatus } from "../handler/handler";
import { Project } from "../project/project";
/**
 * Persist changes to a git repository back to the remote using the
 * provided [[PushStrategy]].
 *
 * @param ctx trigger context
 * @param project repository to act on
 * @param strategy push strategy
 * @param push push that triggered this activity
 * @param pullRequest details of pull request to create, if push strategy dictates
 * @param commit commit `message` for existing changes and project `editors` to
 *               to run on project; if editor returns a string, it is used as the
 *               commit message for the changes, otherwise the changes accumulate
 *               until an editor does return a string
 * @return skill handler return status
 */
export declare function persistChanges(ctx: Contextual<any, any>, project: Project, strategy: PushStrategy, push: {
    branch: string;
    defaultBranch: string;
    author: {
        login: string;
        name?: string;
        email?: string;
    };
}, pullRequest: {
    title: string;
    body: string;
    branch: string;
    labels?: string[];
    reviewers?: string[];
    assignReviewer?: boolean;
    update?: () => Promise<{
        title?: string;
        body?: string;
        labels?: string[];
        reviewers?: [];
    }>;
}, commit: {
    message?: string;
    editors?: git.CommitEditor[];
}): Promise<HandlerStatus>;
/**
 * Close any existing pull requests in project matching the provided
 * base and head branch.
 *
 * @param ctx trigger context
 * @param project repository to act on
 * @param base pull request base branch
 * @param head pull request branch
 * @param comment comment to create when closing pull requests
 */
export declare function closePullRequests(ctx: Contextual<any, any>, project: Project, base: string, head: string, comment: string): Promise<void>;
//# sourceMappingURL=pull_request.d.ts.map