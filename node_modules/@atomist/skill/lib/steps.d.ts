import { CommandContext, EventContext, HandlerStatus } from "./handler/handler";
/**
 * Single step in the Skill execution
 */
export interface Step<C extends EventContext | CommandContext, G extends Record<string, any> = any> {
    /** Name of the step */
    name: string;
    /** Function that gets called when the step should execute */
    run: (context: C, parameters: G) => Promise<HandlerStatus>;
    /** Optional function to indicate if the step should runSkill */
    runWhen?: (context: C, parameters: G) => Promise<boolean>;
}
export interface StepListener<C extends EventContext | CommandContext, G extends Record<string, any> = any> {
    starting?(step: Step<C>, parameters: G): Promise<void>;
    skipped?(step: Step<C>, parameters: G): Promise<void>;
    completed?(step: Step<C>, parameters: G, result: HandlerStatus): Promise<void>;
    failed?(step: Step<C>, parameters: G, error: Error): Promise<void>;
    done?(parameters: G, result: HandlerStatus): Promise<HandlerStatus>;
}
/**
 * Execute provided skill steps in the order they are provided or until one fails
 */
export declare function runSteps<C extends EventContext | CommandContext>(options: {
    context: C;
    steps: Step<C> | Array<Step<C>>;
    listeners?: StepListener<C> | Array<StepListener<C>>;
    parameters?: Record<string, any>;
}): Promise<HandlerStatus>;
//# sourceMappingURL=steps.d.ts.map