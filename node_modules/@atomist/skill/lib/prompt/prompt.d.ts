import { CommandMessageClient } from "../message";
import { CommandIncoming } from "../payload";
import { ParameterObjectValue } from "./parameter";
/**
 * Object with properties defining parameters. Useful for combination via spreads.
 */
export declare type ParameterPromptObject<PARAMS, K extends keyof PARAMS = keyof PARAMS> = Record<K, ParameterObjectValue>;
/**
 * Different strategies to ask for parameters in chat or web
 */
export declare enum ParameterPromptStyle {
    /** Parameter questions will be prompted in a dialog */
    Dialog = "dialog",
    /** Parameter questions will be prompted in a thread */
    Threaded = "threaded",
    /**
     * Parameter questions will be prompted in the channel where the
     * command is being run
     */
    Unthreaded = "unthreaded",
    /**
     * Parameter questions will be prompted in a dialog if the command
     * is triggered from a button or menu
     */
    DialogAction = "dialog_action"
}
/**
 * Options to configure the parameter prompt
 */
export interface ParameterPromptOptions {
    /** Optional thread identifier to send this message to or true to send
     * this to the message that triggered this command.
     */
    thread?: boolean | string;
    /**
     * Configure strategy on how to ask for parameters in chat or web
     */
    parameterStyle?: ParameterPromptStyle;
    /**
     * Configure auto submit strategy for when all required parameters are collected
     */
    autoSubmit?: boolean;
}
/**
 * ParameterPrompts let the caller prompt for the provided parameters
 */
export declare type ParameterPrompt<PARAMS> = (parameters: ParameterPromptObject<PARAMS>, options?: ParameterPromptOptions) => Promise<PARAMS>;
export declare const AtomistContinuationMimeType = "application/x-atomist-continuation+json";
/**
 * Default ParameterPromptFactory that uses the WebSocket connection to send parameter prompts to the backend.
 * @param ctx
 */
export declare function commandRequestParameterPromptFactory<T>(messageClient: CommandMessageClient, payload: CommandIncoming): ParameterPrompt<T>;
export declare class CommandListenerExecutionInterruptError extends Error {
    readonly message: string;
    constructor(message: string);
}
//# sourceMappingURL=prompt.d.ts.map