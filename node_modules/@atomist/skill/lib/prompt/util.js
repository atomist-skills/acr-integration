"use strict";
/*
 * Copyright Â© 2021 Atomist, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.configurationWithParameters = void 0;
const console_1 = require("../log/console");
const util_1 = require("../util");
async function configurationWithParameters(ctx, parameters) {
    console_1.debug("Checking configuration");
    const cfgs = util_1.toArray(ctx.configuration);
    const promptParameters = Object.assign({}, (parameters || {}));
    if (cfgs.length > 1) {
        promptParameters.configuration = {
            description: "Please select a Skill configuration",
            type: {
                kind: "single",
                options: cfgs.map(c => ({
                    value: c.name,
                    description: c.name,
                })),
            },
        };
    }
    const params = await ctx.parameters.prompt(promptParameters);
    const configuration = cfgs.length === 1
        ? cfgs[0]
        : cfgs.find(c => c.name === params.configuration);
    console_1.debug(`Configuration to invoke '${configuration.name}'`);
    return Object.assign(Object.assign({}, params), { configuration });
}
exports.configurationWithParameters = configurationWithParameters;
//# sourceMappingURL=util.js.map