"use strict";
/*
 * Copyright Â© 2021 Atomist, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.assertSkill = void 0;
const action_1 = require("../action");
const context_1 = require("../context");
const function_1 = require("../function");
const console_1 = require("../log/console");
const payload_1 = require("../payload");
const skill_register_1 = require("../script/skill_register");
const util_1 = require("../util");
async function assertSkill(payload, ctx = {}) {
    const apiKeySecret = payload.secrets.find(s => s.uri === "atomist://api-key");
    if (apiKeySecret) {
        apiKeySecret.value = await skill_register_1.apiKey();
    }
    let status;
    const factory = (p, c) => {
        const context = context_1.createContext(p, c);
        context.message = {
            respond: async (msg) => {
                console_1.debug(`Sending message: ${JSON.stringify(msg, util_1.replacer)}`);
            },
            send: async (msg) => {
                console_1.debug(`Sending message: ${JSON.stringify(msg, util_1.replacer)}`);
            },
            delete: async (destinations, options) => {
                console_1.debug(`Deleting message: ${JSON.stringify(options, util_1.replacer)}`);
            },
            publish: async (result) => {
                status = result;
            },
            attach: async (attachment) => {
                console_1.debug(`Sending attachment: ${JSON.stringify(attachment, util_1.replacer)}`);
            },
        };
        context.datalog = {
            transact: async (entities) => {
                console_1.debug(`Transacting entities: ${JSON.stringify(entities, util_1.replacer)}`);
            },
            query: async () => {
                return undefined;
            },
        };
        return Object.assign(Object.assign({}, context), ctx);
    };
    if (payload_1.isEventIncoming(payload) || payload_1.isSubscriptionIncoming(payload)) {
        await function_1.processEvent(payload, { eventId: util_1.guid() }, action_1.eventHandlerLoader("events"), factory);
    }
    else if (payload_1.isCommandIncoming(payload)) {
        await function_1.processCommand(payload, { eventId: util_1.guid() }, util_1.handlerLoader("commands"), factory);
    }
    else if (payload_1.isWebhookIncoming(payload)) {
        await function_1.processWebhook(payload, { eventId: util_1.guid() }, util_1.handlerLoader("webhooks"), factory);
    }
    return status;
}
exports.assertSkill = assertSkill;
//# sourceMappingURL=test.js.map