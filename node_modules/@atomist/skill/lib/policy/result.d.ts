import { EventContext } from "../handler/handler";
export declare enum ResultEntityState {
    Pending = ":policy.result.state/PENDING",
    Success = ":policy.result.state/SUCCESS",
    Failure = ":policy.result.state/FAILURE",
    ActionRequired = ":policy.result.state/ACTION_REQUIRED",
    Neutral = ":policy.result.state/NEUTRAL"
}
export declare function toState(state: string): ResultEntityState;
export declare enum ResultEntitySeverity {
    Critial = ":policy.result.severity/CRITICAL",
    High = ":policy.result.severity/HIGH",
    Medium = ":policy.result.severity/MEDIUM",
    Low = ":policy.result.severity/LOW",
    Minimum = ":policy.result.severity/MINIMUM"
}
export declare function toSeverity(severity: string): ResultEntitySeverity;
export declare type ResultEntity = {
    sha: string;
    name: string;
    title: string;
    message?: string;
    state: ResultEntityState;
    severity?: ResultEntitySeverity;
    managedBy?: string;
    createdAt?: Date;
    lastUpdated: Date;
    jws?: string;
};
export declare type ResultOwnerEntity = {
    name: string;
    namespace: string;
    version: string;
};
export interface PolicyRun {
    failed: (severity: ResultEntitySeverity, message?: string) => Promise<void>;
    actionRequired: (severity: ResultEntitySeverity, message?: string) => Promise<void>;
    neutral: (message?: string) => Promise<void>;
    success: (message?: string) => Promise<void>;
}
export declare function pending(ctx: EventContext<any, any>, parameters: {
    name?: string;
    title: string;
    sha: string;
}): Promise<PolicyRun>;
//# sourceMappingURL=result.d.ts.map