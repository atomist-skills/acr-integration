import { Check, UpdateCheck } from "../github/check";
import { EventContext, EventHandler, HandlerStatus } from "../handler/handler";
import { ChainedHandler, CreateRepositoryId } from "../handler/util";
import { CloneOptions } from "../project/clone";
import { Project } from "../project/project";
import { AuthenticatedRepositoryId } from "../repository/id";
import { PolicyRun, ResultEntitySeverity, ResultEntityState } from "./result";
export declare type CreatePolicyRun<D, C> = (ctx: EventContext<D, C>) => {
    name?: string;
    title: string;
};
export declare function createPolicyRun<D, C>(options: {
    name?: string;
    title: string;
} | CreatePolicyRun<D, C>): ChainedHandler<D, C, {
    id?: AuthenticatedRepositoryId<any>;
    policy?: PolicyRun;
}>;
export interface PolicyDetails {
    name: string;
    title: string;
    body: string;
}
export declare function handler<S, C>(parameters: {
    when?: (ctx: EventContext<S, C>) => HandlerStatus | undefined;
    id: CreateRepositoryId<S, C>;
    clone?: (ctx: EventContext<S, C>) => CloneOptions | boolean;
    details: (ctx: EventContext<S, C>) => {
        name: string;
        title: string;
        body: string;
    };
    execute: (ctx: EventContext<S, C> & {
        chain: {
            id: AuthenticatedRepositoryId<any>;
            details: PolicyDetails;
            policy: PolicyRun;
            check: Check;
            project?: Project;
        };
    }) => Promise<{
        state: ResultEntityState;
        severity?: ResultEntitySeverity;
        message?: string;
        body?: string;
        annotations?: UpdateCheck["annotations"];
        actions?: UpdateCheck["actions"];
        status: HandlerStatus;
    }>;
}): EventHandler<S, C>;
//# sourceMappingURL=util.d.ts.map