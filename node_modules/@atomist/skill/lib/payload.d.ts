export declare function isCommandIncoming(event: any): event is CommandIncoming;
export declare function isEventIncoming(event: any): event is EventIncoming;
export declare function isWebhookIncoming(event: any): event is WebhookIncoming;
export declare function isSubscriptionIncoming(event: any): event is SubscriptionIncoming;
export declare function workspaceId(event: CommandIncoming | EventIncoming | WebhookIncoming | SubscriptionIncoming): string | undefined;
export interface SkillConfiguration {
    name: string;
    parameters: Array<{
        name: string;
        value: any;
    }>;
    resourceProviders: Array<{
        name: string;
        typeName: string;
        selectedResourceProviders: Array<{
            id: string;
        }>;
    }>;
}
/**
 * Extension to EventIncoming and CommandIncoming capturing
 * skill specific information
 */
export interface Skill {
    id: string;
    name: string;
    namespace: string;
    version: string;
    artifacts: Array<{
        name: string;
        image: string;
        command?: string[];
        args?: string[];
        env?: Array<{
            name: string;
            value: string;
        }>;
        workingDir?: string;
        resources?: {
            limit?: {
                cpu: number;
                memory: number;
            };
            request?: {
                cpu: number;
                memory: number;
            };
        };
    }>;
    configuration: {
        instances: SkillConfiguration[];
    } | SkillConfiguration;
}
export interface SubscriptionIncoming {
    correlation_id: string;
    type: string;
    team_id: string;
    skill: Skill;
    secrets: Secret[];
    subscription: {
        name: string;
        result: any;
        tx: number;
    };
}
export interface WebhookIncoming {
    correlation_id: string;
    type: string;
    team_id: string;
    skill: Skill;
    secrets: Secret[];
    webhook: {
        parameter_name: string;
        parameter_name_value: string;
        url: string;
        headers: Record<string, string>;
        body: string;
    };
}
export interface EventIncoming {
    data: any;
    extensions: Extensions;
    secrets: Secret[];
    skill: Skill;
}
export interface Extensions {
    team_id: string;
    team_name?: string;
    operationName: string;
    correlation_id: string;
}
export interface CommandIncoming {
    api_version?: string;
    correlation_id: string;
    command: string;
    team: Team;
    source: Source;
    parameters: Arg[];
    secrets: Secret[];
    raw_message: string;
    skill: Skill;
}
export interface Source {
    user_agent: "slack" | "web";
    slack?: {
        team: {
            id: string;
            name?: string;
        };
        channel?: {
            id: string;
            name?: string;
        };
        user?: {
            id: string;
            name?: string;
        };
        thread_ts?: string;
    };
    web?: {
        identity: {
            sub: string;
            pid: string;
        };
    };
    identity?: any;
}
export interface Team {
    id: string;
    name?: string;
}
export interface Arg {
    name: string;
    value: string;
}
export interface Secret {
    uri: string;
    value: string;
}
//# sourceMappingURL=payload.d.ts.map