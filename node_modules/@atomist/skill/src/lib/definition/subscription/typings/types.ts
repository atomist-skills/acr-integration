export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};




/** Application-Node */
export type Application = {
  __typename?: 'Application';
  /** internal node id */
  _id?: Maybe<Scalars['Int']>;
  /** id of  Application */
  id?: Maybe<Scalars['ID']>;
  /** state of  Application */
  state?: Maybe<Scalars['String']>;
  /** host of  Application */
  host?: Maybe<Scalars['String']>;
  /** timestamp of  Application */
  timestamp?: Maybe<Scalars['String']>;
  /** domain of  Application */
  domain?: Maybe<Scalars['String']>;
  /** data of  Application */
  data?: Maybe<Scalars['String']>;
  /** Application commits Commit */
  commits?: Maybe<Array<Maybe<Commit>>>;
};


/** Application-Node */
export type ApplicationCommitsArgs = {
  sha?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  orderBy?: Maybe<Array<Maybe<_CommitOrdering>>>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  timestamp?: Maybe<Scalars['String']>;
};

export type ApplyPolicyLog = {
  __typename?: 'ApplyPolicyLog';
  _prId?: Maybe<Scalars['ID']>;
  _sha?: Maybe<Scalars['String']>;
  branch?: Maybe<Scalars['String']>;
  commit?: Maybe<Commit>;
  message?: Maybe<Scalars['String']>;
  pullRequest?: Maybe<PullRequest>;
  state?: Maybe<ApplyPolicyState>;
  targetSha?: Maybe<Scalars['String']>;
};

export enum ApplyPolicyState {
  Success = 'success',
  NoChange = 'no_change',
  Failure = 'failure'
}

export type ArtifactoryMavenRepositoryInput = {
  url?: Maybe<Scalars['String']>;
  name: Scalars['String'];
};

export type ArtifactoryMavenRepositoryProvider = ResourceProvider & MavenRepositoryProvider & {
  __typename?: 'ArtifactoryMavenRepositoryProvider';
  url: Scalars['String'];
  _typenames?: Maybe<Array<Maybe<Scalars['String']>>>;
  _id: Scalars['Int'];
  id: Scalars['ID'];
  name: Scalars['String'];
  team: Team;
  authProviderId?: Maybe<Scalars['String']>;
  state?: Maybe<ResourceProviderState>;
  credential?: Maybe<Credential>;
  webhooks?: Maybe<Array<Maybe<Webhook>>>;
  createdAt: Scalars['String'];
  updatedAt: Scalars['String'];
  createdBy?: Maybe<Person>;
  updatedBy?: Maybe<Person>;
  metadata?: Maybe<ResourceProviderMetadata>;
  timestamp: Scalars['String'];
};


export type ArtifactoryMavenRepositoryProviderWebhooksArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type AspectRegistration = {
  __typename?: 'AspectRegistration';
  category?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  endpoint?: Maybe<Scalars['String']>;
  manageable?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  owner?: Maybe<Scalars['String']>;
  shortName?: Maybe<Scalars['String']>;
  state?: Maybe<AspectRegistrationState>;
  unit?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  uuid?: Maybe<Scalars['String']>;
  /** The ID of this AspectRegistration */
  id?: Maybe<Scalars['ID']>;
};

export enum AspectRegistrationState {
  Disabled = 'Disabled',
  Enabled = 'Enabled'
}

/** The initial state of an AtmJob */
export enum AtmInitialJobState {
  Preparing = 'preparing',
  Running = 'running'
}

/** A AtmJob, made up of many AtmJobTasks */
export type AtmJob = {
  __typename?: 'AtmJob';
  /** An ISO8601 timestamp set by the API when the AtmJob was considered complete (when all tasks were complete) */
  completedAt?: Maybe<Scalars['String']>;
  /** The number of AtmJobTasks on this AtmJob that are in a completed state */
  completedCount: Scalars['Int'];
  /** An ISO8601 timestamp generated by the API when the AtmJob is created */
  createdAt: Scalars['String'];
  /** Used to store additional information about this AtmJob */
  data?: Maybe<Scalars['String']>;
  /** A description for this AtmJob */
  description?: Maybe<Scalars['String']>;
  /** The ID of this AtmJob. Generated by the API. */
  id: Scalars['ID'];
  /** The number of AtmJobTasks that make up this job */
  jobCount: Scalars['Int'];
  /** A list of AtmJobTasks that make up this job */
  jobTasks: Array<AtmJobTask>;
  /** The maximum number of running (in-flight) tasks. By default, all tasks will be in-flight from the time the job is created. */
  maxRunningTasks?: Maybe<Scalars['Int']>;
  /** A name for this AtmJob */
  name: Scalars['String'];
  /** The owner of this job. Clients may use this in a subscription to avoid all clients subscribing to all tasks in a team. */
  owner?: Maybe<Scalars['String']>;
  /** The AtmJobState of this AtmJob */
  state: AtmJobState;
  /** The number of AtmJobTasks that make up this job */
  taskCount: Scalars['Int'];
  /** An ISO8601 timestamp set by the API when the AtmJob is updated */
  updatedAt: Scalars['String'];
  team: Team;
};

/** The input object for the creation of a AtmJob */
export type AtmJobInput = {
  /** Used to store additional information about this AtmJob */
  data?: Maybe<Scalars['String']>;
  /** A description for this job. */
  description?: Maybe<Scalars['String']>;
  /** The initial state for the job. The default is running. Another option is preparing. */
  initialState?: Maybe<AtmInitialJobState>;
  /** The tasks for the job */
  jobTasks: Array<AtmJobTaskInput>;
  /** The maximum number of running (in-flight) tasks. By default, all tasks will be in-flight from the time the job is created. */
  maxRunningTasks?: Maybe<Scalars['Int']>;
  /** Sets the name for this job */
  name: Scalars['String'];
  /** The owner of this job. Clients may use this in a subscription to avoid all clients subscribing to all tasks in a team. */
  owner?: Maybe<Scalars['String']>;
};

/** The state of an AtmJob */
export enum AtmJobState {
  Preparing = 'preparing',
  Running = 'running',
  Completed = 'completed',
  Timedout = 'timedout'
}

/** A Task that makes up part of a AtmJob */
export type AtmJobTask = {
  __typename?: 'AtmJobTask';
  /** An ISO8601 timestamp set by the API when the AtmJobTask was considered complete */
  completedAt?: Maybe<Scalars['String']>;
  /** An ISO8601 timestamp generated by the API when the AtmJobTask is created */
  createdAt: Scalars['String'];
  /** Used to store additional information about this AtmJobTask */
  data?: Maybe<Scalars['String']>;
  /** The ID of this AtmJobTask. Generated by the API. */
  id: Scalars['ID'];
  /** Is true if the task is in a completed state */
  isCompleted: Scalars['Boolean'];
  /** The owning job */
  job: AtmJob;
  /** Used to store additional information about the state of this AtmJobTask */
  message?: Maybe<Scalars['String']>;
  /** A name for this AtmJobTask */
  name: Scalars['String'];
  /** The AtmJobTaskState of this AtmJobTask */
  state: AtmJobTaskState;
  /** An ISO8601 timestamp set by the API when the AtmJobTask is updated */
  updatedAt: Scalars['String'];
};

/** Input object for creation of AtmJobTask */
export type AtmJobTaskInput = {
  /** Sets additional information about this AtmJobTask */
  data?: Maybe<Scalars['String']>;
  /** Sets the name for this AtmJobTask */
  name: Scalars['String'];
};

/** The state of a AtmJobTask */
export enum AtmJobTaskState {
  Created = 'created',
  Running = 'running',
  Failed = 'failed',
  Success = 'success'
}

/** Input object for setting the state of a AtmJobTask */
export type AtmJobTaskStateInput = {
  /** Sets additional information about the state of this AtmJobTask */
  message?: Maybe<Scalars['String']>;
  /** Sets the AtmJobTaskState of this AtmJobState */
  state: AtmJobTaskState;
};

/** The input object for proposing an offer of work */
export type AtmTaskRequest = {
  /** The id of the job */
  jobId: Scalars['String'];
  /** The maxiumum number of tasks to get. Default is 1. */
  maxTaskCount?: Maybe<Scalars['Int']>;
  /** After this amount of time the task will time out and be available for other workers to get this work */
  taskTimeout: Scalars['Int'];
  /** The units (seconds, minutes, hours) to use for the taskTimeout */
  taskTimeoutUnit: TimeUnit;
  /** Specify a name for the worker that is requesting this work */
  worker: Scalars['String'];
};

export type AtomistChatCommand = {
  __typename?: 'AtomistChatCommand';
  description: Scalars['String'];
  displayName?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  pattern: Scalars['String'];
};

export type AtomistChatCommandInput = {
  description: Scalars['String'];
  displayName?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  pattern: Scalars['String'];
};

export type AtomistDockerSkillArtifactInput = {
  args?: Maybe<Array<Scalars['String']>>;
  command?: Maybe<Array<Scalars['String']>>;
  env?: Maybe<Array<AtomistSkillEnvVariableInput>>;
  image: Scalars['String'];
  name: Scalars['ID'];
  resources?: Maybe<AtomistSkillDockerResourcesInput>;
  workingDir?: Maybe<Scalars['String']>;
};

export type AtomistDockerSkillResourcesLimit = {
  __typename?: 'AtomistDockerSkillResourcesLimit';
  /** kubenetes like cpu units */
  cpu?: Maybe<Scalars['Float']>;
  /** memory in megabytes */
  memory?: Maybe<Scalars['Int']>;
};

export type AtomistDockerSkillResourcesRequest = {
  __typename?: 'AtomistDockerSkillResourcesRequest';
  /** kubenetes like cpu units */
  cpu?: Maybe<Scalars['Float']>;
  /** memory in megabytes */
  memory?: Maybe<Scalars['Int']>;
};

export type AtomistGcfSkillArtifactInput = {
  entryPoint: Scalars['String'];
  memory?: Maybe<Scalars['Int']>;
  name: Scalars['ID'];
  runtime: AtomistSkillRuntime;
  timeout?: Maybe<Scalars['Int']>;
  url: Scalars['String'];
};

export type AtomistKeyValuePair = {
  __typename?: 'AtomistKeyValuePair';
  name: Scalars['String'];
  value: Scalars['String'];
};

export type AtomistLog = {
  __typename?: 'AtomistLog';
  category?: Maybe<Scalars['String']>;
  correlation_context?: Maybe<AtomistLogCorrelationContext>;
  id: Scalars['ID'];
  level?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  team_id?: Maybe<Scalars['String']>;
  timestamp: Scalars['String'];
};

export type AtomistLogAutomation = {
  __typename?: 'AtomistLogAutomation';
  name?: Maybe<Scalars['String']>;
  version?: Maybe<Scalars['String']>;
};

export type AtomistLogCorrelationContext = {
  __typename?: 'AtomistLogCorrelationContext';
  automation?: Maybe<AtomistLogAutomation>;
  correlation_id?: Maybe<Scalars['String']>;
};


export type AtomistLogCorrelationContextAutomationArgs = {
  name?: Maybe<Scalars['String']>;
  version?: Maybe<Scalars['String']>;
};

export type AtomistPagedConfiguredSkills = {
  __typename?: 'AtomistPagedConfiguredSkills';
  skills: Array<ConfiguredAtomistSkill>;
};

export type AtomistPagedRegisteredSkills = {
  __typename?: 'AtomistPagedRegisteredSkills';
  skills: Array<RegisteredAtomistSkill>;
};

export type AtomistRegistration = {
  __typename?: 'AtomistRegistration';
  name: Scalars['String'];
};

export type AtomistSkill = {
  artifacts: Array<AtomistSkillArtifact>;
  author: Scalars['String'];
  capabilities: AtomistSkillCapabilitiesSpec;
  categories: Array<AtomistSkillCategory>;
  commands: Array<AtomistChatCommand>;
  createdAt: Scalars['String'];
  datalogSubscriptions?: Maybe<Array<AtomistSkillDatalogSubscription>>;
  description: Scalars['String'];
  dispatchStyle: AtomistSkillEventDispatchStyle;
  displayName?: Maybe<Scalars['String']>;
  homepageUrl: Scalars['String'];
  iconUrl: Scalars['String'];
  inCatalog: Scalars['Boolean'];
  ingesters: Array<Scalars['String']>;
  integration: Scalars['Boolean'];
  license: Scalars['String'];
  longDescription: Scalars['String'];
  maturities: Array<AtomistSkillMaturityLevel>;
  maxConfigurations: Scalars['Int'];
  name: Scalars['String'];
  namespace: Scalars['String'];
  owner: Scalars['Boolean'];
  parameters: Array<AtomistSkillParameterSpec>;
  platform: AtomistSkillExecutionPlatform;
  publishedAt?: Maybe<Scalars['String']>;
  readme?: Maybe<Scalars['String']>;
  resourceProviders?: Maybe<Array<AtomistSkillResourceProviderSpec>>;
  schemata?: Maybe<Array<AtomistSkillIngestionSchema>>;
  subscriptions: Array<Scalars['String']>;
  technologies: Array<AtomistSkillTechnology>;
  version: Scalars['String'];
  videoUrl?: Maybe<Scalars['String']>;
};

export type AtomistSkillArtifact = {
  name: Scalars['ID'];
};

export type AtomistSkillArtifactsInput = {
  docker?: Maybe<Array<AtomistDockerSkillArtifactInput>>;
  gcf?: Maybe<Array<AtomistGcfSkillArtifactInput>>;
};

export type AtomistSkillBooleanParameterInput = {
  name: Scalars['String'];
  value: Scalars['Boolean'];
};

export type AtomistSkillBooleanParameterSpec = AtomistSkillParameterSpec & {
  __typename?: 'AtomistSkillBooleanParameterSpec';
  defaultValue?: Maybe<Scalars['Boolean']>;
  description: Scalars['String'];
  displayName?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  required: Scalars['Boolean'];
  visibility: AtomistSkillParameterVisiblity;
};

export type AtomistSkillBooleanParameterSpecInput = {
  defaultValue?: Maybe<Scalars['Boolean']>;
  description: Scalars['String'];
  displayName?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  required: Scalars['Boolean'];
  visibility?: Maybe<AtomistSkillParameterVisiblity>;
};

export type AtomistSkillBooleanParameterValue = AtomistSkillParameterValue & {
  __typename?: 'AtomistSkillBooleanParameterValue';
  name: Scalars['String'];
  spec: AtomistSkillBooleanParameterSpec;
  value: Scalars['Boolean'];
};

export type AtomistSkillCapabilitiesInput = {
  provides?: Maybe<Array<AtomistSkillProvidedCapabilityInput>>;
  requires?: Maybe<Array<AtomistSkillRequiredCapabilityInput>>;
};

export type AtomistSkillCapabilitiesSpec = {
  __typename?: 'AtomistSkillCapabilitiesSpec';
  provides: Array<AtomistSkillProvidedCapabilitySpec>;
  requires: Array<AtomistSkillRequiredCapabilitySpec>;
};

export type AtomistSkillCapabilityProviderDetails = {
  __typename?: 'AtomistSkillCapabilityProviderDetails';
  configurationName: Scalars['String'];
  name: Scalars['String'];
  namespace: Scalars['String'];
};

export type AtomistSkillCapabilityProviderInput = {
  configurationName: Scalars['String'];
  name: Scalars['String'];
  namespace: Scalars['String'];
};

export type AtomistSkillCapabilityProviderValue = {
  __typename?: 'AtomistSkillCapabilityProviderValue';
  providers: Array<AtomistSkillCapabilityProviderDetails>;
  spec: AtomistSkillRequiredCapabilitySpec;
};

export type AtomistSkillCapabilityProviders = {
  __typename?: 'AtomistSkillCapabilityProviders';
  catalog: Array<RegisteredAtomistSkill>;
  configured: Array<ConfiguredAtomistSkill>;
  other: Array<RegisteredAtomistSkill>;
  owned: Array<RegisteredAtomistSkill>;
};


export type AtomistSkillCapabilityProvidersOtherArgs = {
  maturities?: Maybe<Array<AtomistSkillMaturityLevel>>;
};


export type AtomistSkillCapabilityProvidersOwnedArgs = {
  maturities?: Maybe<Array<AtomistSkillMaturityLevel>>;
};

export type AtomistSkillCapabilityProvidersInput = {
  name: Scalars['String'];
  namespace: Scalars['String'];
  providers: Array<AtomistSkillCapabilityProviderInput>;
  usage: Scalars['String'];
};

export type AtomistSkillCategory = {
  __typename?: 'AtomistSkillCategory';
  key: AtomistSkillCategoryKey;
  sortOrder: Scalars['Int'];
  text: Scalars['String'];
};

export enum AtomistSkillCategoryKey {
  Build = 'BUILD',
  Chat = 'CHAT',
  CodeMaintenance = 'CODE_MAINTENANCE',
  CodeQuality = 'CODE_QUALITY',
  CodeReview = 'CODE_REVIEW',
  Dependencies = 'DEPENDENCIES',
  Deploy = 'DEPLOY',
  Devex = 'DEVEX',
  Devops = 'DEVOPS',
  Issues = 'ISSUES',
  Monitor = 'MONITOR',
  Notifications = 'NOTIFICATIONS',
  ProjectManagement = 'PROJECT_MANAGEMENT',
  RepoManagement = 'REPO_MANAGEMENT',
  Security = 'SECURITY'
}

export type AtomistSkillChatChannelInput = {
  channelId: Scalars['String'];
  channelName: Scalars['String'];
  chatTeamId: Scalars['String'];
  resourceProviderId: Scalars['String'];
};

export type AtomistSkillChatChannelParameterValue = {
  __typename?: 'AtomistSkillChatChannelParameterValue';
  channelId: Scalars['String'];
  channelName: Scalars['String'];
  chatTeamId: Scalars['String'];
  resourceProviderId: Scalars['String'];
};

export type AtomistSkillChatChannelsInput = {
  name: Scalars['String'];
  value: Array<Maybe<AtomistSkillChatChannelInput>>;
};

export type AtomistSkillChatChannelsParameterSpec = AtomistSkillParameterSpec & {
  __typename?: 'AtomistSkillChatChannelsParameterSpec';
  description: Scalars['String'];
  displayName?: Maybe<Scalars['String']>;
  maxAllowed?: Maybe<Scalars['Int']>;
  minRequired?: Maybe<Scalars['Int']>;
  name: Scalars['String'];
  required: Scalars['Boolean'];
  visibility: AtomistSkillParameterVisiblity;
};

export type AtomistSkillChatChannelsParameterSpecInput = {
  description: Scalars['String'];
  displayName?: Maybe<Scalars['String']>;
  maxAllowed?: Maybe<Scalars['Int']>;
  minRequired?: Maybe<Scalars['Int']>;
  name: Scalars['String'];
  required: Scalars['Boolean'];
  visibility?: Maybe<AtomistSkillParameterVisiblity>;
};

export type AtomistSkillChatChannelsParameterValue = AtomistSkillParameterValue & {
  __typename?: 'AtomistSkillChatChannelsParameterValue';
  name: Scalars['String'];
  spec: AtomistSkillChatChannelsParameterSpec;
  value: Array<AtomistSkillChatChannelParameterValue>;
};

export type AtomistSkillChoice = {
  __typename?: 'AtomistSkillChoice';
  description?: Maybe<Scalars['String']>;
  text: Scalars['String'];
  value: Scalars['String'];
};

export type AtomistSkillChoiceInput = {
  description?: Maybe<Scalars['String']>;
  text: Scalars['String'];
  value: Scalars['String'];
};

export type AtomistSkillConfiguration = {
  __typename?: 'AtomistSkillConfiguration';
  instances: Array<AtomistSkillConfigurationInstance>;
  repository: AtomistSkillConfigurationRepository;
  upgradePolicy: AtomistSkillUpgradePolicy;
};

export type AtomistSkillConfigurationAuthor = {
  __typename?: 'AtomistSkillConfigurationAuthor';
  email: Scalars['String'];
  name: Scalars['String'];
};

/** Configuration inputs */
export type AtomistSkillConfigurationInput = {
  capabilities?: Maybe<Array<AtomistSkillCapabilityProvidersInput>>;
  displayName?: Maybe<Scalars['String']>;
  enabled: Scalars['Boolean'];
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['ID']>;
  parameters?: Maybe<Array<AtomistSkillParameterInput>>;
  resourceProviders?: Maybe<Array<AtomistSkillResourceProviderInput>>;
};

export type AtomistSkillConfigurationInstance = {
  __typename?: 'AtomistSkillConfigurationInstance';
  author: AtomistSkillConfigurationAuthor;
  capabilities?: Maybe<Array<AtomistSkillCapabilityProviderValue>>;
  displayName: Scalars['String'];
  enabled: Scalars['Boolean'];
  id: Scalars['ID'];
  name: Scalars['ID'];
  parameters?: Maybe<Array<AtomistSkillParameterValue>>;
  resourceProviders?: Maybe<Array<AtomistSkillResourceProviderValue>>;
  updatedAt: Scalars['String'];
};

export type AtomistSkillConfigurationRepository = {
  __typename?: 'AtomistSkillConfigurationRepository';
  commitSha: Scalars['String'];
};

export type AtomistSkillDatalogSubscription = {
  __typename?: 'AtomistSkillDatalogSubscription';
  name: Scalars['String'];
  query: Scalars['String'];
};

export type AtomistSkillDatalogSubscriptionInput = {
  name: Scalars['String'];
  query: Scalars['String'];
};

export type AtomistSkillDockerArtifact = AtomistSkillArtifact & {
  __typename?: 'AtomistSkillDockerArtifact';
  args?: Maybe<Array<Scalars['String']>>;
  command?: Maybe<Array<Scalars['String']>>;
  env?: Maybe<Array<AtomistSkillEnvironmentVariable>>;
  image: Scalars['String'];
  name: Scalars['ID'];
  resources?: Maybe<AtomistSkillDockerResources>;
  workingDir?: Maybe<Scalars['String']>;
};

export type AtomistSkillDockerResources = {
  __typename?: 'AtomistSkillDockerResources';
  limit?: Maybe<AtomistDockerSkillResourcesLimit>;
  request?: Maybe<AtomistDockerSkillResourcesRequest>;
};

export type AtomistSkillDockerResourcesInput = {
  limit?: Maybe<AtomistSkillDockerResourcesLimitInput>;
  request?: Maybe<AtomistSkillDockerResourcesRequestInput>;
};

export type AtomistSkillDockerResourcesLimitInput = {
  /** kubenetes like cpu units */
  cpu?: Maybe<Scalars['Float']>;
  /** memory in megabytes */
  memory?: Maybe<Scalars['Int']>;
};

export type AtomistSkillDockerResourcesRequestInput = {
  /** kubenetes like cpu units */
  cpu?: Maybe<Scalars['Float']>;
  /** memory in megabytes */
  memory?: Maybe<Scalars['Int']>;
};

export type AtomistSkillEnvVariableInput = {
  name: Scalars['String'];
  value: Scalars['String'];
};

export type AtomistSkillEnvironmentVariable = {
  __typename?: 'AtomistSkillEnvironmentVariable';
  name: Scalars['String'];
  value: Scalars['String'];
};

export enum AtomistSkillEventDispatchStyle {
  Single = 'single',
  Multiple = 'multiple'
}

export type AtomistSkillExecution = {
  __typename?: 'AtomistSkillExecution';
  context: AtomistSkillExecutionContext;
  endTime?: Maybe<Scalars['String']>;
  eventCorrelationId?: Maybe<Scalars['String']>;
  executionCorrelationId?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  logs: Array<AtomistSkillLog>;
  pagedLogs: AtomistSkillLogsPage;
  queueTime: Scalars['String'];
  skill: ConfiguredAtomistSkill;
  startTime?: Maybe<Scalars['String']>;
  status: AtomistSkillExecutionStatus;
  statusTime?: Maybe<Scalars['String']>;
  triggerCorrelationId: Scalars['String'];
  visibility: AtomistSkillExecutionVisibility;
};


export type AtomistSkillExecutionLogsArgs = {
  _after?: Maybe<Scalars['String']>;
  _before?: Maybe<Scalars['String']>;
  _first?: Maybe<Scalars['Int']>;
  categories?: Maybe<Array<AtomistSkillExecutionLogCategory>>;
  category?: Maybe<AtomistSkillExecutionLogCategory>;
  severities?: Maybe<Array<AtomistSkillExecutionLogSeverity>>;
  severity?: Maybe<AtomistSkillExecutionLogSeverity>;
};


export type AtomistSkillExecutionPagedLogsArgs = {
  filter?: Maybe<_AtomistSkillLogFilter>;
  first?: Maybe<Scalars['Int']>;
  pageKey?: Maybe<Scalars['String']>;
};

export type AtomistSkillExecutionContext = {
  __typename?: 'AtomistSkillExecutionContext';
  configuration?: Maybe<AtomistSkillConfiguration>;
  triggerEvent: AtomistSkillExecutionTriggerEvent;
};

export enum AtomistSkillExecutionLogCategory {
  Developer = 'developer',
  User = 'user'
}

export enum AtomistSkillExecutionLogSeverity {
  Error = 'error',
  Warn = 'warn',
  Info = 'info',
  Debug = 'debug',
  Trace = 'trace'
}

export enum AtomistSkillExecutionPlatform {
  Gcf = 'gcf',
  Docker = 'docker'
}

export enum AtomistSkillExecutionSortField {
  StartTime = 'start_time',
  EndTime = 'end_time'
}

export enum AtomistSkillExecutionSortOrder {
  Asc = 'asc',
  Desc = 'desc'
}

export enum AtomistSkillExecutionState {
  Queued = 'queued',
  Running = 'running',
  Completed = 'completed',
  Success = 'success',
  Failed = 'failed',
  Timeout = 'timeout',
  Crash = 'crash',
  Unknown = 'unknown'
}

export type AtomistSkillExecutionStatus = {
  __typename?: 'AtomistSkillExecutionStatus';
  message?: Maybe<Scalars['String']>;
  state: AtomistSkillExecutionState;
};

export type AtomistSkillExecutionTriggerEvent = {
  __typename?: 'AtomistSkillExecutionTriggerEvent';
  name: Scalars['String'];
  type: AtomistSkillExecutionTriggerEventType;
};

export enum AtomistSkillExecutionTriggerEventType {
  Command = 'command',
  Subscription = 'subscription',
  Webhook = 'webhook'
}

export enum AtomistSkillExecutionVisibility {
  Visible = 'visible',
  Hidden = 'hidden'
}

export type AtomistSkillFileFilterInput = {
  name: Scalars['String'];
  value: Array<Scalars['String']>;
};

export type AtomistSkillFileFilterParameterSpec = AtomistSkillParameterSpec & {
  __typename?: 'AtomistSkillFileFilterParameterSpec';
  defaultValue?: Maybe<Array<Scalars['String']>>;
  description: Scalars['String'];
  displayName?: Maybe<Scalars['String']>;
  maxAllowed?: Maybe<Scalars['Int']>;
  minRequired?: Maybe<Scalars['Int']>;
  name: Scalars['String'];
  required: Scalars['Boolean'];
  visibility: AtomistSkillParameterVisiblity;
};

export type AtomistSkillFileFilterParameterSpecInput = {
  defaultValue?: Maybe<Array<Maybe<Scalars['String']>>>;
  description: Scalars['String'];
  displayName?: Maybe<Scalars['String']>;
  maxAllowed?: Maybe<Scalars['Int']>;
  minRequired?: Maybe<Scalars['Int']>;
  name: Scalars['String'];
  required: Scalars['Boolean'];
  visibility?: Maybe<AtomistSkillParameterVisiblity>;
};

export type AtomistSkillFileFilterParameterValue = AtomistSkillParameterValue & {
  __typename?: 'AtomistSkillFileFilterParameterValue';
  name: Scalars['String'];
  spec: AtomistSkillFileFilterParameterSpec;
  value: Array<Scalars['String']>;
};

export type AtomistSkillFloatParameterInput = {
  name: Scalars['String'];
  value: Scalars['Float'];
};

export type AtomistSkillFloatParameterSpec = AtomistSkillParameterSpec & {
  __typename?: 'AtomistSkillFloatParameterSpec';
  defaultValue?: Maybe<Scalars['Float']>;
  description: Scalars['String'];
  displayName?: Maybe<Scalars['String']>;
  maximum?: Maybe<Scalars['Float']>;
  minimum?: Maybe<Scalars['Float']>;
  name: Scalars['String'];
  placeHolder?: Maybe<Scalars['String']>;
  required: Scalars['Boolean'];
  visibility: AtomistSkillParameterVisiblity;
};

export type AtomistSkillFloatParameterSpecInput = {
  defaultValue?: Maybe<Scalars['Float']>;
  description: Scalars['String'];
  displayName?: Maybe<Scalars['String']>;
  maximum?: Maybe<Scalars['Float']>;
  minimum?: Maybe<Scalars['Float']>;
  name: Scalars['String'];
  placeHolder?: Maybe<Scalars['String']>;
  required: Scalars['Boolean'];
  visibility?: Maybe<AtomistSkillParameterVisiblity>;
};

export type AtomistSkillFloatParameterValue = AtomistSkillParameterValue & {
  __typename?: 'AtomistSkillFloatParameterValue';
  name: Scalars['String'];
  spec: AtomistSkillFloatParameterSpec;
  value: Scalars['Float'];
};

export type AtomistSkillGcfArtifact = AtomistSkillArtifact & {
  __typename?: 'AtomistSkillGCFArtifact';
  entryPoint: Scalars['String'];
  memory: Scalars['Int'];
  name: Scalars['ID'];
  runtime: AtomistSkillRuntime;
  timeout: Scalars['Int'];
  url: Scalars['String'];
};

export type AtomistSkillIngestionSchema = {
  __typename?: 'AtomistSkillIngestionSchema';
  name: Scalars['String'];
  schema: Scalars['String'];
};

/** Start: registration inputs */
export type AtomistSkillIngestionSchemaInput = {
  name: Scalars['String'];
  schema: Scalars['String'];
};

export type AtomistSkillInput = {
  artifacts: AtomistSkillArtifactsInput;
  author: Scalars['String'];
  branchId?: Maybe<Scalars['String']>;
  capabilities?: Maybe<AtomistSkillCapabilitiesInput>;
  categories?: Maybe<Array<AtomistSkillCategoryKey>>;
  commands?: Maybe<Array<AtomistChatCommandInput>>;
  commitSha: Scalars['String'];
  datalogSubscriptions?: Maybe<Array<AtomistSkillDatalogSubscriptionInput>>;
  description: Scalars['String'];
  dispatchStyle?: Maybe<AtomistSkillEventDispatchStyle>;
  displayName?: Maybe<Scalars['String']>;
  homepageUrl: Scalars['String'];
  iconUrl: Scalars['String'];
  ingesters?: Maybe<Array<Scalars['String']>>;
  integration?: Maybe<Scalars['Boolean']>;
  license: Scalars['String'];
  longDescription: Scalars['String'];
  maturity?: Maybe<AtomistSkillMaturityLevel>;
  maxConfigurations?: Maybe<Scalars['Int']>;
  name: Scalars['String'];
  namespace: Scalars['String'];
  parameters?: Maybe<Array<AtomistSkillParameterSpecInput>>;
  readme?: Maybe<Scalars['String']>;
  repoId: Scalars['String'];
  resourceProviders?: Maybe<Array<AtomistSkillResourceProviderSpecInput>>;
  schemata?: Maybe<Array<AtomistSkillIngestionSchemaInput>>;
  subscriptions?: Maybe<Array<Scalars['String']>>;
  technologies?: Maybe<Array<AtomistSkillTechnology>>;
  version: Scalars['String'];
  videoUrl?: Maybe<Scalars['String']>;
};

export type AtomistSkillIntParameterInput = {
  name: Scalars['String'];
  value: Scalars['Int'];
};

export type AtomistSkillIntParameterSpec = AtomistSkillParameterSpec & {
  __typename?: 'AtomistSkillIntParameterSpec';
  defaultValue?: Maybe<Scalars['Int']>;
  description: Scalars['String'];
  displayName?: Maybe<Scalars['String']>;
  maximum?: Maybe<Scalars['Int']>;
  minimum?: Maybe<Scalars['Int']>;
  name: Scalars['String'];
  placeHolder?: Maybe<Scalars['String']>;
  required: Scalars['Boolean'];
  visibility: AtomistSkillParameterVisiblity;
};

export type AtomistSkillIntParameterSpecInput = {
  defaultValue?: Maybe<Scalars['Int']>;
  description: Scalars['String'];
  displayName?: Maybe<Scalars['String']>;
  maximum?: Maybe<Scalars['Int']>;
  minimum?: Maybe<Scalars['Int']>;
  name: Scalars['String'];
  placeHolder?: Maybe<Scalars['String']>;
  required: Scalars['Boolean'];
  visibility?: Maybe<AtomistSkillParameterVisiblity>;
};

export type AtomistSkillIntParameterValue = AtomistSkillParameterValue & {
  __typename?: 'AtomistSkillIntParameterValue';
  name: Scalars['String'];
  spec: AtomistSkillIntParameterSpec;
  value: Scalars['Int'];
};

export type AtomistSkillLog = {
  __typename?: 'AtomistSkillLog';
  category: Scalars['String'];
  id: Scalars['String'];
  payload: Scalars['String'];
  severity: Scalars['String'];
  timestamp: Scalars['String'];
};

export type AtomistSkillLogsPage = {
  __typename?: 'AtomistSkillLogsPage';
  logs: Array<AtomistSkillLog>;
  nextPageKey?: Maybe<Scalars['String']>;
};

export enum AtomistSkillMaturityLevel {
  /** Release quality */
  Stable = 'stable',
  /** Candidate for next release, but might still have issues */
  Testing = 'testing',
  /** CI build - expect bugs */
  Unstable = 'unstable'
}

export type AtomistSkillMultiChoiceParameterInput = {
  name: Scalars['String'];
  value: Array<Scalars['String']>;
};

export type AtomistSkillMultiChoiceParameterSpec = AtomistSkillParameterSpec & {
  __typename?: 'AtomistSkillMultiChoiceParameterSpec';
  defaultValues?: Maybe<Array<Scalars['String']>>;
  description: Scalars['String'];
  displayName?: Maybe<Scalars['String']>;
  maxAllowed?: Maybe<Scalars['Int']>;
  minRequired?: Maybe<Scalars['Int']>;
  name: Scalars['String'];
  options?: Maybe<Array<AtomistSkillChoice>>;
  required: Scalars['Boolean'];
  visibility: AtomistSkillParameterVisiblity;
};

export type AtomistSkillMultiChoiceParameterSpecInput = {
  defaultValues?: Maybe<Array<Scalars['String']>>;
  description: Scalars['String'];
  displayName?: Maybe<Scalars['String']>;
  maxAllowed?: Maybe<Scalars['Int']>;
  minRequired?: Maybe<Scalars['Int']>;
  name: Scalars['String'];
  options?: Maybe<Array<AtomistSkillChoiceInput>>;
  required: Scalars['Boolean'];
  visibility?: Maybe<AtomistSkillParameterVisiblity>;
};

export type AtomistSkillMultiChoiceParameterValues = AtomistSkillParameterValue & {
  __typename?: 'AtomistSkillMultiChoiceParameterValues';
  name: Scalars['String'];
  spec: AtomistSkillMultiChoiceParameterSpec;
  value: Array<Scalars['String']>;
};

export type AtomistSkillParameterInput = {
  boolean?: Maybe<AtomistSkillBooleanParameterInput>;
  chatChannels?: Maybe<AtomistSkillChatChannelsInput>;
  fileFilter?: Maybe<AtomistSkillFileFilterInput>;
  float?: Maybe<AtomistSkillFloatParameterInput>;
  int?: Maybe<AtomistSkillIntParameterInput>;
  multiChoice?: Maybe<AtomistSkillMultiChoiceParameterInput>;
  repoFilter?: Maybe<AtomistSkillRepoFiltersInput>;
  schedule?: Maybe<AtomistSkillScheduleInput>;
  secret?: Maybe<AtomistSkillSecretParameterInput>;
  singleChoice?: Maybe<AtomistSkillSingleChoiceParameterInput>;
  string?: Maybe<AtomistSkillStringParameterInput>;
  stringArray?: Maybe<AtomistSkillStringArrayParameterInput>;
  webhook?: Maybe<AtomistSkillWebhookParameterInput>;
};

export type AtomistSkillParameterSpec = {
  description: Scalars['String'];
  displayName?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  required: Scalars['Boolean'];
};

export type AtomistSkillParameterSpecInput = {
  boolean?: Maybe<AtomistSkillBooleanParameterSpecInput>;
  chatChannels?: Maybe<AtomistSkillChatChannelsParameterSpecInput>;
  fileFilter?: Maybe<AtomistSkillFileFilterParameterSpecInput>;
  float?: Maybe<AtomistSkillFloatParameterSpecInput>;
  int?: Maybe<AtomistSkillIntParameterSpecInput>;
  multiChoice?: Maybe<AtomistSkillMultiChoiceParameterSpecInput>;
  repoFilter?: Maybe<AtomistSkillRepoFilterParameterSpecInput>;
  schedule?: Maybe<AtomistSkillScheduleParameterSpecInput>;
  secret?: Maybe<AtomistSkillSecretParameterSpecInput>;
  singleChoice?: Maybe<AtomistSkillSingleChoiceParameterSpecInput>;
  string?: Maybe<AtomistSkillStringParameterSpecInput>;
  stringArray?: Maybe<AtomistSkillStringArrayParameterSpecInput>;
  webhook?: Maybe<AtomistSkillWebhookParameterSpecInput>;
};

export type AtomistSkillParameterValue = {
  name: Scalars['String'];
  spec: AtomistSkillParameterSpec;
};

export enum AtomistSkillParameterVisiblity {
  Hidden = 'hidden',
  Advanced = 'advanced',
  Normal = 'normal'
}

export type AtomistSkillProvidedCapabilityInput = {
  name: Scalars['String'];
  namespace?: Maybe<Scalars['String']>;
};

export type AtomistSkillProvidedCapabilitySpec = {
  __typename?: 'AtomistSkillProvidedCapabilitySpec';
  name: Scalars['String'];
  namespace: Scalars['String'];
};

export type AtomistSkillRepoFilterInclusionParameterValue = {
  __typename?: 'AtomistSkillRepoFilterInclusionParameterValue';
  excludes?: Maybe<Array<AtomistSkillRepoFilterParameterValueDetail>>;
  includes?: Maybe<Array<AtomistSkillRepoFilterParameterValueDetail>>;
};

export type AtomistSkillRepoFilterInput = {
  ownerId: Scalars['String'];
  providerId: Scalars['String'];
  repoIds: Array<Scalars['String']>;
};

export type AtomistSkillRepoFilterParameterSpecInput = {
  description: Scalars['String'];
  displayName?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  required: Scalars['Boolean'];
};

export type AtomistSkillRepoFilterParameterValue = AtomistSkillParameterValue & {
  __typename?: 'AtomistSkillRepoFilterParameterValue';
  name: Scalars['String'];
  spec: AtomistSkillRepoFilterSpec;
  value: AtomistSkillRepoFilterInclusionParameterValue;
};

export type AtomistSkillRepoFilterParameterValueDetail = {
  __typename?: 'AtomistSkillRepoFilterParameterValueDetail';
  ownerId: Scalars['String'];
  providerId: Scalars['String'];
  repoIds: Array<Scalars['String']>;
};

export type AtomistSkillRepoFilterSpec = AtomistSkillParameterSpec & {
  __typename?: 'AtomistSkillRepoFilterSpec';
  description: Scalars['String'];
  displayName?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  required: Scalars['Boolean'];
};

export type AtomistSkillRepoFiltersInput = {
  name: Scalars['String'];
  value: AtomistSkillRepoFiltersValueInput;
};

export type AtomistSkillRepoFiltersValueInput = {
  excludes?: Maybe<Array<AtomistSkillRepoFilterInput>>;
  includes?: Maybe<Array<AtomistSkillRepoFilterInput>>;
};

export type AtomistSkillRequiredCapabilityInput = {
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  maxAllowed?: Maybe<Scalars['Int']>;
  minRequired?: Maybe<Scalars['Int']>;
  name: Scalars['String'];
  namespace?: Maybe<Scalars['String']>;
  scopes: Array<AtomistSkillRequiredCapabilityScope>;
  usage: Scalars['String'];
};

export enum AtomistSkillRequiredCapabilityScope {
  Ingestion = 'ingestion',
  Configuration = 'configuration'
}

export type AtomistSkillRequiredCapabilitySpec = {
  __typename?: 'AtomistSkillRequiredCapabilitySpec';
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  maxAllowed?: Maybe<Scalars['Int']>;
  minRequired?: Maybe<Scalars['Int']>;
  name: Scalars['String'];
  namespace: Scalars['String'];
  providers: AtomistSkillCapabilityProviders;
  scopes: Array<AtomistSkillRequiredCapabilityScope>;
  usage: Scalars['String'];
};

export type AtomistSkillResourceProviderInput = {
  name: Scalars['String'];
  selectedResourceProviders?: Maybe<Array<AtomistSkillSelectedResourceProviderInput>>;
};

export type AtomistSkillResourceProviderSpec = {
  __typename?: 'AtomistSkillResourceProviderSpec';
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  maxAllowed?: Maybe<Scalars['Int']>;
  minRequired?: Maybe<Scalars['Int']>;
  name: Scalars['String'];
  typeName: Scalars['String'];
};

export type AtomistSkillResourceProviderSpecInput = {
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  maxAllowed?: Maybe<Scalars['Int']>;
  minRequired?: Maybe<Scalars['Int']>;
  name: Scalars['String'];
  typeName: Scalars['String'];
};

export type AtomistSkillResourceProviderValue = {
  __typename?: 'AtomistSkillResourceProviderValue';
  displayName?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  selectedResourceProviders: Array<AtomistSkillSelectedResourceProvider>;
  typeName: Scalars['String'];
};

export enum AtomistSkillRuntime {
  Nodejs10 = 'nodejs10',
  Nodejs12 = 'nodejs12',
  Python37 = 'python37',
  Python38 = 'python38',
  Go113 = 'go113',
  Java11 = 'java11'
}

export type AtomistSkillScheduleInput = {
  name: Scalars['String'];
  value: AtomistSkillScheduleValueInput;
};

export type AtomistSkillScheduleParameterSpec = AtomistSkillParameterSpec & {
  __typename?: 'AtomistSkillScheduleParameterSpec';
  defaultValue?: Maybe<Scalars['String']>;
  description: Scalars['String'];
  displayName?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  required: Scalars['Boolean'];
  visibility: AtomistSkillParameterVisiblity;
};

export type AtomistSkillScheduleParameterSpecInput = {
  defaultValue?: Maybe<Scalars['String']>;
  description: Scalars['String'];
  displayName?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  required: Scalars['Boolean'];
  visibility?: Maybe<AtomistSkillParameterVisiblity>;
};

export type AtomistSkillScheduleParameterValue = AtomistSkillParameterValue & {
  __typename?: 'AtomistSkillScheduleParameterValue';
  name: Scalars['String'];
  spec: AtomistSkillScheduleParameterSpec;
  value: AtomistSkillScheduleParameterValueDetail;
};

export type AtomistSkillScheduleParameterValueDetail = {
  __typename?: 'AtomistSkillScheduleParameterValueDetail';
  cronExpression: Scalars['String'];
  timeZone?: Maybe<Scalars['String']>;
};

export type AtomistSkillScheduleValueInput = {
  cronExpression: Scalars['String'];
  timeZone?: Maybe<Scalars['String']>;
};

export type AtomistSkillSecretParameterInput = {
  name: Scalars['String'];
  value: Scalars['String'];
};

export type AtomistSkillSecretParameterSpec = AtomistSkillParameterSpec & {
  __typename?: 'AtomistSkillSecretParameterSpec';
  description: Scalars['String'];
  displayName?: Maybe<Scalars['String']>;
  lineStyle: AtomistSkillStringParameterLineStyle;
  name: Scalars['String'];
  required: Scalars['Boolean'];
  visibility: AtomistSkillParameterVisiblity;
};

export type AtomistSkillSecretParameterSpecInput = {
  description: Scalars['String'];
  displayName?: Maybe<Scalars['String']>;
  lineStyle?: Maybe<AtomistSkillStringParameterLineStyle>;
  name: Scalars['String'];
  required: Scalars['Boolean'];
  visibility?: Maybe<AtomistSkillParameterVisiblity>;
};

export type AtomistSkillSecretParameterValue = AtomistSkillParameterValue & {
  __typename?: 'AtomistSkillSecretParameterValue';
  name: Scalars['String'];
  spec: AtomistSkillSecretParameterSpec;
  value: Scalars['String'];
};

export type AtomistSkillSelectedResourceProvider = {
  __typename?: 'AtomistSkillSelectedResourceProvider';
  id: Scalars['String'];
};

export type AtomistSkillSelectedResourceProviderInput = {
  id: Scalars['String'];
};

export type AtomistSkillSingleChoiceParameterInput = {
  name: Scalars['String'];
  value: Scalars['String'];
};

export type AtomistSkillSingleChoiceParameterSpec = AtomistSkillParameterSpec & {
  __typename?: 'AtomistSkillSingleChoiceParameterSpec';
  defaultValue?: Maybe<Scalars['String']>;
  description: Scalars['String'];
  displayName?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  options?: Maybe<Array<AtomistSkillChoice>>;
  required: Scalars['Boolean'];
  visibility: AtomistSkillParameterVisiblity;
};

export type AtomistSkillSingleChoiceParameterSpecInput = {
  defaultValue?: Maybe<Scalars['String']>;
  description: Scalars['String'];
  displayName?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  options?: Maybe<Array<AtomistSkillChoiceInput>>;
  required: Scalars['Boolean'];
  visibility?: Maybe<AtomistSkillParameterVisiblity>;
};

export type AtomistSkillSingleChoiceParameterValue = AtomistSkillParameterValue & {
  __typename?: 'AtomistSkillSingleChoiceParameterValue';
  name: Scalars['String'];
  spec: AtomistSkillSingleChoiceParameterSpec;
  value: Scalars['String'];
};

export type AtomistSkillStatus = {
  __typename?: 'AtomistSkillStatus';
  code: AtomistSkillStatusCode;
  message?: Maybe<Scalars['String']>;
};

export enum AtomistSkillStatusCode {
  Registered = 'registered',
  Scheduled = 'scheduled',
  Deploying = 'deploying',
  Running = 'running',
  Error = 'error',
  Undeployed = 'undeployed'
}

export type AtomistSkillStringArrayParameterInput = {
  name: Scalars['String'];
  value: Array<Scalars['String']>;
};

export type AtomistSkillStringArrayParameterSpec = AtomistSkillParameterSpec & {
  __typename?: 'AtomistSkillStringArrayParameterSpec';
  defaultValue?: Maybe<Array<Scalars['String']>>;
  description: Scalars['String'];
  displayName?: Maybe<Scalars['String']>;
  maxAllowed?: Maybe<Scalars['Int']>;
  minRequired?: Maybe<Scalars['Int']>;
  name: Scalars['String'];
  pattern?: Maybe<Scalars['String']>;
  required: Scalars['Boolean'];
  visibility: AtomistSkillParameterVisiblity;
};

export type AtomistSkillStringArrayParameterSpecInput = {
  defaultValue?: Maybe<Array<Maybe<Scalars['String']>>>;
  description: Scalars['String'];
  displayName?: Maybe<Scalars['String']>;
  maxAllowed?: Maybe<Scalars['Int']>;
  minRequired?: Maybe<Scalars['Int']>;
  name: Scalars['String'];
  pattern?: Maybe<Scalars['String']>;
  required: Scalars['Boolean'];
  visibility?: Maybe<AtomistSkillParameterVisiblity>;
};

export type AtomistSkillStringArrayParameterValue = AtomistSkillParameterValue & {
  __typename?: 'AtomistSkillStringArrayParameterValue';
  name: Scalars['String'];
  spec: AtomistSkillStringArrayParameterSpec;
  value: Array<Scalars['String']>;
};

export type AtomistSkillStringParameterInput = {
  name: Scalars['String'];
  value: Scalars['String'];
};

export enum AtomistSkillStringParameterLineStyle {
  Single = 'single',
  Multiple = 'multiple'
}

export type AtomistSkillStringParameterSpec = AtomistSkillParameterSpec & {
  __typename?: 'AtomistSkillStringParameterSpec';
  defaultValue?: Maybe<Scalars['String']>;
  description: Scalars['String'];
  displayName?: Maybe<Scalars['String']>;
  lineStyle: AtomistSkillStringParameterLineStyle;
  name: Scalars['String'];
  pattern?: Maybe<Scalars['String']>;
  placeHolder?: Maybe<Scalars['String']>;
  required: Scalars['Boolean'];
  visibility: AtomistSkillParameterVisiblity;
};

export type AtomistSkillStringParameterSpecInput = {
  defaultValue?: Maybe<Scalars['String']>;
  description: Scalars['String'];
  displayName?: Maybe<Scalars['String']>;
  lineStyle?: Maybe<AtomistSkillStringParameterLineStyle>;
  name: Scalars['String'];
  pattern?: Maybe<Scalars['String']>;
  placeHolder?: Maybe<Scalars['String']>;
  required: Scalars['Boolean'];
  visibility?: Maybe<AtomistSkillParameterVisiblity>;
};

export type AtomistSkillStringParameterValue = AtomistSkillParameterValue & {
  __typename?: 'AtomistSkillStringParameterValue';
  name: Scalars['String'];
  spec: AtomistSkillStringParameterSpec;
  value: Scalars['String'];
};

export enum AtomistSkillTechnology {
  Java = 'JAVA',
  Maven = 'MAVEN',
  Docker = 'DOCKER',
  Javascript = 'JAVASCRIPT',
  Npm = 'NPM',
  Lein = 'LEIN',
  Clojure = 'CLOJURE',
  Kubernetes = 'KUBERNETES'
}

export enum AtomistSkillUpgradePolicy {
  Stable = 'stable',
  Unstable = 'unstable',
  Testing = 'testing',
  Manual = 'manual'
}

export type AtomistSkillWebhookParameterInput = {
  name: Scalars['String'];
  value: Array<AtomistSkillWebhookParameterValueInput>;
};

export type AtomistSkillWebhookParameterSpec = AtomistSkillParameterSpec & {
  __typename?: 'AtomistSkillWebhookParameterSpec';
  description: Scalars['String'];
  displayName?: Maybe<Scalars['String']>;
  maxAllowed?: Maybe<Scalars['Int']>;
  minRequired?: Maybe<Scalars['Int']>;
  name: Scalars['String'];
  required: Scalars['Boolean'];
  visibility?: Maybe<AtomistSkillParameterVisiblity>;
};

export type AtomistSkillWebhookParameterSpecInput = {
  description: Scalars['String'];
  displayName?: Maybe<Scalars['String']>;
  maxAllowed?: Maybe<Scalars['Int']>;
  minRequired?: Maybe<Scalars['Int']>;
  name: Scalars['String'];
  required: Scalars['Boolean'];
  visibility?: Maybe<AtomistSkillParameterVisiblity>;
};

export type AtomistSkillWebhookParameterValue = AtomistSkillParameterValue & {
  __typename?: 'AtomistSkillWebhookParameterValue';
  name: Scalars['String'];
  spec: AtomistSkillWebhookParameterSpec;
  value: Array<AtomistSkillWebhookParameterValueDetail>;
};

export type AtomistSkillWebhookParameterValueDetail = {
  __typename?: 'AtomistSkillWebhookParameterValueDetail';
  name: Scalars['String'];
  url: Scalars['String'];
};

export type AtomistSkillWebhookParameterValueInput = {
  name: Scalars['String'];
};

export type AtomistSkills = {
  __typename?: 'AtomistSkills';
  configured: AtomistPagedConfiguredSkills;
  owned: AtomistPagedRegisteredSkills;
};


export type AtomistSkillsConfiguredArgs = {
  query?: Maybe<AtomistSkillsSearchInput>;
};


export type AtomistSkillsOwnedArgs = {
  query?: Maybe<AtomistSkillsSearchInput>;
};

export type AtomistSkillsSearchInput = {
  name?: Maybe<Scalars['String']>;
  namespace?: Maybe<Scalars['String']>;
  showDerived?: Maybe<Scalars['Boolean']>;
  version?: Maybe<Scalars['String']>;
};

export type BinaryRepositoryProvider = ResourceProvider & {
  __typename?: 'BinaryRepositoryProvider';
  name: Scalars['String'];
  type: BinaryRepositoryType;
  providerId: Scalars['String'];
  url?: Maybe<Scalars['String']>;
  _typenames?: Maybe<Array<Maybe<Scalars['String']>>>;
  _id: Scalars['Int'];
  id: Scalars['ID'];
  team: Team;
  authProviderId?: Maybe<Scalars['String']>;
  state?: Maybe<ResourceProviderState>;
  credential?: Maybe<Credential>;
  webhooks?: Maybe<Array<Maybe<Webhook>>>;
  createdAt: Scalars['String'];
  updatedAt: Scalars['String'];
  createdBy?: Maybe<Person>;
  updatedBy?: Maybe<Person>;
  metadata?: Maybe<ResourceProviderMetadata>;
};


export type BinaryRepositoryProviderWebhooksArgs = {
  id?: Maybe<Scalars['ID']>;
};

export enum BinaryRepositoryType {
  Maven2 = 'maven2',
  Npm = 'npm'
}

/** Branch-Node */
export type Branch = {
  __typename?: 'Branch';
  /** internal node id */
  _id?: Maybe<Scalars['Int']>;
  /** the URL of the Branch */
  url?: Maybe<Scalars['String']>;
  /** id of  Branch */
  id?: Maybe<Scalars['ID']>;
  /** name of  Branch */
  name?: Maybe<Scalars['String']>;
  /** timestamp of  Branch */
  timestamp?: Maybe<Scalars['String']>;
  /** isRemote of  Branch */
  isRemote?: Maybe<Scalars['Boolean']>;
  /** remoteRepoHtmlUrl of  Branch */
  remoteRepoHtmlUrl?: Maybe<Scalars['String']>;
  /** Branch repo Repo */
  repo?: Maybe<Repo>;
  /** Branch commit Commit */
  commit?: Maybe<Commit>;
  /** Branch pullRequests PullRequest */
  pullRequests?: Maybe<Array<Maybe<PullRequest>>>;
};


/** Branch-Node */
export type BranchRepoArgs = {
  id?: Maybe<Scalars['ID']>;
  owner?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  allowRebaseMerge?: Maybe<Scalars['Boolean']>;
  allowSquashMerge?: Maybe<Scalars['Boolean']>;
  allowMergeCommit?: Maybe<Scalars['Boolean']>;
  repoId?: Maybe<Scalars['String']>;
  gitHubId?: Maybe<Scalars['String']>;
  defaultBranch?: Maybe<Scalars['String']>;
};


/** Branch-Node */
export type BranchCommitArgs = {
  sha?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
};


/** Branch-Node */
export type BranchPullRequestsArgs = {
  id?: Maybe<Scalars['ID']>;
  number?: Maybe<Scalars['Float']>;
  prId?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  body?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  merged?: Maybe<Scalars['Boolean']>;
  timestamp?: Maybe<Scalars['String']>;
  baseBranchName?: Maybe<Scalars['String']>;
  branchName?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  closedAt?: Maybe<Scalars['String']>;
  mergedAt?: Maybe<Scalars['String']>;
  orderBy?: Maybe<Array<Maybe<_PullRequestOrdering>>>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  mergeStatus?: Maybe<MergeStatus>;
};

export enum BucketUnit {
  /** Group events by year. */
  Year = 'YEAR',
  /** Group events by month. */
  Month = 'MONTH',
  /** Group events by day. */
  Day = 'DAY',
  /** Group events by hour. */
  Hour = 'HOUR',
  /** Group events by minute. */
  Minute = 'MINUTE',
  /** Group events by second. */
  Second = 'SECOND'
}

/** Build-Node */
export type Build = {
  __typename?: 'Build';
  /** internal node id */
  _id?: Maybe<Scalars['Int']>;
  /** id of  Build */
  id?: Maybe<Scalars['ID']>;
  /** buildId of  Build */
  buildId?: Maybe<Scalars['String']>;
  /** number of  Build */
  number?: Maybe<Scalars['Int']>;
  /** name of  Build */
  name?: Maybe<Scalars['String']>;
  /** status of  Build */
  status?: Maybe<BuildStatus>;
  /** buildUrl of  Build */
  buildUrl?: Maybe<Scalars['String']>;
  /** compareUrl of  Build */
  compareUrl?: Maybe<Scalars['String']>;
  /** trigger of  Build */
  trigger?: Maybe<BuildTrigger>;
  /** provider of  Build */
  provider?: Maybe<Scalars['String']>;
  /** pullRequestNumber of  Build */
  pullRequestNumber?: Maybe<Scalars['Float']>;
  /** startedAt of  Build */
  startedAt?: Maybe<Scalars['String']>;
  /** finishedAt of  Build */
  finishedAt?: Maybe<Scalars['String']>;
  /** timestamp of  Build */
  timestamp?: Maybe<Scalars['String']>;
  /** workflowId of  Build */
  workflowId?: Maybe<Scalars['String']>;
  /** jobName of  Build */
  jobName?: Maybe<Scalars['String']>;
  /** jobId of  Build */
  jobId?: Maybe<Scalars['String']>;
  /** data of  Build */
  data?: Maybe<Scalars['String']>;
  /** Build repo Repo */
  repo?: Maybe<Repo>;
  /** Build push Push */
  push?: Maybe<Push>;
  /** Build pullRequest PullRequest */
  pullRequest?: Maybe<PullRequest>;
  /** Build tag Tag */
  tag?: Maybe<Tag>;
  /** Build commit Commit */
  commit?: Maybe<Commit>;
  /** Build workflow Workflow */
  workflow?: Maybe<Workflow>;
};


/** Build-Node */
export type BuildRepoArgs = {
  id?: Maybe<Scalars['ID']>;
  owner?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  allowRebaseMerge?: Maybe<Scalars['Boolean']>;
  allowSquashMerge?: Maybe<Scalars['Boolean']>;
  allowMergeCommit?: Maybe<Scalars['Boolean']>;
  repoId?: Maybe<Scalars['String']>;
  gitHubId?: Maybe<Scalars['String']>;
  defaultBranch?: Maybe<Scalars['String']>;
};


/** Build-Node */
export type BuildPushArgs = {
  id?: Maybe<Scalars['ID']>;
  timestamp?: Maybe<Scalars['String']>;
  branch?: Maybe<Scalars['String']>;
};


/** Build-Node */
export type BuildPullRequestArgs = {
  id?: Maybe<Scalars['ID']>;
  number?: Maybe<Scalars['Float']>;
  prId?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  body?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  merged?: Maybe<Scalars['Boolean']>;
  timestamp?: Maybe<Scalars['String']>;
  baseBranchName?: Maybe<Scalars['String']>;
  branchName?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  closedAt?: Maybe<Scalars['String']>;
  mergedAt?: Maybe<Scalars['String']>;
  mergeStatus?: Maybe<MergeStatus>;
};


/** Build-Node */
export type BuildTagArgs = {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  ref?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
};


/** Build-Node */
export type BuildCommitArgs = {
  sha?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
};


/** Build-Node */
export type BuildWorkflowArgs = {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  workflowId?: Maybe<Scalars['String']>;
  provider?: Maybe<Scalars['String']>;
  config?: Maybe<Scalars['String']>;
};

/** Enum for BuildStatus */
export enum BuildStatus {
  Passed = 'passed',
  Broken = 'broken',
  Failed = 'failed',
  Started = 'started',
  Canceled = 'canceled',
  Pending = 'pending',
  Error = 'error',
  Queued = 'queued'
}

/** Enum for BuildTrigger */
export enum BuildTrigger {
  /** Value for pull_request */
  PullRequest = 'pull_request',
  /** Value for push */
  Push = 'push',
  /** Value for tag */
  Tag = 'tag',
  /** Value for cron */
  Cron = 'cron'
}

export type Card = {
  __typename?: 'Card';
  actionGroups?: Maybe<Array<Maybe<CardActionGroup>>>;
  actions?: Maybe<Array<Maybe<CardAction>>>;
  body?: Maybe<CardBody>;
  collaborators?: Maybe<Array<Maybe<CardCollaborator>>>;
  comments?: Maybe<Array<Maybe<CardBody>>>;
  correlations?: Maybe<Array<Maybe<CardCorrelation>>>;
  events?: Maybe<Array<Maybe<CardEvent>>>;
  goalSets?: Maybe<Array<Maybe<CardSdmGoalSet>>>;
  key?: Maybe<Scalars['String']>;
  post?: Maybe<Scalars['String']>;
  provenance?: Maybe<Array<Maybe<CardProvenance>>>;
  reactions?: Maybe<Array<Maybe<CardReaction>>>;
  repository?: Maybe<CardRepository>;
  shortTitle?: Maybe<Scalars['String']>;
  title?: Maybe<CardTitle>;
  ts?: Maybe<Scalars['Int']>;
  ttl?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
  /** The ID of this Card */
  id?: Maybe<Scalars['ID']>;
};


export type CardCollaboratorsArgs = {
  login?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type CardGoalSetsArgs = {
  goalSetId?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type CardProvenanceArgs = {
  name?: Maybe<Scalars['String']>;
};


export type CardRepositoryArgs = {
  owner?: Maybe<Array<Maybe<Scalars['String']>>>;
  name?: Maybe<Array<Maybe<Scalars['String']>>>;
  slug?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type CardAction = {
  __typename?: 'CardAction';
  command?: Maybe<Scalars['String']>;
  confirm?: Maybe<CardActionConfirmation>;
  parameterName?: Maybe<Scalars['String']>;
  parameterOptionGroups?: Maybe<Array<Maybe<CardActionParameterOptionGroup>>>;
  parameterOptions?: Maybe<Array<Maybe<CardActionParameterOption>>>;
  parameters?: Maybe<Array<Maybe<CardActionParameter>>>;
  registration?: Maybe<Scalars['String']>;
  role?: Maybe<Scalars['String']>;
  text?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

export type CardActionConfirmation = {
  __typename?: 'CardActionConfirmation';
  body?: Maybe<Scalars['String']>;
  dismiss?: Maybe<Scalars['String']>;
  ok?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
};

export type CardActionGroup = {
  __typename?: 'CardActionGroup';
  actions?: Maybe<Array<Maybe<CardAction>>>;
  text?: Maybe<Scalars['String']>;
};

export type CardActionParameter = {
  __typename?: 'CardActionParameter';
  name?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export type CardActionParameterOption = {
  __typename?: 'CardActionParameterOption';
  name?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export type CardActionParameterOptionGroup = {
  __typename?: 'CardActionParameterOptionGroup';
  name?: Maybe<Scalars['String']>;
  options?: Maybe<Array<Maybe<CardActionParameterOption>>>;
};

export type CardBody = {
  __typename?: 'CardBody';
  avatar?: Maybe<Scalars['String']>;
  hint?: Maybe<Scalars['String']>;
  login?: Maybe<Scalars['String']>;
  text?: Maybe<Scalars['String']>;
  ts?: Maybe<Scalars['Int']>;
};

export type CardCollaborator = {
  __typename?: 'CardCollaborator';
  avatar?: Maybe<Scalars['String']>;
  link?: Maybe<Scalars['String']>;
  login?: Maybe<Scalars['String']>;
};

export type CardCorrelation = {
  __typename?: 'CardCorrelation';
  body?: Maybe<Array<Maybe<CorrelationBody>>>;
  icon?: Maybe<Scalars['String']>;
  link?: Maybe<Scalars['String']>;
  shortTitle?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  ts?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
};

export type CardEvent = {
  __typename?: 'CardEvent';
  actionGroups?: Maybe<Array<Maybe<CardActionGroup>>>;
  actions?: Maybe<Array<Maybe<CardAction>>>;
  icon?: Maybe<Scalars['String']>;
  text?: Maybe<Scalars['String']>;
  ts?: Maybe<Scalars['Int']>;
};

export type CardProvenance = {
  __typename?: 'CardProvenance';
  name?: Maybe<Scalars['String']>;
};

export type CardReaction = {
  __typename?: 'CardReaction';
  avatar?: Maybe<Scalars['String']>;
  login?: Maybe<Scalars['String']>;
  reaction?: Maybe<Scalars['String']>;
};

export type CardRepository = {
  __typename?: 'CardRepository';
  name?: Maybe<Scalars['String']>;
  owner?: Maybe<Scalars['String']>;
  slug?: Maybe<Scalars['String']>;
};

export type CardSdmGoal = {
  __typename?: 'CardSdmGoal';
  actions?: Maybe<Array<Maybe<CardAction>>>;
  description?: Maybe<Scalars['String']>;
  environment?: Maybe<Scalars['String']>;
  link?: Maybe<Scalars['String']>;
  logLink?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  ts?: Maybe<Scalars['Int']>;
};

export type CardSdmGoalSet = {
  __typename?: 'CardSdmGoalSet';
  actions?: Maybe<Array<Maybe<CardAction>>>;
  duration?: Maybe<Scalars['Int']>;
  goalSet?: Maybe<Scalars['String']>;
  goalSetId?: Maybe<Scalars['String']>;
  goals?: Maybe<Array<Maybe<CardSdmGoal>>>;
  registration?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  ts?: Maybe<Scalars['Int']>;
};

export type CardTitle = {
  __typename?: 'CardTitle';
  icon?: Maybe<Scalars['String']>;
  text?: Maybe<Scalars['String']>;
};

/** ChannelLink-Node */
export type ChannelLink = {
  __typename?: 'ChannelLink';
  /** internal node id */
  _id?: Maybe<Scalars['Int']>;
  /** id of  ChannelLink */
  id?: Maybe<Scalars['ID']>;
  /** ChannelLink channel ChatChannel */
  channel?: Maybe<ChatChannel>;
  /** ChannelLink repo Repo */
  repo?: Maybe<Repo>;
};


/** ChannelLink-Node */
export type ChannelLinkChannelArgs = {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  provider?: Maybe<Scalars['String']>;
  normalizedName?: Maybe<Scalars['String']>;
  channelId?: Maybe<Scalars['String']>;
  isDefault?: Maybe<Scalars['Boolean']>;
  botInvitedSelf?: Maybe<Scalars['Boolean']>;
  archived?: Maybe<Scalars['Boolean']>;
};


/** ChannelLink-Node */
export type ChannelLinkRepoArgs = {
  id?: Maybe<Scalars['ID']>;
  owner?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  allowRebaseMerge?: Maybe<Scalars['Boolean']>;
  allowSquashMerge?: Maybe<Scalars['Boolean']>;
  allowMergeCommit?: Maybe<Scalars['Boolean']>;
  repoId?: Maybe<Scalars['String']>;
  gitHubId?: Maybe<Scalars['String']>;
  defaultBranch?: Maybe<Scalars['String']>;
};

export type ChannelLinked = {
  __typename?: 'ChannelLinked';
  chatTeamId: Scalars['String'];
  id: Scalars['String'];
};

/** ChatChannel-Node */
export type ChatChannel = {
  __typename?: 'ChatChannel';
  /** internal node id */
  _id?: Maybe<Scalars['Int']>;
  /** id of  ChatChannel */
  id?: Maybe<Scalars['ID']>;
  /** name of  ChatChannel */
  name?: Maybe<Scalars['String']>;
  /** provider of  ChatChannel */
  provider?: Maybe<Scalars['String']>;
  /** normalizedName of  ChatChannel */
  normalizedName?: Maybe<Scalars['String']>;
  /** channelId of  ChatChannel */
  channelId?: Maybe<Scalars['String']>;
  /** isDefault of  ChatChannel */
  isDefault?: Maybe<Scalars['Boolean']>;
  /** botInvitedSelf of  ChatChannel */
  botInvitedSelf?: Maybe<Scalars['Boolean']>;
  /** archived of  ChatChannel */
  archived?: Maybe<Scalars['Boolean']>;
  /** ChatChannel createdBy ChatId */
  createdBy?: Maybe<ChatId>;
  /** ChatChannel repos Repo */
  repos?: Maybe<Array<Maybe<Repo>>>;
  /** ChatChannel links ChannelLink */
  links?: Maybe<Array<Maybe<ChannelLink>>>;
  /** ChatChannel members ChatId */
  members?: Maybe<Array<Maybe<ChatId>>>;
  /** ChatChannel team ChatTeam */
  team?: Maybe<ChatTeam>;
};


/** ChatChannel-Node */
export type ChatChannelCreatedByArgs = {
  id?: Maybe<Scalars['ID']>;
  screenName?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
  provider?: Maybe<Scalars['String']>;
  isAtomistBot?: Maybe<Scalars['String']>;
  isOwner?: Maybe<Scalars['String']>;
  isPrimaryOwner?: Maybe<Scalars['String']>;
  isAdmin?: Maybe<Scalars['String']>;
  isBot?: Maybe<Scalars['String']>;
  timezoneLabel?: Maybe<Scalars['String']>;
};


/** ChatChannel-Node */
export type ChatChannelReposArgs = {
  id?: Maybe<Scalars['ID']>;
  owner?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  allowRebaseMerge?: Maybe<Scalars['Boolean']>;
  allowSquashMerge?: Maybe<Scalars['Boolean']>;
  allowMergeCommit?: Maybe<Scalars['Boolean']>;
  repoId?: Maybe<Scalars['String']>;
  gitHubId?: Maybe<Scalars['String']>;
  orderBy?: Maybe<Array<Maybe<_RepoOrdering>>>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  defaultBranch?: Maybe<Scalars['String']>;
};


/** ChatChannel-Node */
export type ChatChannelLinksArgs = {
  orderBy?: Maybe<Array<Maybe<_ChannelLinkOrdering>>>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['ID']>;
};


/** ChatChannel-Node */
export type ChatChannelMembersArgs = {
  id?: Maybe<Scalars['ID']>;
  screenName?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
  provider?: Maybe<Scalars['String']>;
  isAtomistBot?: Maybe<Scalars['String']>;
  isOwner?: Maybe<Scalars['String']>;
  isPrimaryOwner?: Maybe<Scalars['String']>;
  isAdmin?: Maybe<Scalars['String']>;
  isBot?: Maybe<Scalars['String']>;
  orderBy?: Maybe<Array<Maybe<_ChatIdOrdering>>>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  timezoneLabel?: Maybe<Scalars['String']>;
};


/** ChatChannel-Node */
export type ChatChannelTeamArgs = {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  provider?: Maybe<Scalars['String']>;
  tenantId?: Maybe<Scalars['String']>;
  domain?: Maybe<Scalars['String']>;
  messageCount?: Maybe<Scalars['Float']>;
  emailDomain?: Maybe<Scalars['String']>;
};

export type ChatChannelInput = {
  channelId: Scalars['String'];
  name: Scalars['String'];
  isDefault?: Maybe<Scalars['Boolean']>;
  archived?: Maybe<Scalars['Boolean']>;
};

/** ChatId-Node */
export type ChatId = {
  __typename?: 'ChatId';
  /** internal node id */
  _id?: Maybe<Scalars['Int']>;
  /** id of  ChatId */
  id?: Maybe<Scalars['ID']>;
  /** screenName of  ChatId */
  screenName?: Maybe<Scalars['String']>;
  /** userId of  ChatId */
  userId?: Maybe<Scalars['String']>;
  /** provider of  ChatId */
  provider?: Maybe<Scalars['String']>;
  /** isAtomistBot of  ChatId */
  isAtomistBot?: Maybe<Scalars['String']>;
  /** isOwner of  ChatId */
  isOwner?: Maybe<Scalars['String']>;
  /** isPrimaryOwner of  ChatId */
  isPrimaryOwner?: Maybe<Scalars['String']>;
  /** isAdmin of  ChatId */
  isAdmin?: Maybe<Scalars['String']>;
  /** isBot of  ChatId */
  isBot?: Maybe<Scalars['String']>;
  /** timezoneLabel of  ChatId */
  timezoneLabel?: Maybe<Scalars['String']>;
  /** ChatId channels ChatChannel */
  channels?: Maybe<Array<Maybe<ChatChannel>>>;
  /** ChatId emails Email */
  emails?: Maybe<Array<Maybe<Email>>>;
  /** ChatId chatTeam ChatTeam */
  chatTeam?: Maybe<ChatTeam>;
  /** ChatId channelsCreated ChatChannel */
  channelsCreated?: Maybe<Array<Maybe<ChatChannel>>>;
  /** ChatId person Person */
  person?: Maybe<Person>;
  /** Return a user's preferences */
  preferences?: Maybe<Array<Maybe<UserPreference>>>;
};


/** ChatId-Node */
export type ChatIdChannelsArgs = {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  provider?: Maybe<Scalars['String']>;
  normalizedName?: Maybe<Scalars['String']>;
  channelId?: Maybe<Scalars['String']>;
  isDefault?: Maybe<Scalars['Boolean']>;
  botInvitedSelf?: Maybe<Scalars['Boolean']>;
  orderBy?: Maybe<Array<Maybe<_ChatChannelOrdering>>>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  archived?: Maybe<Scalars['Boolean']>;
};


/** ChatId-Node */
export type ChatIdEmailsArgs = {
  address?: Maybe<Scalars['String']>;
};


/** ChatId-Node */
export type ChatIdChatTeamArgs = {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  provider?: Maybe<Scalars['String']>;
  tenantId?: Maybe<Scalars['String']>;
  domain?: Maybe<Scalars['String']>;
  messageCount?: Maybe<Scalars['Float']>;
  emailDomain?: Maybe<Scalars['String']>;
};


/** ChatId-Node */
export type ChatIdChannelsCreatedArgs = {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  provider?: Maybe<Scalars['String']>;
  normalizedName?: Maybe<Scalars['String']>;
  channelId?: Maybe<Scalars['String']>;
  isDefault?: Maybe<Scalars['Boolean']>;
  botInvitedSelf?: Maybe<Scalars['Boolean']>;
  archived?: Maybe<Scalars['Boolean']>;
};


/** ChatId-Node */
export type ChatIdPersonArgs = {
  id?: Maybe<Scalars['ID']>;
  forename?: Maybe<Scalars['String']>;
  surname?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

export type ChatIdInput = {
  userId: Scalars['String'];
  screenName: Scalars['String'];
  isAtomistBot?: Maybe<Scalars['Boolean']>;
  isBot?: Maybe<Scalars['Boolean']>;
};

/** ChatTeam-Node */
export type ChatTeam = {
  __typename?: 'ChatTeam';
  /** internal node id */
  _id?: Maybe<Scalars['Int']>;
  /** id of  ChatTeam */
  id?: Maybe<Scalars['ID']>;
  /** id of the ChatTeam as provided by the ChatTeam, not the atomist identifier of this node */
  chatTeamId: Scalars['String'];
  /** name of  ChatTeam */
  name?: Maybe<Scalars['String']>;
  /** provider of  ChatTeam */
  provider?: Maybe<Scalars['String']>;
  /** This ChatTeams tenantId if available for this provider */
  tenantId?: Maybe<Scalars['String']>;
  /** This is the url for accessing the API on this ChatTeam */
  serviceUrl?: Maybe<Scalars['String']>;
  /** domain of  ChatTeam */
  domain?: Maybe<Scalars['String']>;
  /** messageCount of  ChatTeam */
  messageCount?: Maybe<Scalars['Float']>;
  /** emailDomain of  ChatTeam */
  emailDomain?: Maybe<Scalars['String']>;
  /** Determines whether or not we have finished ingesting the initial set of ChatChannels and ChatIds */
  state?: Maybe<ChatTeamState>;
  /** The number of ChatChannels to be loaded during initialization. */
  initialChatChannelCount?: Maybe<Scalars['Int']>;
  /** The icon for the ChatTeam. May be an external URL. */
  icon?: Maybe<Scalars['String']>;
  /** ISO8601 timestamp updated when this ChatTeam was linked to the Team (workspace) node */
  linkedAt?: Maybe<Scalars['String']>;
  createdAt: Scalars['String'];
  updatedAt: Scalars['String'];
  createdBy?: Maybe<Person>;
  updatedBy?: Maybe<Person>;
  /** ChatTeam orgs Org */
  orgs?: Maybe<Array<Maybe<Org>>>;
  /** ChatTeam channels ChatChannel */
  channels?: Maybe<Array<Maybe<ChatChannel>>>;
  /** ChatTeam members ChatId */
  members?: Maybe<Array<Maybe<ChatId>>>;
  /** ChatTeam team Team */
  team?: Maybe<Team>;
  /** Return a chat team's preferences */
  preferences?: Maybe<Array<Maybe<TeamPreference>>>;
};


/** ChatTeam-Node */
export type ChatTeamOrgsArgs = {
  id?: Maybe<Scalars['ID']>;
  owner?: Maybe<Scalars['String']>;
  orderBy?: Maybe<Array<Maybe<_OrgOrdering>>>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  ownerType?: Maybe<OwnerType>;
};


/** ChatTeam-Node */
export type ChatTeamChannelsArgs = {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  provider?: Maybe<Scalars['String']>;
  normalizedName?: Maybe<Scalars['String']>;
  channelId?: Maybe<Scalars['String']>;
  isDefault?: Maybe<Scalars['Boolean']>;
  botInvitedSelf?: Maybe<Scalars['Boolean']>;
  orderBy?: Maybe<Array<Maybe<_ChatChannelOrdering>>>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  archived?: Maybe<Scalars['Boolean']>;
};


/** ChatTeam-Node */
export type ChatTeamMembersArgs = {
  id?: Maybe<Scalars['ID']>;
  screenName?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
  provider?: Maybe<Scalars['String']>;
  isAtomistBot?: Maybe<Scalars['String']>;
  isOwner?: Maybe<Scalars['String']>;
  isPrimaryOwner?: Maybe<Scalars['String']>;
  isAdmin?: Maybe<Scalars['String']>;
  isBot?: Maybe<Scalars['String']>;
  orderBy?: Maybe<Array<Maybe<_ChatIdOrdering>>>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  timezoneLabel?: Maybe<Scalars['String']>;
};


/** ChatTeam-Node */
export type ChatTeamTeamArgs = {
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  iconUrl?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['String']>;
};

export enum ChatTeamState {
  Initializing = 'initializing',
  Initialized = 'initialized'
}

export type CheckRun = {
  __typename?: 'CheckRun';
  id: Scalars['ID'];
  _id: Scalars['Int'];
  checkRunId: Scalars['String'];
  action: CheckRunAction;
  url: Scalars['String'];
  htmlUrl: Scalars['String'];
  detailsUrl: Scalars['String'];
  conclusion?: Maybe<CheckRunConclusion>;
  startedAt: Scalars['String'];
  completedAt?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  externalId?: Maybe<Scalars['String']>;
  outputTitle?: Maybe<Scalars['String']>;
  outputAnnotationsUrl?: Maybe<Scalars['String']>;
  status: CheckRunStatus;
  requestedActionIdentifier?: Maybe<Scalars['String']>;
  checkSuite: CheckSuite;
};

export enum CheckRunAction {
  Created = 'created',
  Completed = 'completed',
  Rerequested = 'rerequested',
  RequestedAction = 'requested_action'
}

export enum CheckRunConclusion {
  Success = 'success',
  Failure = 'failure',
  Neutral = 'neutral',
  Cancelled = 'cancelled',
  Skipped = 'skipped',
  TimedOut = 'timed_out',
  ActionRequired = 'action_required',
  Stale = 'stale'
}

export enum CheckRunStatus {
  Queued = 'queued',
  InProgress = 'in_progress',
  Completed = 'completed'
}

export type CheckSuite = {
  __typename?: 'CheckSuite';
  id: Scalars['ID'];
  _id: Scalars['Int'];
  checkSuiteId: Scalars['String'];
  headBranch?: Maybe<Scalars['String']>;
  appSlug: Scalars['String'];
  appId: Scalars['String'];
  url: Scalars['String'];
  checkRunsUrl?: Maybe<Scalars['String']>;
  action?: Maybe<CheckSuiteAction>;
  timestamp: Scalars['String'];
  conclusion?: Maybe<CheckSuiteConclusion>;
  status: CheckSuiteStatus;
  commit?: Maybe<Commit>;
  checkRuns: Array<CheckRun>;
  pullRequests: Array<PullRequest>;
};

export enum CheckSuiteAction {
  Completed = 'completed',
  Requested = 'requested',
  Rerequested = 'rerequested'
}

export enum CheckSuiteConclusion {
  Success = 'success',
  Failure = 'failure',
  Neutral = 'neutral',
  Cancelled = 'cancelled',
  TimedOut = 'timed_out',
  ActionRequired = 'action_required',
  Stale = 'stale'
}

export enum CheckSuiteStatus {
  Requested = 'requested',
  InProgress = 'in_progress',
  Completed = 'completed',
  Queued = 'queued'
}

/** Comment-Node */
export type Comment = {
  __typename?: 'Comment';
  /** internal node id */
  _id?: Maybe<Scalars['Int']>;
  /** the url of the Comment */
  url?: Maybe<Scalars['String']>;
  /** id of  Comment */
  id?: Maybe<Scalars['ID']>;
  /** body of  Comment */
  body?: Maybe<Scalars['String']>;
  /** timestamp of  Comment */
  timestamp?: Maybe<Scalars['String']>;
  /** createdAt of  Comment */
  createdAt?: Maybe<Scalars['String']>;
  /** updatedAt of  Comment */
  updatedAt?: Maybe<Scalars['String']>;
  /** commentId of  Comment */
  commentId?: Maybe<Scalars['String']>;
  /** gitHubId of  Comment */
  gitHubId?: Maybe<Scalars['String']>;
  /** path of  Comment */
  path?: Maybe<Scalars['String']>;
  /** position of  Comment */
  position?: Maybe<Scalars['String']>;
  /** htmlUrl of  Comment */
  htmlUrl?: Maybe<Scalars['String']>;
  /** commentType of  Comment */
  commentType?: Maybe<CommentCommentType>;
  /** Comment issue Issue */
  issue?: Maybe<Issue>;
  /** Comment review Review */
  review?: Maybe<Review>;
  /** Comment pullRequest PullRequest */
  pullRequest?: Maybe<PullRequest>;
  /** Comment by SCMId */
  by?: Maybe<ScmId>;
};


/** Comment-Node */
export type CommentIssueArgs = {
  id?: Maybe<Scalars['ID']>;
  number?: Maybe<Scalars['Float']>;
  name?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  body?: Maybe<Scalars['String']>;
  state?: Maybe<IssueState>;
  timestamp?: Maybe<Scalars['String']>;
  action?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  closedAt?: Maybe<Scalars['String']>;
};


/** Comment-Node */
export type CommentReviewArgs = {
  id?: Maybe<Scalars['ID']>;
  gitHubId?: Maybe<Scalars['String']>;
  reviewId?: Maybe<Scalars['String']>;
  body?: Maybe<Scalars['String']>;
  state?: Maybe<ReviewState>;
  submittedAt?: Maybe<Scalars['String']>;
  htmlUrl?: Maybe<Scalars['String']>;
};


/** Comment-Node */
export type CommentPullRequestArgs = {
  id?: Maybe<Scalars['ID']>;
  number?: Maybe<Scalars['Float']>;
  prId?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  body?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  merged?: Maybe<Scalars['Boolean']>;
  timestamp?: Maybe<Scalars['String']>;
  baseBranchName?: Maybe<Scalars['String']>;
  branchName?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  closedAt?: Maybe<Scalars['String']>;
  mergedAt?: Maybe<Scalars['String']>;
  mergeStatus?: Maybe<MergeStatus>;
};


/** Comment-Node */
export type CommentByArgs = {
  login?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  avatar?: Maybe<Scalars['String']>;
};

/** Enum for CommentCommentType */
export enum CommentCommentType {
  /** Value for review */
  Review = 'review',
  /** Value for pullRequest */
  PullRequest = 'pullRequest',
  /** Value for issue */
  Issue = 'issue'
}

/** Commit-Node */
export type Commit = {
  __typename?: 'Commit';
  id?: Maybe<Scalars['ID']>;
  _id?: Maybe<Scalars['Int']>;
  url?: Maybe<Scalars['String']>;
  sha?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
  email?: Maybe<Email>;
  checkSuites?: Maybe<Array<Maybe<CheckSuite>>>;
  /** Commit builds Build */
  builds?: Maybe<Array<Maybe<Build>>>;
  /** Pipelines associated with this commit if applicable */
  pipelines?: Maybe<Array<Maybe<Pipeline>>>;
  /** Commit repo Repo */
  repo?: Maybe<Repo>;
  /** Commit author SCMId */
  author?: Maybe<ScmId>;
  /** Commit committer SCMId */
  committer?: Maybe<ScmId>;
  /** Commit tags Tag */
  tags?: Maybe<Array<Maybe<Tag>>>;
  /** Commit resolves Issue */
  resolves?: Maybe<Array<Maybe<Issue>>>;
  /** Commit statuses Status */
  statuses?: Maybe<Array<Maybe<Status>>>;
  /** Commit pushes Push */
  pushes?: Maybe<Array<Maybe<Push>>>;
  /** Commit pullRequests PullRequest */
  pullRequests?: Maybe<Array<Maybe<PullRequest>>>;
  /** Commit herokuApps HerokuApp */
  herokuApps?: Maybe<Array<Maybe<HerokuApp>>>;
  /** Commit apps Application */
  apps?: Maybe<Array<Maybe<Application>>>;
  /** Commit image DockerImage */
  image?: Maybe<DockerImage>;
  /** Commit images DockerImage */
  images?: Maybe<Array<Maybe<DockerImage>>>;
  dockerRegistryImages?: Maybe<Array<Maybe<DockerRegistryImage>>>;
  analysis: Array<SourceFingerprint>;
};


/** Commit-Node */
export type CommitEmailArgs = {
  address?: Maybe<Scalars['String']>;
};


/** Commit-Node */
export type CommitCheckSuitesArgs = {
  appSlug?: Maybe<Scalars['String']>;
  orderBy?: Maybe<Array<Maybe<_CheckSuiteOrdering>>>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  appId?: Maybe<Scalars['String']>;
};


/** Commit-Node */
export type CommitBuildsArgs = {
  id?: Maybe<Scalars['ID']>;
  buildId?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  status?: Maybe<BuildStatus>;
  buildUrl?: Maybe<Scalars['String']>;
  compareUrl?: Maybe<Scalars['String']>;
  trigger?: Maybe<BuildTrigger>;
  provider?: Maybe<Scalars['String']>;
  pullRequestNumber?: Maybe<Scalars['Float']>;
  startedAt?: Maybe<Scalars['String']>;
  finishedAt?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
  workflowId?: Maybe<Scalars['String']>;
  jobName?: Maybe<Scalars['String']>;
  jobId?: Maybe<Scalars['String']>;
  orderBy?: Maybe<Array<Maybe<_BuildOrdering>>>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  data?: Maybe<Scalars['String']>;
};


/** Commit-Node */
export type CommitPipelinesArgs = {
  pipelineId?: Maybe<Scalars['ID']>;
};


/** Commit-Node */
export type CommitRepoArgs = {
  id?: Maybe<Scalars['ID']>;
  owner?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  allowRebaseMerge?: Maybe<Scalars['Boolean']>;
  allowSquashMerge?: Maybe<Scalars['Boolean']>;
  allowMergeCommit?: Maybe<Scalars['Boolean']>;
  repoId?: Maybe<Scalars['String']>;
  gitHubId?: Maybe<Scalars['String']>;
  defaultBranch?: Maybe<Scalars['String']>;
};


/** Commit-Node */
export type CommitAuthorArgs = {
  login?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  avatar?: Maybe<Scalars['String']>;
};


/** Commit-Node */
export type CommitCommitterArgs = {
  login?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  avatar?: Maybe<Scalars['String']>;
};


/** Commit-Node */
export type CommitTagsArgs = {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  ref?: Maybe<Scalars['String']>;
  orderBy?: Maybe<Array<Maybe<_TagOrdering>>>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  timestamp?: Maybe<Scalars['String']>;
};


/** Commit-Node */
export type CommitResolvesArgs = {
  id?: Maybe<Scalars['ID']>;
  number?: Maybe<Scalars['Float']>;
  name?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  body?: Maybe<Scalars['String']>;
  state?: Maybe<IssueState>;
  timestamp?: Maybe<Scalars['String']>;
  action?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  orderBy?: Maybe<Array<Maybe<_IssueOrdering>>>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  closedAt?: Maybe<Scalars['String']>;
};


/** Commit-Node */
export type CommitStatusesArgs = {
  id?: Maybe<Scalars['ID']>;
  state?: Maybe<StatusState>;
  description?: Maybe<Scalars['String']>;
  targetUrl?: Maybe<Scalars['String']>;
  context?: Maybe<Scalars['String']>;
  orderBy?: Maybe<Array<Maybe<_StatusOrdering>>>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  timestamp?: Maybe<Scalars['String']>;
};


/** Commit-Node */
export type CommitPushesArgs = {
  id?: Maybe<Scalars['ID']>;
  timestamp?: Maybe<Scalars['String']>;
  orderBy?: Maybe<Array<Maybe<_PushOrdering>>>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  branch?: Maybe<Scalars['String']>;
};


/** Commit-Node */
export type CommitPullRequestsArgs = {
  id?: Maybe<Scalars['ID']>;
  number?: Maybe<Scalars['Float']>;
  prId?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  body?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  merged?: Maybe<Scalars['Boolean']>;
  timestamp?: Maybe<Scalars['String']>;
  baseBranchName?: Maybe<Scalars['String']>;
  branchName?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  closedAt?: Maybe<Scalars['String']>;
  mergedAt?: Maybe<Scalars['String']>;
  orderBy?: Maybe<Array<Maybe<_PullRequestOrdering>>>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  mergeStatus?: Maybe<MergeStatus>;
};


/** Commit-Node */
export type CommitHerokuAppsArgs = {
  app?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
  user?: Maybe<Scalars['String']>;
  appId?: Maybe<Scalars['String']>;
  orderBy?: Maybe<Array<Maybe<_HerokuAppOrdering>>>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  release?: Maybe<Scalars['String']>;
};


/** Commit-Node */
export type CommitAppsArgs = {
  id?: Maybe<Scalars['ID']>;
  state?: Maybe<Scalars['String']>;
  host?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
  domain?: Maybe<Scalars['String']>;
  orderBy?: Maybe<Array<Maybe<_ApplicationOrdering>>>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  data?: Maybe<Scalars['String']>;
};


/** Commit-Node */
export type CommitImageArgs = {
  image?: Maybe<Scalars['String']>;
  imageName?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
};


/** Commit-Node */
export type CommitImagesArgs = {
  image?: Maybe<Scalars['String']>;
  imageName?: Maybe<Scalars['String']>;
  orderBy?: Maybe<Array<Maybe<_DockerImageOrdering>>>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  timestamp?: Maybe<Scalars['String']>;
};


/** Commit-Node */
export type CommitAnalysisArgs = {
  name?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

export type CommitFingerprintImpact = {
  __typename?: 'CommitFingerprintImpact';
  diffs: Array<FingerprintDiff>;
  id: Scalars['ID'];
  offTarget: Array<SourceFingerprint>;
  branch?: Maybe<Branch>;
  commit?: Maybe<Commit>;
  previousCommit?: Maybe<Commit>;
  repo?: Maybe<Repo>;
};

export type CommitIssueRelationship = {
  __typename?: 'CommitIssueRelationship';
  commit?: Maybe<CommitIssueRelationshipCommit>;
  issue?: Maybe<CommitIssueRelationshipIssue>;
  type?: Maybe<CommitIssueRelationshipType>;
  /** The ID of this CommitIssueRelationship */
  id?: Maybe<Scalars['ID']>;
};


export type CommitIssueRelationshipCommitArgs = {
  sha?: Maybe<Array<Maybe<Scalars['String']>>>;
  owner?: Maybe<Array<Maybe<Scalars['String']>>>;
  repo?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type CommitIssueRelationshipIssueArgs = {
  name?: Maybe<Array<Maybe<Scalars['String']>>>;
  owner?: Maybe<Array<Maybe<Scalars['String']>>>;
  repo?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type CommitIssueRelationshipCommit = {
  __typename?: 'CommitIssueRelationshipCommit';
  owner?: Maybe<Scalars['String']>;
  repo?: Maybe<Scalars['String']>;
  sha?: Maybe<Scalars['String']>;
};

export type CommitIssueRelationshipIssue = {
  __typename?: 'CommitIssueRelationshipIssue';
  name?: Maybe<Scalars['String']>;
  owner?: Maybe<Scalars['String']>;
  repo?: Maybe<Scalars['String']>;
};

export enum CommitIssueRelationshipType {
  References = 'references',
  Fixes = 'fixes'
}

export type CommitLink = {
  sha: Scalars['String'];
};

export type CommitsWithFingerprints = {
  __typename?: 'CommitsWithFingerprints';
  _paging?: Maybe<PagingInfo>;
  commits: Array<FingerprintedCommit>;
};

export type ConfiguredAtomistSkill = AtomistSkill & {
  __typename?: 'ConfiguredAtomistSkill';
  artifacts: Array<AtomistSkillArtifact>;
  author: Scalars['String'];
  capabilities: AtomistSkillCapabilitiesSpec;
  categories: Array<AtomistSkillCategory>;
  commands: Array<AtomistChatCommand>;
  configuration?: Maybe<AtomistSkillConfiguration>;
  createdAt: Scalars['String'];
  datalogSubscriptions?: Maybe<Array<AtomistSkillDatalogSubscription>>;
  description: Scalars['String'];
  dispatchStyle: AtomistSkillEventDispatchStyle;
  displayName?: Maybe<Scalars['String']>;
  executions: Array<AtomistSkillExecution>;
  homepageUrl: Scalars['String'];
  iconUrl: Scalars['String'];
  id: Scalars['String'];
  inCatalog: Scalars['Boolean'];
  ingesters: Array<Scalars['String']>;
  integration: Scalars['Boolean'];
  license: Scalars['String'];
  longDescription: Scalars['String'];
  maturities: Array<AtomistSkillMaturityLevel>;
  maxConfigurations: Scalars['Int'];
  name: Scalars['String'];
  namespace: Scalars['String'];
  owner: Scalars['Boolean'];
  parameters: Array<AtomistSkillParameterSpec>;
  platform: AtomistSkillExecutionPlatform;
  publishedAt?: Maybe<Scalars['String']>;
  readme?: Maybe<Scalars['String']>;
  resourceProviders?: Maybe<Array<AtomistSkillResourceProviderSpec>>;
  schemata?: Maybe<Array<AtomistSkillIngestionSchema>>;
  status: AtomistSkillStatus;
  subscriptions: Array<Scalars['String']>;
  technologies: Array<AtomistSkillTechnology>;
  version: Scalars['String'];
  videoUrl?: Maybe<Scalars['String']>;
};


export type ConfiguredAtomistSkillConfigurationArgs = {
  commitSha?: Maybe<Scalars['String']>;
  includeDefaults?: Maybe<Scalars['Boolean']>;
  names?: Maybe<Array<Scalars['String']>>;
  visibility?: Maybe<Array<AtomistSkillParameterVisiblity>>;
};

export type CorrelationBody = {
  __typename?: 'CorrelationBody';
  icon?: Maybe<Scalars['String']>;
  text?: Maybe<Scalars['String']>;
};

export type Credential = {
  _typenames?: Maybe<Array<Maybe<Scalars['String']>>>;
  _id: Scalars['Int'];
  id: Scalars['ID'];
  owner: ResourceUser;
};

export type CredentialInput = {
  type: CredentialType;
  oauth?: Maybe<OAuthInput>;
  password?: Maybe<PasswordInput>;
};

export enum CredentialType {
  OAuthToken = 'OAuthToken',
  Password = 'Password'
}

/** Auto generated input for type ApplyPolicyLog */
export type CustomApplyPolicyLogInput = {
  _prId?: Maybe<Scalars['ID']>;
  _sha?: Maybe<Scalars['String']>;
  branch?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  state?: Maybe<ApplyPolicyState>;
  targetSha?: Maybe<Scalars['String']>;
};

/** Auto generated input for type AspectRegistration */
export type CustomAspectRegistrationInput = {
  category?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  endpoint?: Maybe<Scalars['String']>;
  manageable?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  owner?: Maybe<Scalars['String']>;
  shortName?: Maybe<Scalars['String']>;
  state?: Maybe<AspectRegistrationState>;
  unit?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  uuid?: Maybe<Scalars['String']>;
};

/** Auto generated input for type CardActionConfirmation */
export type CustomCardActionConfirmationInput = {
  body?: Maybe<Scalars['String']>;
  dismiss?: Maybe<Scalars['String']>;
  ok?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
};

/** Auto generated input for type CardActionGroup */
export type CustomCardActionGroupInput = {
  actions?: Maybe<Array<Maybe<CustomCardActionInput>>>;
  text?: Maybe<Scalars['String']>;
};

/** Auto generated input for type CardAction */
export type CustomCardActionInput = {
  command?: Maybe<Scalars['String']>;
  confirm?: Maybe<CustomCardActionConfirmationInput>;
  parameterName?: Maybe<Scalars['String']>;
  parameterOptionGroups?: Maybe<Array<Maybe<CustomCardActionParameterOptionGroupInput>>>;
  parameterOptions?: Maybe<Array<Maybe<CustomCardActionParameterOptionInput>>>;
  parameters?: Maybe<Array<Maybe<CustomCardActionParameterInput>>>;
  registration?: Maybe<Scalars['String']>;
  role?: Maybe<Scalars['String']>;
  text?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

/** Auto generated input for type CardActionParameter */
export type CustomCardActionParameterInput = {
  name?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

/** Auto generated input for type CardActionParameterOptionGroup */
export type CustomCardActionParameterOptionGroupInput = {
  name?: Maybe<Scalars['String']>;
  options?: Maybe<Array<Maybe<CustomCardActionParameterOptionInput>>>;
};

/** Auto generated input for type CardActionParameterOption */
export type CustomCardActionParameterOptionInput = {
  name?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

/** Auto generated input for type CardBody */
export type CustomCardBodyInput = {
  avatar?: Maybe<Scalars['String']>;
  hint?: Maybe<Scalars['String']>;
  login?: Maybe<Scalars['String']>;
  text?: Maybe<Scalars['String']>;
  ts?: Maybe<Scalars['Int']>;
};

/** Auto generated input for type CardCollaborator */
export type CustomCardCollaboratorInput = {
  avatar?: Maybe<Scalars['String']>;
  link?: Maybe<Scalars['String']>;
  login?: Maybe<Scalars['String']>;
};

/** Auto generated input for type CardCorrelation */
export type CustomCardCorrelationInput = {
  body?: Maybe<Array<Maybe<CustomCorrelationBodyInput>>>;
  icon?: Maybe<Scalars['String']>;
  link?: Maybe<Scalars['String']>;
  shortTitle?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  ts?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
};

/** Auto generated input for type CardEvent */
export type CustomCardEventInput = {
  actionGroups?: Maybe<Array<Maybe<CustomCardActionGroupInput>>>;
  actions?: Maybe<Array<Maybe<CustomCardActionInput>>>;
  icon?: Maybe<Scalars['String']>;
  text?: Maybe<Scalars['String']>;
  ts?: Maybe<Scalars['Int']>;
};

/** Auto generated input for type Card */
export type CustomCardInput = {
  actionGroups?: Maybe<Array<Maybe<CustomCardActionGroupInput>>>;
  actions?: Maybe<Array<Maybe<CustomCardActionInput>>>;
  body?: Maybe<CustomCardBodyInput>;
  collaborators?: Maybe<Array<Maybe<CustomCardCollaboratorInput>>>;
  comments?: Maybe<Array<Maybe<CustomCardBodyInput>>>;
  correlations?: Maybe<Array<Maybe<CustomCardCorrelationInput>>>;
  events?: Maybe<Array<Maybe<CustomCardEventInput>>>;
  goalSets?: Maybe<Array<Maybe<CustomCardSdmGoalSetInput>>>;
  key?: Maybe<Scalars['String']>;
  post?: Maybe<Scalars['String']>;
  provenance?: Maybe<Array<Maybe<CustomCardProvenanceInput>>>;
  reactions?: Maybe<Array<Maybe<CustomCardReactionInput>>>;
  repository?: Maybe<CustomCardRepositoryInput>;
  shortTitle?: Maybe<Scalars['String']>;
  title?: Maybe<CustomCardTitleInput>;
  ts?: Maybe<Scalars['Int']>;
  ttl?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
};

/** Auto generated input for type CardProvenance */
export type CustomCardProvenanceInput = {
  name?: Maybe<Scalars['String']>;
};

/** Auto generated input for type CardReaction */
export type CustomCardReactionInput = {
  avatar?: Maybe<Scalars['String']>;
  login?: Maybe<Scalars['String']>;
  reaction?: Maybe<Scalars['String']>;
};

/** Auto generated input for type CardRepository */
export type CustomCardRepositoryInput = {
  name?: Maybe<Scalars['String']>;
  owner?: Maybe<Scalars['String']>;
  slug?: Maybe<Scalars['String']>;
};

/** Auto generated input for type CardSdmGoal */
export type CustomCardSdmGoalInput = {
  actions?: Maybe<Array<Maybe<CustomCardActionInput>>>;
  description?: Maybe<Scalars['String']>;
  environment?: Maybe<Scalars['String']>;
  link?: Maybe<Scalars['String']>;
  logLink?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  ts?: Maybe<Scalars['Int']>;
};

/** Auto generated input for type CardSdmGoalSet */
export type CustomCardSdmGoalSetInput = {
  actions?: Maybe<Array<Maybe<CustomCardActionInput>>>;
  duration?: Maybe<Scalars['Int']>;
  goalSet?: Maybe<Scalars['String']>;
  goalSetId?: Maybe<Scalars['String']>;
  goals?: Maybe<Array<Maybe<CustomCardSdmGoalInput>>>;
  registration?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  ts?: Maybe<Scalars['Int']>;
};

/** Auto generated input for type CardTitle */
export type CustomCardTitleInput = {
  icon?: Maybe<Scalars['String']>;
  text?: Maybe<Scalars['String']>;
};

/** Auto generated input for type CommitIssueRelationshipCommit */
export type CustomCommitIssueRelationshipCommitInput = {
  owner?: Maybe<Scalars['String']>;
  repo?: Maybe<Scalars['String']>;
  sha?: Maybe<Scalars['String']>;
};

/** Auto generated input for type CommitIssueRelationship */
export type CustomCommitIssueRelationshipInput = {
  commit?: Maybe<CustomCommitIssueRelationshipCommitInput>;
  issue?: Maybe<CustomCommitIssueRelationshipIssueInput>;
  type?: Maybe<CommitIssueRelationshipType>;
};

/** Auto generated input for type CommitIssueRelationshipIssue */
export type CustomCommitIssueRelationshipIssueInput = {
  name?: Maybe<Scalars['String']>;
  owner?: Maybe<Scalars['String']>;
  repo?: Maybe<Scalars['String']>;
};

/** Auto generated input for type CorrelationBody */
export type CustomCorrelationBodyInput = {
  icon?: Maybe<Scalars['String']>;
  text?: Maybe<Scalars['String']>;
};

/** Auto generated input for type DeploymentCommit */
export type CustomDeploymentCommitInput = {
  owner?: Maybe<Scalars['String']>;
  repo?: Maybe<Scalars['String']>;
  sha?: Maybe<Scalars['String']>;
};

/** Auto generated input for type Deployment */
export type CustomDeploymentInput = {
  commit?: Maybe<CustomDeploymentCommitInput>;
  environment?: Maybe<Scalars['String']>;
  ts?: Maybe<Scalars['Int']>;
};

/** Auto generated input for type IssueRelationship */
export type CustomIssueRelationshipInput = {
  relationshipId?: Maybe<Scalars['String']>;
  source?: Maybe<CustomIssueRelationshipIssueInput>;
  state?: Maybe<Scalars['String']>;
  target?: Maybe<CustomIssueRelationshipIssueInput>;
  type?: Maybe<Scalars['String']>;
};

/** Auto generated input for type IssueRelationshipIssue */
export type CustomIssueRelationshipIssueInput = {
  issue?: Maybe<Scalars['String']>;
  owner?: Maybe<Scalars['String']>;
  repo?: Maybe<Scalars['String']>;
};

/** Auto generated input for type LifecycleAttachment */
export type CustomLifecycleAttachmentInput = {
  body?: Maybe<Scalars['String']>;
  configuration?: Maybe<Scalars['String']>;
  contentType?: Maybe<Scalars['String']>;
  identifier?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  skill?: Maybe<Scalars['String']>;
  ts?: Maybe<Scalars['Int']>;
  type?: Maybe<LifecycleAttachmentType>;
};

/** Auto generated input for type ManageSubscriptionPolicyLog */
export type CustomManageSubscriptionPolicyLogInput = {
  action?: Maybe<ManageSubscriptionPolicyAction>;
  author?: Maybe<Scalars['String']>;
  branch?: Maybe<Scalars['String']>;
  owner?: Maybe<Scalars['String']>;
  reason?: Maybe<Scalars['String']>;
  repo?: Maybe<Scalars['String']>;
  streamId?: Maybe<Scalars['ID']>;
  streamName?: Maybe<Scalars['String']>;
  targetSha?: Maybe<Scalars['String']>;
  targetValue?: Maybe<Scalars['String']>;
};

/** Auto generated input for type ManageTargetPolicyLog */
export type CustomManageTargetPolicyLogInput = {
  action?: Maybe<ManageTargetPolicyAction>;
  author?: Maybe<Scalars['String']>;
  reason?: Maybe<Scalars['String']>;
  streamId?: Maybe<Scalars['ID']>;
  streamName?: Maybe<Scalars['String']>;
  targetSha?: Maybe<Scalars['String']>;
  targetValue?: Maybe<Scalars['String']>;
};

/** Auto generated input for type NotificationActionGroup */
export type CustomNotificationActionGroupInput = {
  actions?: Maybe<Array<Maybe<CustomCardActionInput>>>;
  text?: Maybe<Scalars['String']>;
};

/** Auto generated input for type NotificationAction */
export type CustomNotificationActionInput = {
  command?: Maybe<Scalars['String']>;
  parameterName?: Maybe<Scalars['String']>;
  parameterOptionGroups?: Maybe<Array<Maybe<CustomNotificationActionParameterOptionGroupInput>>>;
  parameterOptions?: Maybe<Array<Maybe<CustomNotificationActionParameterOptionInput>>>;
  parameters?: Maybe<Array<Maybe<CustomNotificationActionParameterInput>>>;
  registration?: Maybe<Scalars['String']>;
  role?: Maybe<Scalars['String']>;
  text?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

/** Auto generated input for type NotificationActionParameter */
export type CustomNotificationActionParameterInput = {
  name?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

/** Auto generated input for type NotificationActionParameterOptionGroup */
export type CustomNotificationActionParameterOptionGroupInput = {
  name?: Maybe<Scalars['String']>;
  options?: Maybe<Array<Maybe<CustomNotificationActionParameterOptionInput>>>;
};

/** Auto generated input for type NotificationActionParameterOption */
export type CustomNotificationActionParameterOptionInput = {
  name?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

/** Auto generated input for type Notification */
export type CustomNotificationInput = {
  actions?: Maybe<Array<Maybe<CustomNotificationActionInput>>>;
  body: Scalars['String'];
  contentType: Scalars['String'];
  correlationId: Scalars['String'];
  key: Scalars['String'];
  post?: Maybe<Scalars['String']>;
  recipient?: Maybe<CustomNotificationRecipientInput>;
  ts: Scalars['Int'];
  ttl?: Maybe<Scalars['Int']>;
};

/** Auto generated input for type NotificationRecipient */
export type CustomNotificationRecipientInput = {
  address: Scalars['String'];
};

/** Auto generated input for type PolicyComplianceAspect */
export type CustomPolicyComplianceAspectInput = {
  displayType?: Maybe<Scalars['String']>;
  manageable?: Maybe<Scalars['Boolean']>;
  type?: Maybe<Scalars['String']>;
};

/** Auto generated input for type PolicyComplianceFingerprint */
export type CustomPolicyComplianceFingerprintInput = {
  data?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  displayType?: Maybe<Scalars['String']>;
  displayValue?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  sha?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

/** Auto generated input for type PolicyCompliance */
export type CustomPolicyComplianceInput = {
  _branch?: Maybe<Scalars['String']>;
  _owner?: Maybe<Scalars['String']>;
  _repo?: Maybe<Scalars['String']>;
  _sha?: Maybe<Scalars['String']>;
  aspects?: Maybe<Array<Maybe<CustomPolicyComplianceAspectInput>>>;
  differences?: Maybe<Array<Maybe<CustomPolicyComplianceFingerprintInput>>>;
  owner?: Maybe<Scalars['String']>;
  state?: Maybe<PolicyCompliaceState>;
  targets?: Maybe<Array<Maybe<CustomPolicyComplianceFingerprintInput>>>;
  ts?: Maybe<Scalars['Int']>;
};

/** Auto generated input for type PolicyLog */
export type CustomPolicyLogInput = {
  apply?: Maybe<CustomApplyPolicyLogInput>;
  manage?: Maybe<CustomManageTargetPolicyLogInput>;
  name?: Maybe<Scalars['String']>;
  subscribe?: Maybe<CustomManageSubscriptionPolicyLogInput>;
  ts?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
};

/** Auto generated input for type PolicyTarget */
export type CustomPolicyTargetInput = {
  data?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  displayValue?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  sha?: Maybe<Scalars['String']>;
  streams?: Maybe<Array<Maybe<Scalars['ID']>>>;
  type?: Maybe<Scalars['String']>;
};

/** Auto generated input for type PolicyTargetStream */
export type CustomPolicyTargetStreamInput = {
  name?: Maybe<Scalars['String']>;
};

/** Auto generated input for type SdmBuildIdentifier */
export type CustomSdmBuildIdentifierInput = {
  identifier?: Maybe<Scalars['String']>;
  repo?: Maybe<CustomSdmBuildIdentifierRepositoryInput>;
};

/** Auto generated input for type SdmBuildIdentifierRepository */
export type CustomSdmBuildIdentifierRepositoryInput = {
  name?: Maybe<Scalars['String']>;
  owner?: Maybe<Scalars['String']>;
  providerId?: Maybe<Scalars['String']>;
};

/** Auto generated input for type SdmCondition */
export type CustomSdmConditionInput = {
  environment?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  uniqueName?: Maybe<Scalars['String']>;
};

/** Auto generated input for type SdmDeployEnablement */
export type CustomSdmDeployEnablementInput = {
  owner?: Maybe<Scalars['String']>;
  providerId?: Maybe<Scalars['String']>;
  repo?: Maybe<Scalars['String']>;
  state?: Maybe<SdmDeployState>;
};

/** Auto generated input for type SdmExternalUrl */
export type CustomSdmExternalUrlInput = {
  label?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
};

/** Auto generated input for type SdmGoalDescriptions */
export type CustomSdmGoalDescriptionsInput = {
  canceled?: Maybe<Scalars['String']>;
  completed?: Maybe<Scalars['String']>;
  failed?: Maybe<Scalars['String']>;
  inProcess?: Maybe<Scalars['String']>;
  planned?: Maybe<Scalars['String']>;
  requested?: Maybe<Scalars['String']>;
  skipped?: Maybe<Scalars['String']>;
  stopped?: Maybe<Scalars['String']>;
  waitingForApproval?: Maybe<Scalars['String']>;
  waitingForPreApproval?: Maybe<Scalars['String']>;
};

/** Auto generated input for type SdmGoalDisplay */
export type CustomSdmGoalDisplayInput = {
  branch?: Maybe<Scalars['String']>;
  format?: Maybe<SdmGoalDisplayFormat>;
  repo?: Maybe<CustomSdmRepositoryInput>;
  sha?: Maybe<Scalars['String']>;
  state?: Maybe<SdmGoalDisplayState>;
  ts?: Maybe<Scalars['Int']>;
};

/** Auto generated input for type SdmGoalFulfillment */
export type CustomSdmGoalFulfillmentInput = {
  method?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  registration?: Maybe<Scalars['String']>;
};

/** Auto generated input for type SdmGoal */
export type CustomSdmGoalInput = {
  approval?: Maybe<CustomSdmProvenanceInput>;
  approvalRequired?: Maybe<Scalars['Boolean']>;
  branch?: Maybe<Scalars['String']>;
  data?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  descriptions?: Maybe<CustomSdmGoalDescriptionsInput>;
  environment?: Maybe<Scalars['String']>;
  error?: Maybe<Scalars['String']>;
  externalKey?: Maybe<Scalars['String']>;
  externalUrl?: Maybe<Scalars['String']>;
  externalUrls?: Maybe<Array<Maybe<CustomSdmExternalUrlInput>>>;
  fulfillment?: Maybe<CustomSdmGoalFulfillmentInput>;
  goalSet?: Maybe<Scalars['String']>;
  goalSetId?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  parameters?: Maybe<Scalars['String']>;
  phase?: Maybe<Scalars['String']>;
  preApproval?: Maybe<CustomSdmProvenanceInput>;
  preApprovalRequired?: Maybe<Scalars['Boolean']>;
  preConditions?: Maybe<Array<Maybe<CustomSdmConditionInput>>>;
  provenance?: Maybe<Array<Maybe<CustomSdmProvenanceInput>>>;
  registration?: Maybe<Scalars['String']>;
  repo?: Maybe<CustomSdmRepositoryInput>;
  retryFeasible?: Maybe<Scalars['Boolean']>;
  sha?: Maybe<Scalars['String']>;
  signature?: Maybe<Scalars['String']>;
  state?: Maybe<SdmGoalState>;
  ts?: Maybe<Scalars['Int']>;
  uniqueName?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  version?: Maybe<Scalars['Int']>;
};

/** Auto generated input for type SdmGoalName */
export type CustomSdmGoalNameInput = {
  name?: Maybe<Scalars['String']>;
  uniqueName?: Maybe<Scalars['String']>;
};

/** Auto generated input for type SdmGoalSetBadge */
export type CustomSdmGoalSetBadgeInput = {
  repo?: Maybe<CustomSdmGoalSetBadgeRepositoryInput>;
  sdm?: Maybe<Scalars['String']>;
  token?: Maybe<Scalars['String']>;
};

/** Auto generated input for type SdmGoalSetBadgeRepository */
export type CustomSdmGoalSetBadgeRepositoryInput = {
  name?: Maybe<Scalars['String']>;
  owner?: Maybe<Scalars['String']>;
  providerId?: Maybe<Scalars['String']>;
};

/** Auto generated input for type SdmGoalSet */
export type CustomSdmGoalSetInput = {
  branch?: Maybe<Scalars['String']>;
  goalSet?: Maybe<Scalars['String']>;
  goalSetId?: Maybe<Scalars['String']>;
  goals?: Maybe<Array<Maybe<CustomSdmGoalNameInput>>>;
  provenance?: Maybe<CustomSdmProvenanceInput>;
  repo?: Maybe<CustomSdmRepositoryInput>;
  sha?: Maybe<Scalars['String']>;
  state?: Maybe<SdmGoalState>;
  tags?: Maybe<Array<Maybe<CustomSdmGoalSetTagInput>>>;
  ts?: Maybe<Scalars['Int']>;
};

/** Auto generated input for type SdmGoalSetTag */
export type CustomSdmGoalSetTagInput = {
  name?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

/** Auto generated input for type SdmPreference */
export type CustomSdmPreferenceInput = {
  key?: Maybe<Scalars['String']>;
  ttl?: Maybe<Scalars['Int']>;
  value?: Maybe<Scalars['String']>;
};

/** Auto generated input for type SdmProvenance */
export type CustomSdmProvenanceInput = {
  channelId?: Maybe<Scalars['String']>;
  correlationId?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  registration?: Maybe<Scalars['String']>;
  ts?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['String']>;
  version?: Maybe<Scalars['String']>;
};

/** Auto generated input for type SdmRepoProvenance */
export type CustomSdmRepoProvenanceInput = {
  provenance?: Maybe<CustomSdmProvenanceInput>;
  repo?: Maybe<CustomSdmRepositoryInput>;
};

/** Auto generated input for type SdmRepository */
export type CustomSdmRepositoryInput = {
  name?: Maybe<Scalars['String']>;
  owner?: Maybe<Scalars['String']>;
  providerId?: Maybe<Scalars['String']>;
};

/** Auto generated input for type SdmVersion */
export type CustomSdmVersionInput = {
  branch?: Maybe<Scalars['String']>;
  repo?: Maybe<CustomSdmVersionRepositoryInput>;
  sha?: Maybe<Scalars['String']>;
  version?: Maybe<Scalars['String']>;
};

/** Auto generated input for type SdmVersionRepository */
export type CustomSdmVersionRepositoryInput = {
  name?: Maybe<Scalars['String']>;
  owner?: Maybe<Scalars['String']>;
  providerId?: Maybe<Scalars['String']>;
};

/** DeletedBranch-Node */
export type DeletedBranch = {
  __typename?: 'DeletedBranch';
  /** internal node id */
  _id?: Maybe<Scalars['Int']>;
  /** id of  DeletedBranch */
  id?: Maybe<Scalars['ID']>;
  /** name of  DeletedBranch */
  name?: Maybe<Scalars['String']>;
  /** timestamp of  DeletedBranch */
  timestamp?: Maybe<Scalars['String']>;
  /** DeletedBranch repo Repo */
  repo?: Maybe<Repo>;
  /** DeletedBranch commit Commit */
  commit?: Maybe<Commit>;
  /** DeletedBranch pullRequests PullRequest */
  pullRequests?: Maybe<Array<Maybe<PullRequest>>>;
};


/** DeletedBranch-Node */
export type DeletedBranchRepoArgs = {
  id?: Maybe<Scalars['ID']>;
  owner?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  allowRebaseMerge?: Maybe<Scalars['Boolean']>;
  allowSquashMerge?: Maybe<Scalars['Boolean']>;
  allowMergeCommit?: Maybe<Scalars['Boolean']>;
  repoId?: Maybe<Scalars['String']>;
  gitHubId?: Maybe<Scalars['String']>;
  defaultBranch?: Maybe<Scalars['String']>;
};


/** DeletedBranch-Node */
export type DeletedBranchCommitArgs = {
  sha?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
};


/** DeletedBranch-Node */
export type DeletedBranchPullRequestsArgs = {
  id?: Maybe<Scalars['ID']>;
  number?: Maybe<Scalars['Float']>;
  prId?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  body?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  merged?: Maybe<Scalars['Boolean']>;
  timestamp?: Maybe<Scalars['String']>;
  baseBranchName?: Maybe<Scalars['String']>;
  branchName?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  closedAt?: Maybe<Scalars['String']>;
  mergedAt?: Maybe<Scalars['String']>;
  orderBy?: Maybe<Array<Maybe<_PullRequestOrdering>>>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  mergeStatus?: Maybe<MergeStatus>;
};

export type Deployment = {
  __typename?: 'Deployment';
  commit?: Maybe<DeploymentCommit>;
  environment?: Maybe<Scalars['String']>;
  ts?: Maybe<Scalars['Int']>;
  /** The ID of this Deployment */
  id?: Maybe<Scalars['ID']>;
};


export type DeploymentCommitArgs = {
  sha?: Maybe<Array<Maybe<Scalars['String']>>>;
  owner?: Maybe<Array<Maybe<Scalars['String']>>>;
  repo?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type DeploymentCommit = {
  __typename?: 'DeploymentCommit';
  owner?: Maybe<Scalars['String']>;
  repo?: Maybe<Scalars['String']>;
  sha?: Maybe<Scalars['String']>;
};

export type DockerHubInput = {
  name: Scalars['String'];
  owner?: Maybe<Scalars['String']>;
  namespace: Scalars['String'];
};

export type DockerHubRegistryProvider = ResourceProvider & DockerRegistry & {
  __typename?: 'DockerHubRegistryProvider';
  url: Scalars['String'];
  namespace: Scalars['String'];
  registryName: Scalars['String'];
  _typenames?: Maybe<Array<Maybe<Scalars['String']>>>;
  _id: Scalars['Int'];
  id: Scalars['ID'];
  name: Scalars['String'];
  team: Team;
  authProviderId?: Maybe<Scalars['String']>;
  state?: Maybe<ResourceProviderState>;
  credential?: Maybe<Credential>;
  webhooks?: Maybe<Array<Maybe<Webhook>>>;
  createdAt: Scalars['String'];
  updatedAt: Scalars['String'];
  createdBy?: Maybe<Person>;
  updatedBy?: Maybe<Person>;
  metadata?: Maybe<ResourceProviderMetadata>;
  timestamp: Scalars['String'];
  dockerImages: Array<DockerRegistryImage>;
};


export type DockerHubRegistryProviderWebhooksArgs = {
  id?: Maybe<Scalars['ID']>;
};

/** DockerImage-Node */
export type DockerImage = {
  __typename?: 'DockerImage';
  /** internal node id */
  _id?: Maybe<Scalars['Int']>;
  /** image of  DockerImage */
  image?: Maybe<Scalars['String']>;
  /** imageName of  DockerImage */
  imageName?: Maybe<Scalars['String']>;
  /** timestamp of  DockerImage */
  timestamp?: Maybe<Scalars['String']>;
  /** DockerImage pods K8Pod */
  pods?: Maybe<Array<Maybe<K8Pod>>>;
  /** DockerImage commits Commit */
  commits?: Maybe<Array<Maybe<Commit>>>;
  /** DockerImage containers K8Container */
  containers?: Maybe<Array<Maybe<K8Container>>>;
};


/** DockerImage-Node */
export type DockerImagePodsArgs = {
  name?: Maybe<Scalars['String']>;
  phase?: Maybe<Scalars['String']>;
  environment?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
  baseName?: Maybe<Scalars['String']>;
  namespace?: Maybe<Scalars['String']>;
  statusJSON?: Maybe<Scalars['String']>;
  host?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  specsJSON?: Maybe<Scalars['String']>;
  envJSON?: Maybe<Scalars['String']>;
  metadataJSON?: Maybe<Scalars['String']>;
  containersCrashLoopBackOff?: Maybe<Scalars['Boolean']>;
  orderBy?: Maybe<Array<Maybe<_K8PodOrdering>>>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  resourceVersion?: Maybe<Scalars['Int']>;
};


/** DockerImage-Node */
export type DockerImageCommitsArgs = {
  sha?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  orderBy?: Maybe<Array<Maybe<_CommitOrdering>>>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  timestamp?: Maybe<Scalars['String']>;
};


/** DockerImage-Node */
export type DockerImageContainersArgs = {
  name?: Maybe<Scalars['String']>;
  imageName?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
  environment?: Maybe<Scalars['String']>;
  containerJSON?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  stateReason?: Maybe<Scalars['String']>;
  ready?: Maybe<Scalars['Boolean']>;
  restartCount?: Maybe<Scalars['Int']>;
  statusJSON?: Maybe<Scalars['String']>;
  resourceVersion?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<_K8ContainerOrdering>>>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  containerID?: Maybe<Scalars['String']>;
};

export type DockerRegistry = {
  _id: Scalars['Int'];
  id: Scalars['ID'];
  url: Scalars['String'];
  name: Scalars['String'];
  timestamp: Scalars['String'];
  registryName: Scalars['String'];
  credential?: Maybe<Credential>;
  team: Team;
  dockerImages: Array<DockerRegistryImage>;
};

export type DockerRegistryImage = Resource & {
  __typename?: 'DockerRegistryImage';
  imageName: Scalars['String'];
  timestamp: Scalars['String'];
  dockerRegistry: DockerRegistry;
  commit?: Maybe<Commit>;
  id: Scalars['ID'];
  _id: Scalars['Int'];
};

export type DockerRegistryImageInput = {
  imageName: Scalars['String'];
  image?: Maybe<Scalars['String']>;
};

/** Deprecated. Use explicit types. This is the legacy ResourceProvider type.  */
export type DockerRegistryProvider = ResourceProvider & {
  __typename?: 'DockerRegistryProvider';
  name: Scalars['String'];
  type: DockerRegistryType;
  providerId?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  _typenames?: Maybe<Array<Maybe<Scalars['String']>>>;
  _id: Scalars['Int'];
  id: Scalars['ID'];
  team: Team;
  authProviderId?: Maybe<Scalars['String']>;
  state?: Maybe<ResourceProviderState>;
  credential?: Maybe<Credential>;
  webhooks?: Maybe<Array<Maybe<Webhook>>>;
  createdAt: Scalars['String'];
  updatedAt: Scalars['String'];
  createdBy?: Maybe<Person>;
  updatedBy?: Maybe<Person>;
  metadata?: Maybe<ResourceProviderMetadata>;
};


/** Deprecated. Use explicit types. This is the legacy ResourceProvider type.  */
export type DockerRegistryProviderWebhooksArgs = {
  id?: Maybe<Scalars['ID']>;
};

/** Deprecated */
export enum DockerRegistryType {
  JFrog = 'JFrog',
  DockerHub = 'DockerHub'
}

/** Email-Node */
export type Email = {
  __typename?: 'Email';
  /** internal node id */
  _id?: Maybe<Scalars['Int']>;
  /** address of  Email */
  address?: Maybe<Scalars['String']>;
  /** Email scmId SCMId */
  scmId?: Maybe<ScmId>;
  /** Email gitHubId GitHubId */
  gitHubId?: Maybe<GitHubId>;
  /** Email chatId ChatId */
  chatId?: Maybe<ChatId>;
  /** Email person Person */
  person?: Maybe<Person>;
};


/** Email-Node */
export type EmailScmIdArgs = {
  login?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  avatar?: Maybe<Scalars['String']>;
};


/** Email-Node */
export type EmailGitHubIdArgs = {
  login?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};


/** Email-Node */
export type EmailChatIdArgs = {
  id?: Maybe<Scalars['ID']>;
  screenName?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
  provider?: Maybe<Scalars['String']>;
  isAtomistBot?: Maybe<Scalars['String']>;
  isOwner?: Maybe<Scalars['String']>;
  isPrimaryOwner?: Maybe<Scalars['String']>;
  isAdmin?: Maybe<Scalars['String']>;
  isBot?: Maybe<Scalars['String']>;
  timezoneLabel?: Maybe<Scalars['String']>;
};


/** Email-Node */
export type EmailPersonArgs = {
  id?: Maybe<Scalars['ID']>;
  forename?: Maybe<Scalars['String']>;
  surname?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

export type EmailInput = {
  address: Scalars['String'];
};

export enum EventType {
  /** Chat events which have been received. */
  Chat = 'CHAT',
  /** Custom events which have been received. */
  Custom = 'CUSTOM',
  /** Events which have been received from an SCM source. */
  Scm = 'SCM'
}

export type EventsReportRow = {
  __typename?: 'EventsReportRow';
  /** The start date-time of this row. */
  bucket: Scalars['String'];
  /** The number of chat events in this time bucket. */
  chatCount?: Maybe<Scalars['Int']>;
  /** The number of custom events in this time bucket. */
  customCount?: Maybe<Scalars['Int']>;
  /** The number of SCM events in this time bucket. */
  scmCount?: Maybe<Scalars['Int']>;
};

export type FingerprintAggregates = {
  __typename?: 'FingerprintAggregates';
  /** How many repos contain this fingeprint type/name? */
  inRepos: Scalars['Int'];
  /** Latest semver available if the SourceFingerprint supports it */
  latestSemVerAvailable?: Maybe<SourceFingerprint>;
  /** Latest semver used if the SourceFingerprint supports it */
  latestSemVerUsed?: Maybe<SourceFingerprintStats>;
  /** Which value/sha has been most frequently seen? */
  mostFrequentlyUsed?: Maybe<SourceFingerprintStats>;
  /** Which value/sha has been most recently seen? */
  mostRecentlyUsed?: Maybe<SourceFingerprintStats>;
  /** How many repos have been seen in total? */
  totalRepos: Scalars['Int'];
  /** How many different values/shas are there for this type/name? */
  totalVariants: Scalars['Int'];
};

export type FingerprintCounts = {
  __typename?: 'FingerprintCounts';
  count: Scalars['Int'];
  mostFrequentlyUsed?: Maybe<SourceFingerprint>;
  mostRecentlyUsed?: Maybe<SourceFingerprint>;
  types: Array<FingerprintTypeCount>;
};

export type FingerprintDiff = {
  __typename?: 'FingerprintDiff';
  from?: Maybe<SourceFingerprint>;
  to?: Maybe<SourceFingerprint>;
};

/** For submitting new RepoFingerprints */
export type FingerprintInput = {
  /** Optional data, such as dependency version */
  data?: Maybe<Scalars['String']>;
  /** Optional human readable string for this fingerprint */
  displayName?: Maybe<Scalars['String']>;
  /** Optional human readable string for the type (Aspect name) of this fingerprint */
  displayType?: Maybe<Scalars['String']>;
  /** Optional human readable string for the value of this fingerprint */
  displayValue?: Maybe<Scalars['String']>;
  /** The unique name for this fingerprint, such as the name of a dependency */
  name: Scalars['String'];
  /** The hash of this fingerprint - forms ID of a SourceFingerprint */
  sha: Scalars['String'];
};

export type FingerprintTarget = {
  __typename?: 'FingerprintTarget';
  fingerprint: SourceFingerprint;
};

export type FingerprintTargetInput = {
  name: Scalars['String'];
  sha: Scalars['String'];
  type: Scalars['String'];
};

export type FingerprintTypeCount = {
  __typename?: 'FingerprintTypeCount';
  count: Scalars['Int'];
  names: Array<FinterprintNameCount>;
  type: Scalars['String'];
};

/** A commit */
export type FingerprintedCommit = {
  __typename?: 'FingerprintedCommit';
  analysis: Array<SourceFingerprint>;
  isDefaultBranch: Scalars['Boolean'];
  branch?: Maybe<Branch>;
  commit?: Maybe<Commit>;
  repo?: Maybe<Repo>;
};

export type FingerprintsForCommitsInput = {
  commitSha: Scalars['String'];
  repoId: Scalars['String'];
};

export type FinterprintNameCount = {
  __typename?: 'FinterprintNameCount';
  count: Scalars['Int'];
  name: Scalars['String'];
};

export type GenericResourceProvider = ResourceProvider & {
  __typename?: 'GenericResourceProvider';
  name: Scalars['String'];
  type: Scalars['String'];
  providerId: Scalars['String'];
  url?: Maybe<Scalars['String']>;
  _typenames?: Maybe<Array<Maybe<Scalars['String']>>>;
  _id: Scalars['Int'];
  id: Scalars['ID'];
  team: Team;
  authProviderId?: Maybe<Scalars['String']>;
  state?: Maybe<ResourceProviderState>;
  credential?: Maybe<Credential>;
  webhooks?: Maybe<Array<Maybe<Webhook>>>;
  createdAt: Scalars['String'];
  updatedAt: Scalars['String'];
  createdBy?: Maybe<Person>;
  updatedBy?: Maybe<Person>;
  metadata?: Maybe<ResourceProviderMetadata>;
};


export type GenericResourceProviderWebhooksArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GenericResourceUser = ResourceUser & {
  __typename?: 'GenericResourceUser';
  person?: Maybe<Person>;
  _typenames?: Maybe<Array<Maybe<Scalars['String']>>>;
  id: Scalars['ID'];
  _id?: Maybe<Scalars['Int']>;
  credential?: Maybe<Credential>;
  provider: ResourceProvider;
  login: Scalars['String'];
};


export type GenericResourceUserProviderArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GenericSourceFingerprint = SourceFingerprint & {
  __typename?: 'GenericSourceFingerprint';
  data?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  displayType?: Maybe<Scalars['String']>;
  displayValue?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  name: Scalars['String'];
  sha: Scalars['String'];
  type: Scalars['String'];
};

export type GitHubAppInstallation = {
  __typename?: 'GitHubAppInstallation';
  _id: Scalars['Int'];
  installationId: Scalars['Int'];
  permissions?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  owner: Scalars['String'];
  ownerType: OwnerType;
  state: Scalars['String'];
  avatarUrl?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  gitHubAppResourceProvider: GitHubAppResourceProvider;
  token?: Maybe<GitHubAppInstallationToken>;
};

export type GitHubAppInstallationToken = {
  __typename?: 'GitHubAppInstallationToken';
  secret: Scalars['String'];
  permissions: Scalars['String'];
};

export type GitHubAppResourceProvider = ResourceProvider & NpmRegistryProvider & {
  __typename?: 'GitHubAppResourceProvider';
  name: Scalars['String'];
  url: Scalars['String'];
  providerId: Scalars['String'];
  /** private is this provider reachable on the public internet */
  private: Scalars['Boolean'];
  apiUrl: Scalars['String'];
  gitUrl: Scalars['String'];
  providerType: ProviderType;
  /** the id of the atomist github app as provided by github */
  applicationId: Scalars['Int'];
  /** the name of the atomist github app */
  applicationName: Scalars['String'];
  orgs?: Maybe<Array<Maybe<Org>>>;
  gitHubAppInstallations?: Maybe<Array<Maybe<GitHubAppInstallation>>>;
  _typenames?: Maybe<Array<Maybe<Scalars['String']>>>;
  _id: Scalars['Int'];
  id: Scalars['ID'];
  team: Team;
  authProviderId?: Maybe<Scalars['String']>;
  state?: Maybe<ResourceProviderState>;
  credential?: Maybe<Credential>;
  webhooks?: Maybe<Array<Maybe<Webhook>>>;
  createdAt: Scalars['String'];
  updatedAt: Scalars['String'];
  createdBy?: Maybe<Person>;
  updatedBy?: Maybe<Person>;
  metadata?: Maybe<ResourceProviderMetadata>;
  scope?: Maybe<Scalars['String']>;
};


export type GitHubAppResourceProviderOrgsArgs = {
  owner?: Maybe<Scalars['String']>;
  orderBy?: Maybe<Array<Maybe<_OrgOrdering>>>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  ownerType?: Maybe<OwnerType>;
};


export type GitHubAppResourceProviderGitHubAppInstallationsArgs = {
  installationId?: Maybe<Scalars['String']>;
  owner?: Maybe<Scalars['String']>;
  orderBy?: Maybe<Array<Maybe<_GitHubAppInstallationOrdering>>>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  ownerType?: Maybe<OwnerType>;
};


export type GitHubAppResourceProviderWebhooksArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GitHubAppResourceUser = ResourceUser & {
  __typename?: 'GitHubAppResourceUser';
  gitHubAppProvider: GitHubAppResourceProvider;
  gitHubAppInstallations?: Maybe<Array<GitHubAppUserInstallation>>;
  person?: Maybe<Person>;
  _typenames?: Maybe<Array<Maybe<Scalars['String']>>>;
  id: Scalars['ID'];
  _id?: Maybe<Scalars['Int']>;
  credential?: Maybe<Credential>;
  provider: ResourceProvider;
  login: Scalars['String'];
};


export type GitHubAppResourceUserProviderArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GitHubAppUserInstallation = {
  __typename?: 'GitHubAppUserInstallation';
  installationId: Scalars['Int'];
  permissions?: Maybe<Scalars['String']>;
  owner: Scalars['String'];
  ownerType: OwnerType;
  avatarUrl?: Maybe<Scalars['String']>;
};

/** GitHubId-Node */
export type GitHubId = ResourceUser & {
  __typename?: 'GitHubId';
  /** name of  GitHubId */
  name?: Maybe<Scalars['String']>;
  credential?: Maybe<OAuthToken>;
  provider: ScmProvider;
  /** GitHubId emails Email */
  emails?: Maybe<Array<Maybe<Email>>>;
  /** GitHubId person Person */
  person?: Maybe<Person>;
  _typenames?: Maybe<Array<Maybe<Scalars['String']>>>;
  id: Scalars['ID'];
  _id?: Maybe<Scalars['Int']>;
  login: Scalars['String'];
};


/** GitHubId-Node */
export type GitHubIdProviderArgs = {
  id?: Maybe<Scalars['ID']>;
};


/** GitHubId-Node */
export type GitHubIdEmailsArgs = {
  orderBy?: Maybe<Array<Maybe<_EmailOrdering>>>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  address?: Maybe<Scalars['String']>;
};


/** GitHubId-Node */
export type GitHubIdPersonArgs = {
  id?: Maybe<Scalars['ID']>;
  forename?: Maybe<Scalars['String']>;
  surname?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

export type GitHubNpmRegistryProvider = ResourceProvider & NpmRegistryProvider & {
  __typename?: 'GitHubNpmRegistryProvider';
  url: Scalars['String'];
  scope?: Maybe<Scalars['String']>;
  gitHubAppInstallation: GitHubAppInstallation;
  installationId: Scalars['String'];
  credential?: Maybe<Credential>;
  _typenames?: Maybe<Array<Maybe<Scalars['String']>>>;
  _id: Scalars['Int'];
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  team: Team;
  authProviderId?: Maybe<Scalars['String']>;
  state?: Maybe<ResourceProviderState>;
  webhooks?: Maybe<Array<Maybe<Webhook>>>;
  createdAt: Scalars['String'];
  updatedAt: Scalars['String'];
  createdBy?: Maybe<Person>;
  updatedBy?: Maybe<Person>;
  metadata?: Maybe<ResourceProviderMetadata>;
};


export type GitHubNpmRegistryProviderWebhooksArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GitHubNpmRegistryProviderInput = {
  name?: Maybe<Scalars['String']>;
};

/** GitHubProvider-Node */
export type GitHubProvider = {
  __typename?: 'GitHubProvider';
  _id: Scalars['Int'];
  id: Scalars['ID'];
  url?: Maybe<Scalars['String']>;
  providerId: Scalars['String'];
  private?: Maybe<Scalars['Boolean']>;
  apiUrl: Scalars['String'];
  gitUrl: Scalars['String'];
  providerType?: Maybe<ProviderType>;
  team: Team;
};


/** GitHubProvider-Node */
export type GitHubProviderTeamArgs = {
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  iconUrl?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['String']>;
};

export type GoogleCloudPlatformInput = {
  name: Scalars['String'];
};

export type GoogleCloudPlatformProvider = ResourceProvider & {
  __typename?: 'GoogleCloudPlatformProvider';
  name: Scalars['String'];
  timestamp: Scalars['String'];
  _typenames?: Maybe<Array<Maybe<Scalars['String']>>>;
  _id: Scalars['Int'];
  id: Scalars['ID'];
  team: Team;
  authProviderId?: Maybe<Scalars['String']>;
  state?: Maybe<ResourceProviderState>;
  credential?: Maybe<Credential>;
  webhooks?: Maybe<Array<Maybe<Webhook>>>;
  createdAt: Scalars['String'];
  updatedAt: Scalars['String'];
  createdBy?: Maybe<Person>;
  updatedBy?: Maybe<Person>;
  metadata?: Maybe<ResourceProviderMetadata>;
};


export type GoogleCloudPlatformProviderWebhooksArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type GoogleContainerRegistryInput = {
  name: Scalars['String'];
  projectId: Scalars['String'];
  registryHost: Scalars['String'];
};

export type GoogleContainerRegistryProvider = ResourceProvider & DockerRegistry & {
  __typename?: 'GoogleContainerRegistryProvider';
  url: Scalars['String'];
  registryHost: Scalars['String'];
  projectId: Scalars['String'];
  registryName: Scalars['String'];
  _typenames?: Maybe<Array<Maybe<Scalars['String']>>>;
  _id: Scalars['Int'];
  id: Scalars['ID'];
  name: Scalars['String'];
  team: Team;
  authProviderId?: Maybe<Scalars['String']>;
  state?: Maybe<ResourceProviderState>;
  credential?: Maybe<Credential>;
  webhooks?: Maybe<Array<Maybe<Webhook>>>;
  createdAt: Scalars['String'];
  updatedAt: Scalars['String'];
  createdBy?: Maybe<Person>;
  updatedBy?: Maybe<Person>;
  metadata?: Maybe<ResourceProviderMetadata>;
  timestamp: Scalars['String'];
  dockerImages: Array<DockerRegistryImage>;
};


export type GoogleContainerRegistryProviderWebhooksArgs = {
  id?: Maybe<Scalars['ID']>;
};

/** HerokuApp-Node */
export type HerokuApp = {
  __typename?: 'HerokuApp';
  /** internal node id */
  _id?: Maybe<Scalars['Int']>;
  /** app of  HerokuApp */
  app?: Maybe<Scalars['String']>;
  /** url of  HerokuApp */
  url?: Maybe<Scalars['String']>;
  /** timestamp of  HerokuApp */
  timestamp?: Maybe<Scalars['String']>;
  /** user of  HerokuApp */
  user?: Maybe<Scalars['String']>;
  /** appId of  HerokuApp */
  appId?: Maybe<Scalars['String']>;
  /** release of  HerokuApp */
  release?: Maybe<Scalars['String']>;
  /** HerokuApp commits Commit */
  commits?: Maybe<Array<Maybe<Commit>>>;
};


/** HerokuApp-Node */
export type HerokuAppCommitsArgs = {
  sha?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  orderBy?: Maybe<Array<Maybe<_CommitOrdering>>>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  timestamp?: Maybe<Scalars['String']>;
};

export type HmacSha1AuthInput = {
  /** shared secret */
  secret: Scalars['String'];
  /** http header in which to find the hash */
  header?: Maybe<Scalars['String']>;
};

/** ImageLinked-Node */
export type ImageLinked = {
  __typename?: 'ImageLinked';
  /** internal node id */
  _id?: Maybe<Scalars['Int']>;
  /** timestamp of  ImageLinked */
  timestamp?: Maybe<Scalars['String']>;
  /** ImageLinked image DockerImage */
  image?: Maybe<DockerImage>;
  /** ImageLinked commit Commit */
  commit?: Maybe<Commit>;
};


/** ImageLinked-Node */
export type ImageLinkedImageArgs = {
  image?: Maybe<Scalars['String']>;
  imageName?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
};


/** ImageLinked-Node */
export type ImageLinkedCommitArgs = {
  sha?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
};

export type Issue = {
  __typename?: 'Issue';
  _id?: Maybe<Scalars['Int']>;
  url?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  number?: Maybe<Scalars['Float']>;
  name?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  body?: Maybe<Scalars['String']>;
  state?: Maybe<IssueState>;
  timestamp?: Maybe<Scalars['String']>;
  action?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  closedAt?: Maybe<Scalars['String']>;
  /** Issue repo Repo */
  repo: Repo;
  /** Issue resolvingCommits Commit */
  resolvingCommits?: Maybe<Array<Maybe<Commit>>>;
  /** Issue openedBy SCMId */
  openedBy?: Maybe<ScmId>;
  /** Issue closedBy SCMId */
  closedBy?: Maybe<ScmId>;
  /** Issue labels Label */
  labels?: Maybe<Array<Maybe<Label>>>;
  /** Issue assignees SCMId */
  assignees?: Maybe<Array<Maybe<ScmId>>>;
  /** Issue lastAssignedBy SCMId */
  lastAssignedBy?: Maybe<ScmId>;
  /** Issue comments Comment */
  comments?: Maybe<Array<Maybe<Comment>>>;
};


export type IssueRepoArgs = {
  id?: Maybe<Scalars['ID']>;
  owner?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  allowRebaseMerge?: Maybe<Scalars['Boolean']>;
  allowSquashMerge?: Maybe<Scalars['Boolean']>;
  allowMergeCommit?: Maybe<Scalars['Boolean']>;
  repoId?: Maybe<Scalars['String']>;
  gitHubId?: Maybe<Scalars['String']>;
  defaultBranch?: Maybe<Scalars['String']>;
};


export type IssueResolvingCommitsArgs = {
  sha?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
  orderBy?: Maybe<Array<Maybe<_CommitOrdering>>>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type IssueOpenedByArgs = {
  login?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  avatar?: Maybe<Scalars['String']>;
};


export type IssueClosedByArgs = {
  login?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  avatar?: Maybe<Scalars['String']>;
};


export type IssueLabelsArgs = {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  default?: Maybe<Scalars['String']>;
  color?: Maybe<Scalars['String']>;
  orderBy?: Maybe<Array<Maybe<_LabelOrdering>>>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type IssueAssigneesArgs = {
  login?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  orderBy?: Maybe<Array<Maybe<_ScmIdOrdering>>>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  avatar?: Maybe<Scalars['String']>;
};


export type IssueLastAssignedByArgs = {
  login?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  avatar?: Maybe<Scalars['String']>;
};


export type IssueCommentsArgs = {
  id?: Maybe<Scalars['ID']>;
  body?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  commentId?: Maybe<Scalars['String']>;
  gitHubId?: Maybe<Scalars['String']>;
  path?: Maybe<Scalars['String']>;
  position?: Maybe<Scalars['String']>;
  htmlUrl?: Maybe<Scalars['String']>;
  orderBy?: Maybe<Array<Maybe<_CommentOrdering>>>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  commentType?: Maybe<CommentCommentType>;
};

export type IssueRelationship = {
  __typename?: 'IssueRelationship';
  relationshipId?: Maybe<Scalars['String']>;
  source?: Maybe<IssueRelationshipIssue>;
  state?: Maybe<Scalars['String']>;
  target?: Maybe<IssueRelationshipIssue>;
  type?: Maybe<Scalars['String']>;
  /** The ID of this IssueRelationship */
  id?: Maybe<Scalars['ID']>;
};


export type IssueRelationshipSourceArgs = {
  issue?: Maybe<Array<Maybe<Scalars['String']>>>;
  owner?: Maybe<Array<Maybe<Scalars['String']>>>;
  repo?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type IssueRelationshipTargetArgs = {
  issue?: Maybe<Array<Maybe<Scalars['String']>>>;
  owner?: Maybe<Array<Maybe<Scalars['String']>>>;
  repo?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type IssueRelationshipIssue = {
  __typename?: 'IssueRelationshipIssue';
  issue?: Maybe<Scalars['String']>;
  owner?: Maybe<Scalars['String']>;
  repo?: Maybe<Scalars['String']>;
};

export enum IssueState {
  Open = 'open',
  Closed = 'closed',
  Deleted = 'deleted'
}

export type JFrogDockerRegistryInput = {
  name: Scalars['String'];
  url: Scalars['String'];
};

export type JFrogDockerRegistryProvider = ResourceProvider & DockerRegistry & {
  __typename?: 'JFrogDockerRegistryProvider';
  url: Scalars['String'];
  registryName: Scalars['String'];
  _typenames?: Maybe<Array<Maybe<Scalars['String']>>>;
  _id: Scalars['Int'];
  id: Scalars['ID'];
  name: Scalars['String'];
  team: Team;
  authProviderId?: Maybe<Scalars['String']>;
  state?: Maybe<ResourceProviderState>;
  credential?: Maybe<Credential>;
  webhooks?: Maybe<Array<Maybe<Webhook>>>;
  createdAt: Scalars['String'];
  updatedAt: Scalars['String'];
  createdBy?: Maybe<Person>;
  updatedBy?: Maybe<Person>;
  metadata?: Maybe<ResourceProviderMetadata>;
  timestamp: Scalars['String'];
  dockerImages: Array<DockerRegistryImage>;
};


export type JFrogDockerRegistryProviderWebhooksArgs = {
  id?: Maybe<Scalars['ID']>;
};

/** Job-Node */
export type Job = {
  __typename?: 'Job';
  /** internal node id */
  _id?: Maybe<Scalars['Int']>;
  /** When this job gets triggered */
  when?: Maybe<Scalars['String']>;
  /** Is this job triggered manually? */
  manual?: Maybe<Scalars['Boolean']>;
  /** The name of this job */
  name?: Maybe<Scalars['String']>;
  /** The source id of this job. The ID assigned to it by its provider */
  jobId?: Maybe<Scalars['ID']>;
  /** When this job started as an ISO8601 string. Blank until started. */
  startedAt?: Maybe<Scalars['String']>;
  /** When this job finished as an ISO8601 string. Blank until finished. */
  finishedAt?: Maybe<Scalars['String']>;
  /** The status of this job. Blank until started. */
  status?: Maybe<JobStatus>;
  /** The runner for this job. Blank until started. */
  runner?: Maybe<Scalars['String']>;
  /** The stage this job is associated with */
  stage?: Maybe<Stage>;
};

/** Enum for JobStatus */
export enum JobStatus {
  Created = 'created',
  Pending = 'pending',
  Running = 'running',
  Failed = 'failed',
  Success = 'success',
  Canceled = 'canceled',
  Skipped = 'skipped',
  Manual = 'manual'
}

/** K8Container-Node */
export type K8Container = {
  __typename?: 'K8Container';
  _id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  imageName?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
  environment?: Maybe<Scalars['String']>;
  clusterName: Scalars['String'];
  containerJSON?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  stateReason?: Maybe<Scalars['String']>;
  ready?: Maybe<Scalars['Boolean']>;
  restartCount?: Maybe<Scalars['Int']>;
  statusJSON?: Maybe<Scalars['String']>;
  resourceVersion?: Maybe<Scalars['Int']>;
  containerID?: Maybe<Scalars['String']>;
  image?: Maybe<DockerImage>;
  /** K8Container pod K8Pod */
  pod?: Maybe<K8Pod>;
};


/** K8Container-Node */
export type K8ContainerImageArgs = {
  image?: Maybe<Scalars['String']>;
  imageName?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
};


/** K8Container-Node */
export type K8ContainerPodArgs = {
  name?: Maybe<Scalars['String']>;
  phase?: Maybe<Scalars['String']>;
  environment?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
  baseName?: Maybe<Scalars['String']>;
  namespace?: Maybe<Scalars['String']>;
  statusJSON?: Maybe<Scalars['String']>;
  host?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  specsJSON?: Maybe<Scalars['String']>;
  envJSON?: Maybe<Scalars['String']>;
  metadataJSON?: Maybe<Scalars['String']>;
  containersCrashLoopBackOff?: Maybe<Scalars['Boolean']>;
  resourceVersion?: Maybe<Scalars['Int']>;
};

/** K8Pod-Node */
export type K8Pod = {
  __typename?: 'K8Pod';
  _id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  phase?: Maybe<Scalars['String']>;
  environment?: Maybe<Scalars['String']>;
  clusterName: Scalars['String'];
  timestamp?: Maybe<Scalars['String']>;
  baseName?: Maybe<Scalars['String']>;
  namespace?: Maybe<Scalars['String']>;
  statusJSON?: Maybe<Scalars['String']>;
  host?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  specsJSON?: Maybe<Scalars['String']>;
  envJSON?: Maybe<Scalars['String']>;
  metadataJSON?: Maybe<Scalars['String']>;
  containersCrashLoopBackOff?: Maybe<Scalars['Boolean']>;
  resourceVersion?: Maybe<Scalars['Int']>;
  /** K8Pod images DockerImage */
  images?: Maybe<Array<Maybe<DockerImage>>>;
  /** K8Pod containers K8Container */
  containers?: Maybe<Array<Maybe<K8Container>>>;
};


/** K8Pod-Node */
export type K8PodImagesArgs = {
  image?: Maybe<Scalars['String']>;
  imageName?: Maybe<Scalars['String']>;
  orderBy?: Maybe<Array<Maybe<_DockerImageOrdering>>>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  timestamp?: Maybe<Scalars['String']>;
};


/** K8Pod-Node */
export type K8PodContainersArgs = {
  name?: Maybe<Scalars['String']>;
  imageName?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
  environment?: Maybe<Scalars['String']>;
  containerJSON?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  stateReason?: Maybe<Scalars['String']>;
  ready?: Maybe<Scalars['Boolean']>;
  restartCount?: Maybe<Scalars['Int']>;
  statusJSON?: Maybe<Scalars['String']>;
  resourceVersion?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<Array<Maybe<_K8ContainerOrdering>>>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  containerID?: Maybe<Scalars['String']>;
};

export type KubernetesCluster = {
  __typename?: 'KubernetesCluster';
  name: Scalars['String'];
};

export type KubernetesClusterInput = {
  name: Scalars['String'];
};

export type KubernetesClusterProvider = ResourceProvider & {
  __typename?: 'KubernetesClusterProvider';
  name: Scalars['String'];
  timestamp: Scalars['String'];
  _typenames?: Maybe<Array<Maybe<Scalars['String']>>>;
  _id: Scalars['Int'];
  id: Scalars['ID'];
  team: Team;
  authProviderId?: Maybe<Scalars['String']>;
  state?: Maybe<ResourceProviderState>;
  credential?: Maybe<Credential>;
  webhooks?: Maybe<Array<Maybe<Webhook>>>;
  createdAt: Scalars['String'];
  updatedAt: Scalars['String'];
  createdBy?: Maybe<Person>;
  updatedBy?: Maybe<Person>;
  metadata?: Maybe<ResourceProviderMetadata>;
};


export type KubernetesClusterProviderWebhooksArgs = {
  id?: Maybe<Scalars['ID']>;
};

/** Label-Node */
export type Label = {
  __typename?: 'Label';
  /** internal node id */
  _id?: Maybe<Scalars['Int']>;
  /** the url of the Label */
  url?: Maybe<Scalars['String']>;
  /** id of  Label */
  id?: Maybe<Scalars['ID']>;
  /** name of  Label */
  name?: Maybe<Scalars['String']>;
  /** default of  Label */
  default?: Maybe<Scalars['String']>;
  /** color of  Label */
  color?: Maybe<Scalars['String']>;
  /** Label repo Repo */
  repo?: Maybe<Repo>;
};


/** Label-Node */
export type LabelRepoArgs = {
  id?: Maybe<Scalars['ID']>;
  owner?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  allowRebaseMerge?: Maybe<Scalars['Boolean']>;
  allowSquashMerge?: Maybe<Scalars['Boolean']>;
  allowMergeCommit?: Maybe<Scalars['Boolean']>;
  repoId?: Maybe<Scalars['String']>;
  gitHubId?: Maybe<Scalars['String']>;
  defaultBranch?: Maybe<Scalars['String']>;
};

export type LifecycleAttachment = {
  __typename?: 'LifecycleAttachment';
  body?: Maybe<Scalars['String']>;
  configuration?: Maybe<Scalars['String']>;
  contentType?: Maybe<Scalars['String']>;
  identifier?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  skill?: Maybe<Scalars['String']>;
  ts?: Maybe<Scalars['Int']>;
  type?: Maybe<LifecycleAttachmentType>;
  /** The ID of this LifecycleAttachment */
  id?: Maybe<Scalars['ID']>;
};

export enum LifecycleAttachmentType {
  Push = 'push'
}

export enum ManageSubscriptionPolicyAction {
  Ignore = 'ignore',
  Unignore = 'unignore',
  Subscribe = 'subscribe',
  Unsubscribe = 'unsubscribe'
}

export type ManageSubscriptionPolicyLog = {
  __typename?: 'ManageSubscriptionPolicyLog';
  action?: Maybe<ManageSubscriptionPolicyAction>;
  author?: Maybe<Scalars['String']>;
  branch?: Maybe<Scalars['String']>;
  owner?: Maybe<Scalars['String']>;
  reason?: Maybe<Scalars['String']>;
  repo?: Maybe<Scalars['String']>;
  streamId?: Maybe<Scalars['ID']>;
  streamName?: Maybe<Scalars['String']>;
  targetSha?: Maybe<Scalars['String']>;
  targetValue?: Maybe<Scalars['String']>;
};

export enum ManageTargetPolicyAction {
  Unset = 'unset',
  Set = 'set'
}

export type ManageTargetPolicyLog = {
  __typename?: 'ManageTargetPolicyLog';
  action?: Maybe<ManageTargetPolicyAction>;
  author?: Maybe<Scalars['String']>;
  reason?: Maybe<Scalars['String']>;
  streamId?: Maybe<Scalars['ID']>;
  streamName?: Maybe<Scalars['String']>;
  targetSha?: Maybe<Scalars['String']>;
  targetValue?: Maybe<Scalars['String']>;
};

export type MavenDependency = SourceFingerprint & {
  __typename?: 'MavenDependency';
  artifact: Scalars['String'];
  data?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  displayType?: Maybe<Scalars['String']>;
  displayValue?: Maybe<Scalars['String']>;
  group: Scalars['String'];
  id: Scalars['ID'];
  name: Scalars['String'];
  sha: Scalars['String'];
  type: Scalars['String'];
  version: Scalars['String'];
};

export type MavenRepositoryProvider = {
  _id: Scalars['Int'];
  id: Scalars['ID'];
  url: Scalars['String'];
  name: Scalars['String'];
  timestamp: Scalars['String'];
  credential?: Maybe<Credential>;
  team: Team;
};

/** Enum for MergeStatus */
export enum MergeStatus {
  /** Value for can_be_merged */
  CanBeMerged = 'can_be_merged',
  /** Value for unchecked */
  Unchecked = 'unchecked',
  /** Value for cannot_be_merged */
  CannotBeMerged = 'cannot_be_merged'
}

export type Mutation = {
  __typename?: 'Mutation';
  publishSkill?: Maybe<RegisteredAtomistSkill>;
  registerSkill?: Maybe<RegisteredAtomistSkill>;
  removeSkillConfiguration?: Maybe<AtomistSkills>;
  saveSkillConfiguration?: Maybe<AtomistSkills>;
  setSkillMaturity?: Maybe<RegisteredAtomistSkill>;
  unpublishSkill?: Maybe<RegisteredAtomistSkill>;
  /** # Team/Workspace configuration ## */
  setTeamConfiguration: TeamConfiguration;
  deleteTeamConfiguration?: Maybe<TeamConfiguration>;
  disableRegistration?: Maybe<AtomistRegistration>;
  enableRegistration?: Maybe<AtomistRegistration>;
  createGHEAppResourceProvider: GitHubAppResourceProvider;
  createGitHubComAppResourceProvider: GitHubAppResourceProvider;
  /** Creates SCMProvider for github.com with a bunch of defaults */
  createGitHubResourceProvider: ScmProvider;
  createGHEResourceProvider: ScmProvider;
  createBitBucketResourceProvider: ScmProvider;
  createGitLabResourceProvider: ScmProvider;
  /** configure repos/orgs - raise system event for SCMProvider */
  configureGitHubResourceProvider: ScmProvider;
  setSCMProviderState: ScmProvider;
  /** Links a GitHubAppInstallation to the provider as an Org */
  linkGitHubAppInstallation: GitHubAppInstallation;
  createGitHubAppInstallation: GitHubAppInstallation;
  disconnectGitHubAppOrg: Scalars['String'];
  deleteOrg: Scalars['String'];
  deleteRepo: Scalars['String'];
  deleteAllFingerprints: Scalars['String'];
  deleteAspectFingerprints: Scalars['String'];
  /** create and expose a webhook over the public internet */
  createWebhook: Webhook;
  /** delete a webhook from public internet */
  deleteWebhook: Scalars['String'];
  /** associate some state with a webhook to help convergence etc */
  updateWebhook: Webhook;
  /** add (or overwrite) a tag on a webhook */
  addWebhookTag: Webhook;
  setWebhookTags: Webhook;
  /** Removes a ChatTeam and associated nodes from the graph */
  removeChatTeam: Scalars['String'];
  /** ### RCCA SCM Ingestion Mutations #### */
  ingestSCMOrgs: Array<Maybe<Org>>;
  ingestSCMRepos: Array<Maybe<Repo>>;
  ingestSCMCommit: Commit;
  setSCMOrgInitializationState?: Maybe<Org>;
  ingestChatChannels: Array<ChatChannel>;
  removeChatChannels: Scalars['String'];
  ingestChatIds: Array<ChatId>;
  removeChatIds: Scalars['String'];
  /** Deprecated. Creates a new docker registry provider. */
  createDockerRegistryProvider: DockerRegistryProvider;
  createDockerHubRegistryProvider: DockerHubRegistryProvider;
  updateDockerHubRegistryProvider: DockerHubRegistryProvider;
  createGoogleContainerRegistryProvider: GoogleContainerRegistryProvider;
  updateGoogleContainerRegistryProvider: GoogleContainerRegistryProvider;
  createJFrogDockerRegistryProvider: JFrogDockerRegistryProvider;
  updateJFrogDockerRegistryProvider: JFrogDockerRegistryProvider;
  createDockerContainerImage: DockerRegistryImage;
  createGoogleCloudPlatformProvider: GoogleCloudPlatformProvider;
  updateGoogleCloudPlatformProvider: GoogleCloudPlatformProvider;
  createKubernetesClusterProvider: KubernetesClusterProvider;
  updateKubernetesClusterProvider: KubernetesClusterProvider;
  createArtifactoryMavenRepositoryProvider: ArtifactoryMavenRepositoryProvider;
  updateArtifactoryMavenRepositoryProvider: ArtifactoryMavenRepositoryProvider;
  createNpmJSRegistryProvider: NpmJsRegistryProvider;
  updateNpmJSRegistryProvider: NpmJsRegistryProvider;
  createGitHubNpmRegistryProvider: GitHubNpmRegistryProvider;
  updateGitHubNpmRegistryProvider: GitHubNpmRegistryProvider;
  linkResourceToGraph: Resource;
  setResourceProviderState: ResourceProvider;
  deleteResourceProvider: Scalars['String'];
  setCredential: Credential;
  linkCredentialToResourceProvider: Credential;
  /** ### Users #### */
  createResourceUser?: Maybe<ResourceUser>;
  updateResourceUser?: Maybe<ResourceUser>;
  linkResourceUser?: Maybe<ResourceUser>;
  createGenericResourceProvider: GenericResourceProvider;
  createBinaryRepositoryProvider?: Maybe<BinaryRepositoryProvider>;
  createSecretProvider: SecretProvider;
  updateSecretProvider: SecretProvider;
  /** Delete all fingerprints for this team matching supplied query */
  deleteFingerprints: Scalars['Int'];
  /** Set the fingerprints of a commit */
  setCommitFingerprints?: Maybe<Scalars['String']>;
  setFingerprintTarget?: Maybe<FingerprintTarget>;
  /** Add tasks to existing job, provided the job is in a preparing state. */
  addAtmJobTasks?: Maybe<AtmJob>;
  /** Create a new AtmJob */
  createAtmJob?: Maybe<AtmJob>;
  /** Re-trigger tasks for a job that have not completed */
  resumeAtmJob?: Maybe<AtmJob>;
  /** Set the state on a AtmJobTask */
  setAtmJobTaskState?: Maybe<AtmJobTask>;
  /** Take tasks to work on */
  takeTasks: Array<Maybe<AtmJobTask>>;
  linkSlackChannelToRepo?: Maybe<ChannelLinked>;
  unlinkSlackChannelFromRepo?: Maybe<ChannelLinked>;
  /** Auto-generated ingestion mutation for Card */
  ingestCustomCard?: Maybe<Scalars['String']>;
  /** Auto-generated ingestion mutation for Notification */
  ingestCustomNotification?: Maybe<Scalars['String']>;
  /** Auto-generated ingestion mutation for CommitIssueRelationship */
  ingestCustomCommitIssueRelationship?: Maybe<Scalars['String']>;
  /** Auto-generated ingestion mutation for Deployment */
  ingestCustomDeployment?: Maybe<Scalars['String']>;
  /** Auto-generated ingestion mutation for IssueRelationship */
  ingestCustomIssueRelationship?: Maybe<Scalars['String']>;
  /** Auto-generated ingestion mutation for SdmGoal */
  ingestCustomSdmGoal?: Maybe<Scalars['String']>;
  /** Auto-generated ingestion mutation for SdmGoalSet */
  ingestCustomSdmGoalSet?: Maybe<Scalars['String']>;
  /** Auto-generated ingestion mutation for SdmGoalDisplay */
  ingestCustomSdmGoalDisplay?: Maybe<Scalars['String']>;
  /** Auto-generated ingestion mutation for SdmBuildIdentifier */
  ingestCustomSdmBuildIdentifier?: Maybe<Scalars['String']>;
  /** Auto-generated ingestion mutation for SdmDeployEnablement */
  ingestCustomSdmDeployEnablement?: Maybe<Scalars['String']>;
  /** Auto-generated ingestion mutation for SdmVersion */
  ingestCustomSdmVersion?: Maybe<Scalars['String']>;
  /** Auto-generated ingestion mutation for SdmGoalSetBadge */
  ingestCustomSdmGoalSetBadge?: Maybe<Scalars['String']>;
  /** Auto-generated ingestion mutation for SdmPreference */
  ingestCustomSdmPreference?: Maybe<Scalars['String']>;
  /** Auto-generated ingestion mutation for SdmRepoProvenance */
  ingestCustomSdmRepoProvenance?: Maybe<Scalars['String']>;
  /** Auto-generated ingestion mutation for PolicyLog */
  ingestCustomPolicyLog?: Maybe<Scalars['String']>;
  /** Auto-generated ingestion mutation for PolicyCompliance */
  ingestCustomPolicyCompliance?: Maybe<Scalars['String']>;
  /** Auto-generated ingestion mutation for PolicyTargetStream */
  ingestCustomPolicyTargetStream?: Maybe<Scalars['String']>;
  /** Auto-generated ingestion mutation for PolicyTarget */
  ingestCustomPolicyTarget?: Maybe<Scalars['String']>;
  /** Auto-generated ingestion mutation for LifecycleAttachment */
  ingestCustomLifecycleAttachment?: Maybe<Scalars['String']>;
  /** Auto-generated ingestion mutation for AspectRegistration */
  ingestCustomAspectRegistration?: Maybe<Scalars['String']>;
  /** Auto-generated deletion mutation for Card */
  deleteCustomCard?: Maybe<Scalars['String']>;
  /** Auto-generated deletion mutation for Notification */
  deleteCustomNotification?: Maybe<Scalars['String']>;
  /** Auto-generated deletion mutation for CommitIssueRelationship */
  deleteCustomCommitIssueRelationship?: Maybe<Scalars['String']>;
  /** Auto-generated deletion mutation for Deployment */
  deleteCustomDeployment?: Maybe<Scalars['String']>;
  /** Auto-generated deletion mutation for IssueRelationship */
  deleteCustomIssueRelationship?: Maybe<Scalars['String']>;
  /** Auto-generated deletion mutation for SdmGoal */
  deleteCustomSdmGoal?: Maybe<Scalars['String']>;
  /** Auto-generated deletion mutation for SdmGoalSet */
  deleteCustomSdmGoalSet?: Maybe<Scalars['String']>;
  /** Auto-generated deletion mutation for SdmGoalDisplay */
  deleteCustomSdmGoalDisplay?: Maybe<Scalars['String']>;
  /** Auto-generated deletion mutation for SdmBuildIdentifier */
  deleteCustomSdmBuildIdentifier?: Maybe<Scalars['String']>;
  /** Auto-generated deletion mutation for SdmDeployEnablement */
  deleteCustomSdmDeployEnablement?: Maybe<Scalars['String']>;
  /** Auto-generated deletion mutation for SdmVersion */
  deleteCustomSdmVersion?: Maybe<Scalars['String']>;
  /** Auto-generated deletion mutation for SdmGoalSetBadge */
  deleteCustomSdmGoalSetBadge?: Maybe<Scalars['String']>;
  /** Auto-generated deletion mutation for SdmPreference */
  deleteCustomSdmPreference?: Maybe<Scalars['String']>;
  /** Auto-generated deletion mutation for SdmRepoProvenance */
  deleteCustomSdmRepoProvenance?: Maybe<Scalars['String']>;
  /** Auto-generated deletion mutation for PolicyLog */
  deleteCustomPolicyLog?: Maybe<Scalars['String']>;
  /** Auto-generated deletion mutation for PolicyCompliance */
  deleteCustomPolicyCompliance?: Maybe<Scalars['String']>;
  /** Auto-generated deletion mutation for PolicyTargetStream */
  deleteCustomPolicyTargetStream?: Maybe<Scalars['String']>;
  /** Auto-generated deletion mutation for PolicyTarget */
  deleteCustomPolicyTarget?: Maybe<Scalars['String']>;
  /** Auto-generated deletion mutation for LifecycleAttachment */
  deleteCustomLifecycleAttachment?: Maybe<Scalars['String']>;
  /** Auto-generated deletion mutation for AspectRegistration */
  deleteCustomAspectRegistration?: Maybe<Scalars['String']>;
  /** Auto-generated delete-by-id mutation for Card */
  deleteCustomCardById?: Maybe<Scalars['String']>;
  /** Auto-generated delete-by-id mutation for Notification */
  deleteCustomNotificationById?: Maybe<Scalars['String']>;
  /** Auto-generated delete-by-id mutation for CommitIssueRelationship */
  deleteCustomCommitIssueRelationshipById?: Maybe<Scalars['String']>;
  /** Auto-generated delete-by-id mutation for Deployment */
  deleteCustomDeploymentById?: Maybe<Scalars['String']>;
  /** Auto-generated delete-by-id mutation for IssueRelationship */
  deleteCustomIssueRelationshipById?: Maybe<Scalars['String']>;
  /** Auto-generated delete-by-id mutation for SdmGoal */
  deleteCustomSdmGoalById?: Maybe<Scalars['String']>;
  /** Auto-generated delete-by-id mutation for SdmGoalSet */
  deleteCustomSdmGoalSetById?: Maybe<Scalars['String']>;
  /** Auto-generated delete-by-id mutation for SdmGoalDisplay */
  deleteCustomSdmGoalDisplayById?: Maybe<Scalars['String']>;
  /** Auto-generated delete-by-id mutation for SdmBuildIdentifier */
  deleteCustomSdmBuildIdentifierById?: Maybe<Scalars['String']>;
  /** Auto-generated delete-by-id mutation for SdmDeployEnablement */
  deleteCustomSdmDeployEnablementById?: Maybe<Scalars['String']>;
  /** Auto-generated delete-by-id mutation for SdmVersion */
  deleteCustomSdmVersionById?: Maybe<Scalars['String']>;
  /** Auto-generated delete-by-id mutation for SdmGoalSetBadge */
  deleteCustomSdmGoalSetBadgeById?: Maybe<Scalars['String']>;
  /** Auto-generated delete-by-id mutation for SdmPreference */
  deleteCustomSdmPreferenceById?: Maybe<Scalars['String']>;
  /** Auto-generated delete-by-id mutation for SdmRepoProvenance */
  deleteCustomSdmRepoProvenanceById?: Maybe<Scalars['String']>;
  /** Auto-generated delete-by-id mutation for PolicyLog */
  deleteCustomPolicyLogById?: Maybe<Scalars['String']>;
  /** Auto-generated delete-by-id mutation for PolicyCompliance */
  deleteCustomPolicyComplianceById?: Maybe<Scalars['String']>;
  /** Auto-generated delete-by-id mutation for PolicyTargetStream */
  deleteCustomPolicyTargetStreamById?: Maybe<Scalars['String']>;
  /** Auto-generated delete-by-id mutation for PolicyTarget */
  deleteCustomPolicyTargetById?: Maybe<Scalars['String']>;
  /** Auto-generated delete-by-id mutation for LifecycleAttachment */
  deleteCustomLifecycleAttachmentById?: Maybe<Scalars['String']>;
  /** Auto-generated delete-by-id mutation for AspectRegistration */
  deleteCustomAspectRegistrationById?: Maybe<Scalars['String']>;
  /** Set the value of a user preference. */
  setChatUserPreference?: Maybe<Array<Maybe<UserPreference>>>;
  /** Set the value of a chat team preference. Returns what was set */
  setChatTeamPreference?: Maybe<Array<Maybe<TeamPreference>>>;
  /** Create a slack channel in the current team */
  createSlackChannel?: Maybe<SlackChannel>;
  /** Ask the bot to join a chat channel */
  addBotToSlackChannel?: Maybe<SlackChannel>;
  /** Ask the bot to invite a user to join a chat channel */
  inviteUserToSlackChannel?: Maybe<SlackChannel>;
  /** Ask the bot to kick a user from a chat channel */
  kickUserFromSlackChannel?: Maybe<SlackChannel>;
  /** set a GitHub login to be used for resources owned by an Org */
  setOwnerLogin?: Maybe<OwnerLogin>;
  /** set a GitHub login to be used for this Repository */
  setRepoLogin?: Maybe<RepoLogin>;
  /** Set a team's properties */
  setTeamProperties?: Maybe<Team>;
};


export type MutationPublishSkillArgs = {
  name: Scalars['String'];
  namespace: Scalars['String'];
};


export type MutationRegisterSkillArgs = {
  skill: AtomistSkillInput;
};


export type MutationRemoveSkillConfigurationArgs = {
  configurationId?: Maybe<Scalars['ID']>;
  configurationName?: Maybe<Scalars['ID']>;
  name: Scalars['String'];
  namespace: Scalars['String'];
  version: Scalars['String'];
};


export type MutationSaveSkillConfigurationArgs = {
  configuration: AtomistSkillConfigurationInput;
  name: Scalars['String'];
  namespace: Scalars['String'];
  oldName?: Maybe<Scalars['ID']>;
  replacingCommitSha?: Maybe<Scalars['String']>;
  upgradePolicy?: Maybe<AtomistSkillUpgradePolicy>;
  version: Scalars['String'];
};


export type MutationSetSkillMaturityArgs = {
  maturity: AtomistSkillMaturityLevel;
  name: Scalars['String'];
  namespace: Scalars['String'];
  version: Scalars['String'];
};


export type MutationUnpublishSkillArgs = {
  name: Scalars['String'];
  namespace: Scalars['String'];
};


export type MutationSetTeamConfigurationArgs = {
  name: Scalars['String'];
  value: Scalars['String'];
  namespace?: Maybe<Scalars['String']>;
  ttlSecs?: Maybe<Scalars['Int']>;
};


export type MutationDeleteTeamConfigurationArgs = {
  namespace: Scalars['String'];
  name: Scalars['String'];
};


export type MutationDisableRegistrationArgs = {
  name: Scalars['String'];
};


export type MutationEnableRegistrationArgs = {
  name: Scalars['String'];
};


export type MutationCreateGheAppResourceProviderArgs = {
  name: Scalars['String'];
  url: Scalars['String'];
  authProviderId?: Maybe<Scalars['String']>;
  apiUrl: Scalars['String'];
  gitUrl: Scalars['String'];
  private: Scalars['Boolean'];
  applicationId: Scalars['Int'];
  applicationName: Scalars['String'];
};


export type MutationCreateGitHubComAppResourceProviderArgs = {
  name: Scalars['String'];
};


export type MutationCreateGheResourceProviderArgs = {
  name: Scalars['String'];
  url: Scalars['String'];
  apiUrl: Scalars['String'];
  gitUrl: Scalars['String'];
  authProviderId?: Maybe<Scalars['String']>;
  private: Scalars['Boolean'];
};


export type MutationCreateBitBucketResourceProviderArgs = {
  name: Scalars['String'];
  url: Scalars['String'];
  apiUrl: Scalars['String'];
  gitUrl: Scalars['String'];
  authProviderId?: Maybe<Scalars['String']>;
  private: Scalars['Boolean'];
};


export type MutationCreateGitLabResourceProviderArgs = {
  name: Scalars['String'];
  url: Scalars['String'];
  apiUrl: Scalars['String'];
  gitUrl: Scalars['String'];
  authProviderId?: Maybe<Scalars['String']>;
  private: Scalars['Boolean'];
};


export type MutationConfigureGitHubResourceProviderArgs = {
  id: Scalars['ID'];
  config: ScmResourceProviderInput;
};


export type MutationSetScmProviderStateArgs = {
  id: Scalars['ID'];
  providerState?: Maybe<ScmProviderStateInput>;
};


export type MutationLinkGitHubAppInstallationArgs = {
  id: Scalars['ID'];
};


export type MutationCreateGitHubAppInstallationArgs = {
  resourceProviderId: Scalars['ID'];
  installationId: Scalars['Int'];
};


export type MutationDisconnectGitHubAppOrgArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteOrgArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteRepoArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteAspectFingerprintsArgs = {
  featureName: Scalars['String'];
};


export type MutationCreateWebhookArgs = {
  webhook: WebhookInput;
};


export type MutationDeleteWebhookArgs = {
  id: Scalars['ID'];
};


export type MutationUpdateWebhookArgs = {
  id: Scalars['ID'];
  webhook: WebhookUpdateInput;
};


export type MutationAddWebhookTagArgs = {
  id: Scalars['ID'];
  name: Scalars['String'];
  value: Scalars['String'];
};


export type MutationSetWebhookTagsArgs = {
  id: Scalars['ID'];
  name: Scalars['String'];
  value: Scalars['String'];
};


export type MutationRemoveChatTeamArgs = {
  chatTeamId: Scalars['String'];
};


export type MutationIngestScmOrgsArgs = {
  scmProviderId: Scalars['String'];
  scmOrgsInput: ScmOrgsInput;
};


export type MutationIngestScmReposArgs = {
  scmProviderId: Scalars['String'];
  scmReposInput: ScmReposInput;
};


export type MutationIngestScmCommitArgs = {
  scmProviderId: Scalars['String'];
  scmCommitInput: ScmCommitInput;
};


export type MutationSetScmOrgInitializationStateArgs = {
  scmProviderId: Scalars['String'];
  scmOrgId: Scalars['String'];
  initializationState: OrgInitializationState;
};


export type MutationIngestChatChannelsArgs = {
  chatTeamAtomistId: Scalars['ID'];
  chatChannels: Array<ChatChannelInput>;
};


export type MutationRemoveChatChannelsArgs = {
  chatTeamAtomistId: Scalars['ID'];
  chatChannelAtomistIds: Array<Scalars['ID']>;
};


export type MutationIngestChatIdsArgs = {
  chatTeamAtomistId: Scalars['ID'];
  chatIds: Array<ChatIdInput>;
};


export type MutationRemoveChatIdsArgs = {
  chatTeamAtomistId: Scalars['ID'];
  chatIdAtomistIds: Array<Scalars['ID']>;
};


export type MutationCreateDockerRegistryProviderArgs = {
  type: DockerRegistryType;
  name: Scalars['String'];
  url?: Maybe<Scalars['String']>;
};


export type MutationCreateDockerHubRegistryProviderArgs = {
  input: DockerHubInput;
};


export type MutationUpdateDockerHubRegistryProviderArgs = {
  resourceProviderId: Scalars['ID'];
  input: DockerHubInput;
};


export type MutationCreateGoogleContainerRegistryProviderArgs = {
  input: GoogleContainerRegistryInput;
};


export type MutationUpdateGoogleContainerRegistryProviderArgs = {
  resourceProviderId: Scalars['ID'];
  input: GoogleContainerRegistryInput;
};


export type MutationCreateJFrogDockerRegistryProviderArgs = {
  input: JFrogDockerRegistryInput;
};


export type MutationUpdateJFrogDockerRegistryProviderArgs = {
  resourceProviderId: Scalars['ID'];
  input: JFrogDockerRegistryInput;
};


export type MutationCreateDockerContainerImageArgs = {
  resourceProviderId: Scalars['ID'];
  input: DockerRegistryImageInput;
  links?: Maybe<Array<ResourceLinks>>;
};


export type MutationCreateGoogleCloudPlatformProviderArgs = {
  input: GoogleCloudPlatformInput;
};


export type MutationUpdateGoogleCloudPlatformProviderArgs = {
  resourceProviderId: Scalars['ID'];
  input: GoogleCloudPlatformInput;
};


export type MutationCreateKubernetesClusterProviderArgs = {
  input: KubernetesClusterInput;
};


export type MutationUpdateKubernetesClusterProviderArgs = {
  resourceProviderId: Scalars['ID'];
  input: KubernetesClusterInput;
};


export type MutationCreateArtifactoryMavenRepositoryProviderArgs = {
  input: ArtifactoryMavenRepositoryInput;
};


export type MutationUpdateArtifactoryMavenRepositoryProviderArgs = {
  resourceProviderId: Scalars['ID'];
  input: ArtifactoryMavenRepositoryInput;
};


export type MutationCreateNpmJsRegistryProviderArgs = {
  input: NpmJsRegistryProviderInput;
};


export type MutationUpdateNpmJsRegistryProviderArgs = {
  resourceProviderId: Scalars['ID'];
  input: NpmJsRegistryProviderInput;
};


export type MutationCreateGitHubNpmRegistryProviderArgs = {
  input: GitHubNpmRegistryProviderInput;
  gitHubAppInstallationId: Scalars['ID'];
};


export type MutationUpdateGitHubNpmRegistryProviderArgs = {
  resourceProviderId: Scalars['ID'];
  input: GitHubNpmRegistryProviderInput;
};


export type MutationLinkResourceToGraphArgs = {
  resourceId: Scalars['ID'];
  links?: Maybe<Array<Maybe<ResourceLinks>>>;
};


export type MutationSetResourceProviderStateArgs = {
  id: Scalars['ID'];
  providerState?: Maybe<ResourceProviderStateInput>;
};


export type MutationDeleteResourceProviderArgs = {
  id: Scalars['ID'];
};


export type MutationSetCredentialArgs = {
  providerId: Scalars['ID'];
  resourceUserId: Scalars['ID'];
  credential: CredentialInput;
};


export type MutationLinkCredentialToResourceProviderArgs = {
  resourceProviderId: Scalars['ID'];
  credentialId: Scalars['ID'];
};


export type MutationCreateResourceUserArgs = {
  login: Scalars['String'];
  resourceProviderId: Scalars['ID'];
  resourceUserType: ResourceUserType;
};


export type MutationUpdateResourceUserArgs = {
  login: Scalars['String'];
  resourceUserId: Scalars['ID'];
};


export type MutationLinkResourceUserArgs = {
  resourceUserId: Scalars['ID'];
  personId: Scalars['ID'];
};


export type MutationCreateGenericResourceProviderArgs = {
  type: Scalars['String'];
  name: Scalars['String'];
  url?: Maybe<Scalars['String']>;
};


export type MutationCreateBinaryRepositoryProviderArgs = {
  name: Scalars['String'];
  type: BinaryRepositoryType;
  url?: Maybe<Scalars['String']>;
};


export type MutationCreateSecretProviderArgs = {
  input: SecretProviderInput;
};


export type MutationUpdateSecretProviderArgs = {
  resourceProviderId: Scalars['ID'];
  input: SecretProviderInput;
};


export type MutationDeleteFingerprintsArgs = {
  branchId?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  repoId?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};


export type MutationSetCommitFingerprintsArgs = {
  add?: Maybe<Array<FingerprintInput>>;
  branchId: Scalars['String'];
  commitSha: Scalars['String'];
  isDefaultBranch: Scalars['Boolean'];
  isHeadCommit: Scalars['Boolean'];
  repoId: Scalars['String'];
  type: Scalars['String'];
};


export type MutationSetFingerprintTargetArgs = {
  target: FingerprintTargetInput;
};


export type MutationAddAtmJobTasksArgs = {
  jobId: Scalars['String'];
  jobTasks: Array<AtmJobTaskInput>;
};


export type MutationCreateAtmJobArgs = {
  jobInput: AtmJobInput;
};


export type MutationResumeAtmJobArgs = {
  jobId: Scalars['String'];
};


export type MutationSetAtmJobTaskStateArgs = {
  id: Scalars['ID'];
  jobTaskState: AtmJobTaskStateInput;
};


export type MutationTakeTasksArgs = {
  taskRequest: AtmTaskRequest;
};


export type MutationLinkSlackChannelToRepoArgs = {
  channelId: Scalars['String'];
  channelName?: Maybe<Scalars['String']>;
  chatTeamId: Scalars['String'];
  owner: Scalars['String'];
  providerId?: Maybe<Scalars['String']>;
  repo: Scalars['String'];
};


export type MutationUnlinkSlackChannelFromRepoArgs = {
  channelId: Scalars['String'];
  chatTeamId: Scalars['String'];
  owner: Scalars['String'];
  providerId?: Maybe<Scalars['String']>;
  repo: Scalars['String'];
};


export type MutationIngestCustomCardArgs = {
  value: CustomCardInput;
};


export type MutationIngestCustomNotificationArgs = {
  value: CustomNotificationInput;
};


export type MutationIngestCustomCommitIssueRelationshipArgs = {
  value: CustomCommitIssueRelationshipInput;
};


export type MutationIngestCustomDeploymentArgs = {
  value: CustomDeploymentInput;
};


export type MutationIngestCustomIssueRelationshipArgs = {
  value: CustomIssueRelationshipInput;
};


export type MutationIngestCustomSdmGoalArgs = {
  value: CustomSdmGoalInput;
};


export type MutationIngestCustomSdmGoalSetArgs = {
  value: CustomSdmGoalSetInput;
};


export type MutationIngestCustomSdmGoalDisplayArgs = {
  value: CustomSdmGoalDisplayInput;
};


export type MutationIngestCustomSdmBuildIdentifierArgs = {
  value: CustomSdmBuildIdentifierInput;
};


export type MutationIngestCustomSdmDeployEnablementArgs = {
  value: CustomSdmDeployEnablementInput;
};


export type MutationIngestCustomSdmVersionArgs = {
  value: CustomSdmVersionInput;
};


export type MutationIngestCustomSdmGoalSetBadgeArgs = {
  value: CustomSdmGoalSetBadgeInput;
};


export type MutationIngestCustomSdmPreferenceArgs = {
  value: CustomSdmPreferenceInput;
};


export type MutationIngestCustomSdmRepoProvenanceArgs = {
  value: CustomSdmRepoProvenanceInput;
};


export type MutationIngestCustomPolicyLogArgs = {
  value: CustomPolicyLogInput;
};


export type MutationIngestCustomPolicyComplianceArgs = {
  value: CustomPolicyComplianceInput;
};


export type MutationIngestCustomPolicyTargetStreamArgs = {
  value: CustomPolicyTargetStreamInput;
};


export type MutationIngestCustomPolicyTargetArgs = {
  value: CustomPolicyTargetInput;
};


export type MutationIngestCustomLifecycleAttachmentArgs = {
  value: CustomLifecycleAttachmentInput;
};


export type MutationIngestCustomAspectRegistrationArgs = {
  value: CustomAspectRegistrationInput;
};


export type MutationDeleteCustomCardArgs = {
  value: CustomCardInput;
};


export type MutationDeleteCustomNotificationArgs = {
  value: CustomNotificationInput;
};


export type MutationDeleteCustomCommitIssueRelationshipArgs = {
  value: CustomCommitIssueRelationshipInput;
};


export type MutationDeleteCustomDeploymentArgs = {
  value: CustomDeploymentInput;
};


export type MutationDeleteCustomIssueRelationshipArgs = {
  value: CustomIssueRelationshipInput;
};


export type MutationDeleteCustomSdmGoalArgs = {
  value: CustomSdmGoalInput;
};


export type MutationDeleteCustomSdmGoalSetArgs = {
  value: CustomSdmGoalSetInput;
};


export type MutationDeleteCustomSdmGoalDisplayArgs = {
  value: CustomSdmGoalDisplayInput;
};


export type MutationDeleteCustomSdmBuildIdentifierArgs = {
  value: CustomSdmBuildIdentifierInput;
};


export type MutationDeleteCustomSdmDeployEnablementArgs = {
  value: CustomSdmDeployEnablementInput;
};


export type MutationDeleteCustomSdmVersionArgs = {
  value: CustomSdmVersionInput;
};


export type MutationDeleteCustomSdmGoalSetBadgeArgs = {
  value: CustomSdmGoalSetBadgeInput;
};


export type MutationDeleteCustomSdmPreferenceArgs = {
  value: CustomSdmPreferenceInput;
};


export type MutationDeleteCustomSdmRepoProvenanceArgs = {
  value: CustomSdmRepoProvenanceInput;
};


export type MutationDeleteCustomPolicyLogArgs = {
  value: CustomPolicyLogInput;
};


export type MutationDeleteCustomPolicyComplianceArgs = {
  value: CustomPolicyComplianceInput;
};


export type MutationDeleteCustomPolicyTargetStreamArgs = {
  value: CustomPolicyTargetStreamInput;
};


export type MutationDeleteCustomPolicyTargetArgs = {
  value: CustomPolicyTargetInput;
};


export type MutationDeleteCustomLifecycleAttachmentArgs = {
  value: CustomLifecycleAttachmentInput;
};


export type MutationDeleteCustomAspectRegistrationArgs = {
  value: CustomAspectRegistrationInput;
};


export type MutationDeleteCustomCardByIdArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteCustomNotificationByIdArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteCustomCommitIssueRelationshipByIdArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteCustomDeploymentByIdArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteCustomIssueRelationshipByIdArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteCustomSdmGoalByIdArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteCustomSdmGoalSetByIdArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteCustomSdmGoalDisplayByIdArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteCustomSdmBuildIdentifierByIdArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteCustomSdmDeployEnablementByIdArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteCustomSdmVersionByIdArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteCustomSdmGoalSetBadgeByIdArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteCustomSdmPreferenceByIdArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteCustomSdmRepoProvenanceByIdArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteCustomPolicyLogByIdArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteCustomPolicyComplianceByIdArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteCustomPolicyTargetStreamByIdArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteCustomPolicyTargetByIdArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteCustomLifecycleAttachmentByIdArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteCustomAspectRegistrationByIdArgs = {
  id: Scalars['ID'];
};


export type MutationSetChatUserPreferenceArgs = {
  chatTeamId?: Maybe<Scalars['String']>;
  chatUserId?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};


export type MutationSetChatTeamPreferenceArgs = {
  chatTeamId?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};


export type MutationCreateSlackChannelArgs = {
  chatTeamId?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};


export type MutationAddBotToSlackChannelArgs = {
  chatTeamId?: Maybe<Scalars['String']>;
  channelId?: Maybe<Scalars['String']>;
};


export type MutationInviteUserToSlackChannelArgs = {
  chatTeamId?: Maybe<Scalars['String']>;
  channelId?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
};


export type MutationKickUserFromSlackChannelArgs = {
  chatTeamId?: Maybe<Scalars['String']>;
  channelId?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
};


export type MutationSetOwnerLoginArgs = {
  owner?: Maybe<Scalars['String']>;
  providerId?: Maybe<Scalars['String']>;
  login?: Maybe<Scalars['String']>;
};


export type MutationSetRepoLoginArgs = {
  repo?: Maybe<Scalars['String']>;
  owner?: Maybe<Scalars['String']>;
  providerId?: Maybe<Scalars['String']>;
  login?: Maybe<Scalars['String']>;
};


export type MutationSetTeamPropertiesArgs = {
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  iconUrl?: Maybe<Scalars['String']>;
};

export type Notification = {
  __typename?: 'Notification';
  actions?: Maybe<Array<Maybe<NotificationAction>>>;
  body: Scalars['String'];
  contentType: Scalars['String'];
  correlationId: Scalars['String'];
  key: Scalars['String'];
  post?: Maybe<Scalars['String']>;
  recipient?: Maybe<NotificationRecipient>;
  ts: Scalars['Int'];
  ttl?: Maybe<Scalars['Int']>;
  /** The ID of this Notification */
  id?: Maybe<Scalars['ID']>;
};


export type NotificationRecipientArgs = {
  address?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type NotificationAction = {
  __typename?: 'NotificationAction';
  command?: Maybe<Scalars['String']>;
  parameterName?: Maybe<Scalars['String']>;
  parameterOptionGroups?: Maybe<Array<Maybe<NotificationActionParameterOptionGroup>>>;
  parameterOptions?: Maybe<Array<Maybe<NotificationActionParameterOption>>>;
  parameters?: Maybe<Array<Maybe<NotificationActionParameter>>>;
  registration?: Maybe<Scalars['String']>;
  role?: Maybe<Scalars['String']>;
  text?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

export type NotificationActionGroup = {
  __typename?: 'NotificationActionGroup';
  actions?: Maybe<Array<Maybe<CardAction>>>;
  text?: Maybe<Scalars['String']>;
};

export type NotificationActionParameter = {
  __typename?: 'NotificationActionParameter';
  name?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export type NotificationActionParameterOption = {
  __typename?: 'NotificationActionParameterOption';
  name?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export type NotificationActionParameterOptionGroup = {
  __typename?: 'NotificationActionParameterOptionGroup';
  name?: Maybe<Scalars['String']>;
  options?: Maybe<Array<Maybe<NotificationActionParameterOption>>>;
};

export type NotificationRecipient = {
  __typename?: 'NotificationRecipient';
  address: Scalars['String'];
};

export type NpmDependency = SourceFingerprint & {
  __typename?: 'NpmDependency';
  data?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  displayType?: Maybe<Scalars['String']>;
  displayValue?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  name: Scalars['String'];
  sha: Scalars['String'];
  type: Scalars['String'];
  version: Scalars['String'];
};

export type NpmJsRegistryProvider = ResourceProvider & NpmRegistryProvider & {
  __typename?: 'NpmJSRegistryProvider';
  url: Scalars['String'];
  scope?: Maybe<Scalars['String']>;
  credential?: Maybe<Credential>;
  _typenames?: Maybe<Array<Maybe<Scalars['String']>>>;
  _id: Scalars['Int'];
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  team: Team;
  authProviderId?: Maybe<Scalars['String']>;
  state?: Maybe<ResourceProviderState>;
  webhooks?: Maybe<Array<Maybe<Webhook>>>;
  createdAt: Scalars['String'];
  updatedAt: Scalars['String'];
  createdBy?: Maybe<Person>;
  updatedBy?: Maybe<Person>;
  metadata?: Maybe<ResourceProviderMetadata>;
};


export type NpmJsRegistryProviderWebhooksArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type NpmJsRegistryProviderInput = {
  scope?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

export type NpmRegistryProvider = {
  _id: Scalars['Int'];
  id: Scalars['ID'];
  team: Team;
  createdAt: Scalars['String'];
  updatedAt: Scalars['String'];
  createdBy?: Maybe<Person>;
  updatedBy?: Maybe<Person>;
  metadata?: Maybe<ResourceProviderMetadata>;
  url: Scalars['String'];
  scope?: Maybe<Scalars['String']>;
};

export type OAuthInput = {
  secret: Scalars['String'];
  scopes: Array<Scalars['String']>;
};

export type OAuthToken = Credential & {
  __typename?: 'OAuthToken';
  owner: ScmId;
  scopes: Array<Scalars['String']>;
  secret: Scalars['String'];
  _typenames?: Maybe<Array<Maybe<Scalars['String']>>>;
  _id: Scalars['Int'];
  id: Scalars['ID'];
};

export type Ok = {
  __typename?: 'Ok';
  ok: Scalars['Boolean'];
};

/** A scheduled event for generic time-based triggering */
export type OnSchedule = {
  __typename?: 'OnSchedule';
  /** The name of the configuration that fired this event */
  configurationName: Scalars['String'];
  /** The parameterName that this schedule is associated with */
  parameterName: Scalars['String'];
};

export type Org = {
  __typename?: 'Org';
  _id?: Maybe<Scalars['Int']>;
  url?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  owner?: Maybe<Scalars['String']>;
  ownerType?: Maybe<OwnerType>;
  avatarUrl?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  initializationState?: Maybe<OrgInitializationState>;
  installation?: Maybe<GitHubAppInstallation>;
  provider?: Maybe<GitHubProvider>;
  scmProvider?: Maybe<ScmProvider>;
  repo?: Maybe<Array<Maybe<Repo>>>;
  repos?: Maybe<Array<Maybe<Repo>>>;
  chatTeam?: Maybe<ChatTeam>;
  team?: Maybe<Team>;
};


export type OrgProviderArgs = {
  id?: Maybe<Scalars['ID']>;
  url?: Maybe<Scalars['String']>;
  providerId?: Maybe<Scalars['String']>;
  apiUrl?: Maybe<Scalars['String']>;
  gitUrl?: Maybe<Scalars['String']>;
  providerType?: Maybe<ProviderType>;
};


export type OrgScmProviderArgs = {
  id?: Maybe<Scalars['ID']>;
  url?: Maybe<Scalars['String']>;
  providerId?: Maybe<Scalars['String']>;
  apiUrl?: Maybe<Scalars['String']>;
  gitUrl?: Maybe<Scalars['String']>;
  providerType?: Maybe<ProviderType>;
};


export type OrgRepoArgs = {
  id?: Maybe<Scalars['ID']>;
  owner?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  allowRebaseMerge?: Maybe<Scalars['Boolean']>;
  allowSquashMerge?: Maybe<Scalars['Boolean']>;
  allowMergeCommit?: Maybe<Scalars['Boolean']>;
  repoId?: Maybe<Scalars['String']>;
  gitHubId?: Maybe<Scalars['String']>;
  orderBy?: Maybe<Array<Maybe<_RepoOrdering>>>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  defaultBranch?: Maybe<Scalars['String']>;
};


export type OrgReposArgs = {
  id?: Maybe<Scalars['ID']>;
  owner?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  allowRebaseMerge?: Maybe<Scalars['Boolean']>;
  allowSquashMerge?: Maybe<Scalars['Boolean']>;
  allowMergeCommit?: Maybe<Scalars['Boolean']>;
  repoId?: Maybe<Scalars['String']>;
  gitHubId?: Maybe<Scalars['String']>;
  orderBy?: Maybe<Array<Maybe<_RepoOrdering>>>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  defaultBranch?: Maybe<Scalars['String']>;
};


export type OrgChatTeamArgs = {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  provider?: Maybe<Scalars['String']>;
  tenantId?: Maybe<Scalars['String']>;
  domain?: Maybe<Scalars['String']>;
  messageCount?: Maybe<Scalars['Float']>;
  emailDomain?: Maybe<Scalars['String']>;
};


export type OrgTeamArgs = {
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  iconUrl?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['String']>;
};

export enum OrgInitializationState {
  Initializing = 'initializing',
  Initialized = 'initialized'
}

/** a GitHub Owner (like an Org) can set a login to be used for background tasks */
export type OwnerLogin = {
  __typename?: 'OwnerLogin';
  /** The owner name for the Organization/Team */
  owner?: Maybe<Scalars['String']>;
  /** The id of the git provider for this Owner */
  providerId?: Maybe<Scalars['String']>;
  /** The login that should be used */
  login?: Maybe<Scalars['String']>;
};

export enum OwnerType {
  User = 'user',
  Organization = 'organization'
}

export type PagingInfo = {
  __typename?: 'PagingInfo';
  /** If present, indicates that there are more results */
  after?: Maybe<Scalars['String']>;
};

export type PagingInfoInput = {
  after?: Maybe<Scalars['String']>;
};

export type Password = Credential & {
  __typename?: 'Password';
  owner: ResourceUser;
  secret: Scalars['String'];
  _typenames?: Maybe<Array<Maybe<Scalars['String']>>>;
  _id: Scalars['Int'];
  id: Scalars['ID'];
};

export type PasswordInput = {
  secret: Scalars['String'];
};

/** Person-Node */
export type Person = {
  __typename?: 'Person';
  /** internal node id */
  _id?: Maybe<Scalars['Int']>;
  /** id of  Person */
  id?: Maybe<Scalars['ID']>;
  /** forename of  Person */
  forename?: Maybe<Scalars['String']>;
  /** surname of  Person */
  surname?: Maybe<Scalars['String']>;
  /** name of  Person */
  name?: Maybe<Scalars['String']>;
  resourceUsers?: Maybe<Array<Maybe<ResourceUser>>>;
  /** Person scmId SCMId */
  scmId?: Maybe<ScmId>;
  /** Person gitHubId GitHubId */
  gitHubId?: Maybe<GitHubId>;
  /** Person chatId ChatId */
  chatId?: Maybe<ChatId>;
  /** Person emails Email */
  emails?: Maybe<Array<Maybe<Email>>>;
  /** Person team Team */
  team?: Maybe<Team>;
};


/** Person-Node */
export type PersonResourceUsersArgs = {
  login?: Maybe<Scalars['String']>;
};


/** Person-Node */
export type PersonScmIdArgs = {
  login?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  avatar?: Maybe<Scalars['String']>;
};


/** Person-Node */
export type PersonGitHubIdArgs = {
  login?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};


/** Person-Node */
export type PersonChatIdArgs = {
  id?: Maybe<Scalars['ID']>;
  screenName?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
  provider?: Maybe<Scalars['String']>;
  isAtomistBot?: Maybe<Scalars['String']>;
  isOwner?: Maybe<Scalars['String']>;
  isPrimaryOwner?: Maybe<Scalars['String']>;
  isAdmin?: Maybe<Scalars['String']>;
  isBot?: Maybe<Scalars['String']>;
  timezoneLabel?: Maybe<Scalars['String']>;
};


/** Person-Node */
export type PersonEmailsArgs = {
  orderBy?: Maybe<Array<Maybe<_EmailOrdering>>>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  address?: Maybe<Scalars['String']>;
};


/** Person-Node */
export type PersonTeamArgs = {
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  iconUrl?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['String']>;
};

/** Pipeline-Node */
export type Pipeline = {
  __typename?: 'Pipeline';
  /** internal node id */
  _id?: Maybe<Scalars['Int']>;
  /** Pipeline status */
  status?: Maybe<PipelineStatus>;
  /** Pipieline provider */
  provider?: Maybe<PipelineProvider>;
  /** Source id of the pipeline from the provider */
  pipelineId?: Maybe<Scalars['ID']>;
  /** The time this Pipeline was created */
  createdAt?: Maybe<Scalars['String']>;
  /** The time this Pipeline finished. Empty if not finished. */
  finishedAt?: Maybe<Scalars['String']>;
  /** The repo this pipeline ran against */
  repo?: Maybe<Repo>;
  /** The push that triggered this pipeline if applicable */
  push?: Maybe<Push>;
  /** The commit associated with this pipeline if applicable */
  commit?: Maybe<Commit>;
  /** The set of stages associated with this pipeline */
  stages?: Maybe<Array<Maybe<Stage>>>;
};

/** Enum for the PipelineProviders */
export enum PipelineProvider {
  /** Gitlab CI Pipeline */
  GitlabCi = 'gitlab_ci'
}

/** Enum for PipelineStatus */
export enum PipelineStatus {
  Running = 'running',
  Pending = 'pending',
  Success = 'success',
  Failed = 'failed',
  Canceled = 'canceled',
  Skipped = 'skipped',
  Manual = 'manual'
}

export enum PolicyCompliaceState {
  Created = 'created',
  InReview = 'in_review',
  Reviewed = 'reviewed'
}

export type PolicyCompliance = {
  __typename?: 'PolicyCompliance';
  _branch?: Maybe<Scalars['String']>;
  _owner?: Maybe<Scalars['String']>;
  _repo?: Maybe<Scalars['String']>;
  _sha?: Maybe<Scalars['String']>;
  aspects?: Maybe<Array<Maybe<PolicyComplianceAspect>>>;
  differences?: Maybe<Array<Maybe<PolicyComplianceFingerprint>>>;
  owner?: Maybe<Scalars['String']>;
  push?: Maybe<Push>;
  state?: Maybe<PolicyCompliaceState>;
  targets?: Maybe<Array<Maybe<PolicyComplianceFingerprint>>>;
  ts?: Maybe<Scalars['Int']>;
  /** The ID of this PolicyCompliance */
  id?: Maybe<Scalars['ID']>;
};

export type PolicyComplianceAspect = {
  __typename?: 'PolicyComplianceAspect';
  displayType?: Maybe<Scalars['String']>;
  manageable?: Maybe<Scalars['Boolean']>;
  type?: Maybe<Scalars['String']>;
};

export type PolicyComplianceFingerprint = {
  __typename?: 'PolicyComplianceFingerprint';
  data?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  displayType?: Maybe<Scalars['String']>;
  displayValue?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  sha?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

export type PolicyLog = {
  __typename?: 'PolicyLog';
  apply?: Maybe<ApplyPolicyLog>;
  manage?: Maybe<ManageTargetPolicyLog>;
  name?: Maybe<Scalars['String']>;
  subscribe?: Maybe<ManageSubscriptionPolicyLog>;
  ts?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
  /** The ID of this PolicyLog */
  id?: Maybe<Scalars['ID']>;
};


export type PolicyLogSubscribeArgs = {
  owner?: Maybe<Scalars['String']>;
  repo?: Maybe<Scalars['String']>;
  branch?: Maybe<Scalars['String']>;
};

export type PolicyTarget = {
  __typename?: 'PolicyTarget';
  data?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  displayValue?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  sha?: Maybe<Scalars['String']>;
  streams?: Maybe<Array<Maybe<Scalars['ID']>>>;
  type?: Maybe<Scalars['String']>;
  /** The ID of this PolicyTarget */
  id?: Maybe<Scalars['ID']>;
};

export type PolicyTargetStream = {
  __typename?: 'PolicyTargetStream';
  name?: Maybe<Scalars['String']>;
  /** The ID of this PolicyTargetStream */
  id?: Maybe<Scalars['ID']>;
};

/** Enum for ProviderType */
export enum ProviderType {
  BitbucketCloud = 'bitbucket_cloud',
  GithubCom = 'github_com',
  Ghe = 'ghe',
  Bitbucket = 'bitbucket',
  Gitlab = 'gitlab'
}

/** PullRequest-Node */
export type PullRequest = {
  __typename?: 'PullRequest';
  /** internal node id */
  _id?: Maybe<Scalars['Int']>;
  /** the URL of the PullRequest */
  url?: Maybe<Scalars['String']>;
  /** id of  PullRequest */
  id?: Maybe<Scalars['ID']>;
  /** number of  PullRequest */
  number?: Maybe<Scalars['Float']>;
  /** prId of  PullRequest */
  prId?: Maybe<Scalars['String']>;
  /** name of  PullRequest */
  name?: Maybe<Scalars['String']>;
  /** body of  PullRequest */
  body?: Maybe<Scalars['String']>;
  /** state of  PullRequest */
  state?: Maybe<Scalars['String']>;
  /** merged of  PullRequest */
  merged?: Maybe<Scalars['Boolean']>;
  /** timestamp of  PullRequest */
  timestamp?: Maybe<Scalars['String']>;
  /** baseBranchName of  PullRequest */
  baseBranchName?: Maybe<Scalars['String']>;
  /** branchName of  PullRequest */
  branchName?: Maybe<Scalars['String']>;
  /** title of  PullRequest */
  title?: Maybe<Scalars['String']>;
  /** createdAt of  PullRequest */
  createdAt?: Maybe<Scalars['String']>;
  /** updatedAt of  PullRequest */
  updatedAt?: Maybe<Scalars['String']>;
  /** closedAt of  PullRequest */
  closedAt?: Maybe<Scalars['String']>;
  /** mergedAt of  PullRequest */
  mergedAt?: Maybe<Scalars['String']>;
  /** mergeStatus of  PullRequest */
  mergeStatus?: Maybe<MergeStatus>;
  /** action of  PullRequest */
  action?: Maybe<PullRequestAction>;
  /** PullRequest repo Repo */
  repo?: Maybe<Repo>;
  /** PullRequest head Commit */
  head?: Maybe<Commit>;
  /** PullRequest base Commit */
  base?: Maybe<Commit>;
  /** PullRequest mergeCommit Commit */
  mergeCommit?: Maybe<Commit>;
  /** PullRequest author SCMId */
  author?: Maybe<ScmId>;
  /** PullRequest merger SCMId */
  merger?: Maybe<ScmId>;
  /** PullRequest assignees SCMId */
  assignees?: Maybe<Array<Maybe<ScmId>>>;
  /** PullRequest commits Commit */
  commits?: Maybe<Array<Maybe<Commit>>>;
  /** PullRequest branch Branch */
  branch?: Maybe<Branch>;
  /** PullRequest sourceBranch Branch */
  sourceBranch?: Maybe<Branch>;
  /** PullRequest destinationBranch Branch */
  destinationBranch?: Maybe<Branch>;
  /** PullRequest labels Label */
  labels?: Maybe<Array<Maybe<Label>>>;
  /** PullRequest reviews Review */
  reviews?: Maybe<Array<Maybe<Review>>>;
  /** PullRequest reviewers SCMId */
  reviewers?: Maybe<Array<Maybe<ScmId>>>;
  /** PullRequest lastAssignedBy SCMId */
  lastAssignedBy?: Maybe<ScmId>;
  /** PullRequest comments Comment */
  comments?: Maybe<Array<Maybe<Comment>>>;
  /** PullRequest builds Build */
  builds?: Maybe<Array<Maybe<Build>>>;
};


/** PullRequest-Node */
export type PullRequestRepoArgs = {
  id?: Maybe<Scalars['ID']>;
  owner?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  allowRebaseMerge?: Maybe<Scalars['Boolean']>;
  allowSquashMerge?: Maybe<Scalars['Boolean']>;
  allowMergeCommit?: Maybe<Scalars['Boolean']>;
  repoId?: Maybe<Scalars['String']>;
  gitHubId?: Maybe<Scalars['String']>;
  defaultBranch?: Maybe<Scalars['String']>;
};


/** PullRequest-Node */
export type PullRequestHeadArgs = {
  sha?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
};


/** PullRequest-Node */
export type PullRequestBaseArgs = {
  sha?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
};


/** PullRequest-Node */
export type PullRequestMergeCommitArgs = {
  sha?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
};


/** PullRequest-Node */
export type PullRequestAuthorArgs = {
  login?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  avatar?: Maybe<Scalars['String']>;
};


/** PullRequest-Node */
export type PullRequestMergerArgs = {
  login?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  avatar?: Maybe<Scalars['String']>;
};


/** PullRequest-Node */
export type PullRequestAssigneesArgs = {
  login?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  orderBy?: Maybe<Array<Maybe<_ScmIdOrdering>>>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  avatar?: Maybe<Scalars['String']>;
};


/** PullRequest-Node */
export type PullRequestCommitsArgs = {
  sha?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  orderBy?: Maybe<Array<Maybe<_CommitOrdering>>>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  timestamp?: Maybe<Scalars['String']>;
};


/** PullRequest-Node */
export type PullRequestBranchArgs = {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
  isRemote?: Maybe<Scalars['Boolean']>;
  remoteRepoHtmlUrl?: Maybe<Scalars['String']>;
};


/** PullRequest-Node */
export type PullRequestSourceBranchArgs = {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
  isRemote?: Maybe<Scalars['Boolean']>;
  remoteRepoHtmlUrl?: Maybe<Scalars['String']>;
};


/** PullRequest-Node */
export type PullRequestDestinationBranchArgs = {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
  isRemote?: Maybe<Scalars['Boolean']>;
  remoteRepoHtmlUrl?: Maybe<Scalars['String']>;
};


/** PullRequest-Node */
export type PullRequestLabelsArgs = {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  default?: Maybe<Scalars['String']>;
  orderBy?: Maybe<Array<Maybe<_LabelOrdering>>>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  color?: Maybe<Scalars['String']>;
};


/** PullRequest-Node */
export type PullRequestReviewsArgs = {
  id?: Maybe<Scalars['ID']>;
  gitHubId?: Maybe<Scalars['String']>;
  reviewId?: Maybe<Scalars['String']>;
  body?: Maybe<Scalars['String']>;
  state?: Maybe<ReviewState>;
  submittedAt?: Maybe<Scalars['String']>;
  orderBy?: Maybe<Array<Maybe<_ReviewOrdering>>>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  htmlUrl?: Maybe<Scalars['String']>;
  filter?: Maybe<_ReviewFilter>;
};


/** PullRequest-Node */
export type PullRequestReviewersArgs = {
  login?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  orderBy?: Maybe<Array<Maybe<_ScmIdOrdering>>>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  avatar?: Maybe<Scalars['String']>;
};


/** PullRequest-Node */
export type PullRequestLastAssignedByArgs = {
  login?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  avatar?: Maybe<Scalars['String']>;
};


/** PullRequest-Node */
export type PullRequestCommentsArgs = {
  id?: Maybe<Scalars['ID']>;
  body?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  commentId?: Maybe<Scalars['String']>;
  gitHubId?: Maybe<Scalars['String']>;
  path?: Maybe<Scalars['String']>;
  position?: Maybe<Scalars['String']>;
  htmlUrl?: Maybe<Scalars['String']>;
  orderBy?: Maybe<Array<Maybe<_CommentOrdering>>>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  commentType?: Maybe<CommentCommentType>;
};


/** PullRequest-Node */
export type PullRequestBuildsArgs = {
  id?: Maybe<Scalars['ID']>;
  buildId?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  status?: Maybe<BuildStatus>;
  buildUrl?: Maybe<Scalars['String']>;
  compareUrl?: Maybe<Scalars['String']>;
  trigger?: Maybe<BuildTrigger>;
  provider?: Maybe<Scalars['String']>;
  pullRequestNumber?: Maybe<Scalars['Float']>;
  startedAt?: Maybe<Scalars['String']>;
  finishedAt?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
  workflowId?: Maybe<Scalars['String']>;
  jobName?: Maybe<Scalars['String']>;
  jobId?: Maybe<Scalars['String']>;
  orderBy?: Maybe<Array<Maybe<_BuildOrdering>>>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  data?: Maybe<Scalars['String']>;
};

export enum PullRequestAction {
  Assigned = 'assigned',
  Created = 'created',
  Unassigned = 'unassigned',
  ReviewRequested = 'review_requested',
  ReviewRequestRemoved = 'review_request_removed',
  Labeled = 'labeled',
  Unlabeled = 'unlabeled',
  Opened = 'opened',
  Edited = 'edited',
  Closed = 'closed',
  Reopened = 'reopened',
  Synchronize = 'synchronize',
  Submitted = 'submitted',
  ReadyForReview = 'ready_for_review'
}

/** PullRequestImpact-Node */
export type PullRequestImpact = {
  __typename?: 'PullRequestImpact';
  /** internal node id */
  _id?: Maybe<Scalars['Int']>;
  /** id of  PullRequestImpact */
  id?: Maybe<Scalars['ID']>;
  /** url of  PullRequestImpact */
  url?: Maybe<Scalars['String']>;
  /** data of  PullRequestImpact */
  data?: Maybe<Scalars['String']>;
  /** PullRequestImpact pullRequest PullRequest */
  pullRequest?: Maybe<PullRequest>;
};


/** PullRequestImpact-Node */
export type PullRequestImpactPullRequestArgs = {
  id?: Maybe<Scalars['ID']>;
  number?: Maybe<Scalars['Float']>;
  prId?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  body?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  merged?: Maybe<Scalars['Boolean']>;
  timestamp?: Maybe<Scalars['String']>;
  baseBranchName?: Maybe<Scalars['String']>;
  branchName?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  closedAt?: Maybe<Scalars['String']>;
  mergedAt?: Maybe<Scalars['String']>;
  mergeStatus?: Maybe<MergeStatus>;
};

/** Push-Node */
export type Push = {
  __typename?: 'Push';
  /** internal node id */
  _id?: Maybe<Scalars['Int']>;
  /** id of  Push */
  id?: Maybe<Scalars['ID']>;
  /** timestamp of  Push */
  timestamp?: Maybe<Scalars['String']>;
  /** branch of  Push */
  branch?: Maybe<Scalars['String']>;
  toBranch?: Maybe<Branch>;
  /** Push after Commit */
  after?: Maybe<Commit>;
  /** Push before Commit */
  before?: Maybe<Commit>;
  /** Push commits Commit */
  commits?: Maybe<Array<Maybe<Commit>>>;
  /** Push repo Repo */
  repo?: Maybe<Repo>;
  /** Push builds Build */
  builds?: Maybe<Array<Maybe<Build>>>;
  /** Pipelines associated with this Push */
  pipelines?: Maybe<Array<Maybe<Pipeline>>>;
  goals?: Maybe<Array<Maybe<SdmGoal>>>;
  goalSets?: Maybe<Array<Maybe<SdmGoalSet>>>;
  goalsDisplayState?: Maybe<Array<Maybe<SdmGoalDisplay>>>;
  compliance?: Maybe<Array<Maybe<PolicyCompliance>>>;
};


/** Push-Node */
export type PushAfterArgs = {
  sha?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
};


/** Push-Node */
export type PushBeforeArgs = {
  sha?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
};


/** Push-Node */
export type PushCommitsArgs = {
  sha?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  orderBy?: Maybe<Array<Maybe<_CommitOrdering>>>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  timestamp?: Maybe<Scalars['String']>;
};


/** Push-Node */
export type PushRepoArgs = {
  id?: Maybe<Scalars['ID']>;
  owner?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  allowRebaseMerge?: Maybe<Scalars['Boolean']>;
  allowSquashMerge?: Maybe<Scalars['Boolean']>;
  allowMergeCommit?: Maybe<Scalars['Boolean']>;
  repoId?: Maybe<Scalars['String']>;
  gitHubId?: Maybe<Scalars['String']>;
  defaultBranch?: Maybe<Scalars['String']>;
};


/** Push-Node */
export type PushBuildsArgs = {
  id?: Maybe<Scalars['ID']>;
  buildId?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  status?: Maybe<BuildStatus>;
  buildUrl?: Maybe<Scalars['String']>;
  compareUrl?: Maybe<Scalars['String']>;
  trigger?: Maybe<BuildTrigger>;
  provider?: Maybe<Scalars['String']>;
  pullRequestNumber?: Maybe<Scalars['Float']>;
  startedAt?: Maybe<Scalars['String']>;
  finishedAt?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
  workflowId?: Maybe<Scalars['String']>;
  jobName?: Maybe<Scalars['String']>;
  jobId?: Maybe<Scalars['String']>;
  orderBy?: Maybe<Array<Maybe<_BuildOrdering>>>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  data?: Maybe<Scalars['String']>;
};


/** Push-Node */
export type PushPipelinesArgs = {
  pipelineId?: Maybe<Scalars['ID']>;
};


/** Push-Node */
export type PushGoalsArgs = {
  approvalRequired?: Maybe<Array<Maybe<Scalars['Boolean']>>>;
  branch?: Maybe<Array<Maybe<Scalars['String']>>>;
  data?: Maybe<Array<Maybe<Scalars['String']>>>;
  description?: Maybe<Array<Maybe<Scalars['String']>>>;
  environment?: Maybe<Array<Maybe<Scalars['String']>>>;
  error?: Maybe<Array<Maybe<Scalars['String']>>>;
  externalKey?: Maybe<Array<Maybe<Scalars['String']>>>;
  externalUrl?: Maybe<Array<Maybe<Scalars['String']>>>;
  goalSet?: Maybe<Array<Maybe<Scalars['String']>>>;
  goalSetId?: Maybe<Array<Maybe<Scalars['String']>>>;
  name?: Maybe<Array<Maybe<Scalars['String']>>>;
  parameters?: Maybe<Array<Maybe<Scalars['String']>>>;
  phase?: Maybe<Array<Maybe<Scalars['String']>>>;
  preApprovalRequired?: Maybe<Array<Maybe<Scalars['Boolean']>>>;
  registration?: Maybe<Array<Maybe<Scalars['String']>>>;
  retryFeasible?: Maybe<Array<Maybe<Scalars['Boolean']>>>;
  sha?: Maybe<Array<Maybe<Scalars['String']>>>;
  signature?: Maybe<Array<Maybe<Scalars['String']>>>;
  state?: Maybe<Array<Maybe<SdmGoalState>>>;
  ts?: Maybe<Array<Maybe<Scalars['Int']>>>;
  uniqueName?: Maybe<Array<Maybe<Scalars['String']>>>;
  url?: Maybe<Array<Maybe<Scalars['String']>>>;
  version?: Maybe<Array<Maybe<Scalars['Int']>>>;
};


/** Push-Node */
export type PushGoalSetsArgs = {
  branch?: Maybe<Array<Maybe<Scalars['String']>>>;
  goalSet?: Maybe<Array<Maybe<Scalars['String']>>>;
  goalSetId?: Maybe<Array<Maybe<Scalars['String']>>>;
  sha?: Maybe<Array<Maybe<Scalars['String']>>>;
  state?: Maybe<Array<Maybe<SdmGoalState>>>;
  ts?: Maybe<Array<Maybe<Scalars['Int']>>>;
};


/** Push-Node */
export type PushGoalsDisplayStateArgs = {
  branch?: Maybe<Array<Maybe<Scalars['String']>>>;
  format?: Maybe<Array<Maybe<SdmGoalDisplayFormat>>>;
  sha?: Maybe<Array<Maybe<Scalars['String']>>>;
  state?: Maybe<Array<Maybe<SdmGoalDisplayState>>>;
  ts?: Maybe<Array<Maybe<Scalars['Int']>>>;
};


/** Push-Node */
export type PushComplianceArgs = {
  _branch?: Maybe<Array<Maybe<Scalars['String']>>>;
  _owner?: Maybe<Array<Maybe<Scalars['String']>>>;
  _repo?: Maybe<Array<Maybe<Scalars['String']>>>;
  _sha?: Maybe<Array<Maybe<Scalars['String']>>>;
  owner?: Maybe<Array<Maybe<Scalars['String']>>>;
  state?: Maybe<Array<Maybe<PolicyCompliaceState>>>;
  ts?: Maybe<Array<Maybe<Scalars['Int']>>>;
};

/** PushImpact-Node */
export type PushImpact = {
  __typename?: 'PushImpact';
  /** internal node id */
  _id?: Maybe<Scalars['Int']>;
  /** id of  PushImpact */
  id?: Maybe<Scalars['ID']>;
  /** url of  PushImpact */
  url?: Maybe<Scalars['String']>;
  /** data of  PushImpact */
  data?: Maybe<Scalars['String']>;
  /** PushImpact push Push */
  push?: Maybe<Push>;
};


/** PushImpact-Node */
export type PushImpactPushArgs = {
  id?: Maybe<Scalars['ID']>;
  timestamp?: Maybe<Scalars['String']>;
  branch?: Maybe<Scalars['String']>;
};

export type PushLink = {
  afterSha: Scalars['String'];
  branchName: Scalars['String'];
};

export type Query = {
  __typename?: 'Query';
  AtomistSkill: Array<ConfiguredAtomistSkill>;
  activeSkill?: Maybe<ConfiguredAtomistSkill>;
  getSkill?: Maybe<ConfiguredAtomistSkill>;
  skillExecution?: Maybe<AtomistSkillExecution>;
  skillExecutions: Array<AtomistSkillExecution>;
  skills: AtomistSkills;
  TeamConfiguration?: Maybe<Array<Maybe<TeamConfiguration>>>;
  listDisabledRegistrations?: Maybe<Array<Maybe<AtomistRegistration>>>;
  Issue?: Maybe<Array<Maybe<Issue>>>;
  Comment?: Maybe<Array<Maybe<Comment>>>;
  Label?: Maybe<Array<Maybe<Label>>>;
  Repo?: Maybe<Array<Maybe<Repo>>>;
  Commit?: Maybe<Array<Maybe<Commit>>>;
  Push?: Maybe<Array<Maybe<Push>>>;
  Build?: Maybe<Array<Maybe<Build>>>;
  Pipeline?: Maybe<Array<Maybe<Pipeline>>>;
  Stage?: Maybe<Array<Maybe<Stage>>>;
  Job?: Maybe<Array<Maybe<Job>>>;
  Workflow?: Maybe<Array<Maybe<Workflow>>>;
  Branch?: Maybe<Array<Maybe<Branch>>>;
  DeletedBranch?: Maybe<Array<Maybe<DeletedBranch>>>;
  ChatId?: Maybe<Array<Maybe<ChatId>>>;
  ChatChannel?: Maybe<Array<Maybe<ChatChannel>>>;
  PullRequest?: Maybe<Array<Maybe<PullRequest>>>;
  Org?: Maybe<Array<Maybe<Org>>>;
  GitHubAppInstallation?: Maybe<Array<Maybe<GitHubAppInstallation>>>;
  SCMId?: Maybe<Array<Maybe<ScmId>>>;
  GitHubAppResourceUser?: Maybe<Array<Maybe<GitHubAppResourceUser>>>;
  GitHubId?: Maybe<Array<Maybe<GitHubId>>>;
  Tag?: Maybe<Array<Maybe<Tag>>>;
  K8Pod?: Maybe<Array<Maybe<K8Pod>>>;
  K8Container?: Maybe<Array<Maybe<K8Container>>>;
  DockerImage?: Maybe<Array<Maybe<DockerImage>>>;
  ImageLinked?: Maybe<Array<Maybe<ImageLinked>>>;
  Release?: Maybe<Array<Maybe<Release>>>;
  HerokuApp?: Maybe<Array<Maybe<HerokuApp>>>;
  Application?: Maybe<Array<Maybe<Application>>>;
  Team?: Maybe<Array<Maybe<Team>>>;
  ChatTeam?: Maybe<Array<Maybe<ChatTeam>>>;
  Person?: Maybe<Array<Maybe<Person>>>;
  Status?: Maybe<Array<Maybe<Status>>>;
  CheckSuite?: Maybe<Array<Maybe<CheckSuite>>>;
  CheckRun?: Maybe<Array<Maybe<CheckRun>>>;
  Email?: Maybe<Array<Maybe<Email>>>;
  PushImpact?: Maybe<Array<Maybe<PushImpact>>>;
  PullRequestImpact?: Maybe<Array<Maybe<PullRequestImpact>>>;
  GitHubProvider?: Maybe<Array<Maybe<GitHubProvider>>>;
  SCMProvider?: Maybe<Array<Maybe<ScmProvider>>>;
  GitHubAppResourceProvider?: Maybe<Array<Maybe<GitHubAppResourceProvider>>>;
  UserJoinedChannel?: Maybe<Array<Maybe<UserJoinedChannel>>>;
  Webhook?: Maybe<Array<Maybe<Webhook>>>;
  ChannelLink?: Maybe<Array<Maybe<ChannelLink>>>;
  Review?: Maybe<Array<Maybe<Review>>>;
  DockerRegistryProvider?: Maybe<Array<Maybe<DockerRegistryProvider>>>;
  DockerHubRegistryProvider: Array<DockerHubRegistryProvider>;
  GoogleContainerRegistryProvider: Array<GoogleContainerRegistryProvider>;
  JFrogDockerRegistryProvider: Array<JFrogDockerRegistryProvider>;
  DockerRegistry: Array<DockerRegistry>;
  DockerRegistryImage: Array<DockerRegistryImage>;
  GoogleCloudPlatformProvider: Array<GoogleCloudPlatformProvider>;
  KubernetesClusterProvider: Array<KubernetesClusterProvider>;
  ArtifactoryMavenRepositoryProvider: Array<ArtifactoryMavenRepositoryProvider>;
  MavenRepositoryProvider: Array<MavenRepositoryProvider>;
  NpmJSRegistryProvider: Array<NpmJsRegistryProvider>;
  NpmRegistryProvider: Array<NpmRegistryProvider>;
  GitHubNpmRegistryProvider: Array<GitHubNpmRegistryProvider>;
  ResourceProvider?: Maybe<Array<Maybe<ResourceProvider>>>;
  Resource: Array<Resource>;
  GenericResourceUser?: Maybe<Array<Maybe<GenericResourceUser>>>;
  ResourceUser?: Maybe<Array<Maybe<ResourceUser>>>;
  SystemAccount?: Maybe<Array<Maybe<SystemAccount>>>;
  Credential?: Maybe<Array<Maybe<Credential>>>;
  OAuthToken?: Maybe<Array<Maybe<OAuthToken>>>;
  Password?: Maybe<Array<Maybe<Password>>>;
  GenericResourceProvider?: Maybe<Array<Maybe<GenericResourceProvider>>>;
  BinaryRepositoryProvider?: Maybe<Array<Maybe<BinaryRepositoryProvider>>>;
  SecretProvider: Array<SecretProvider>;
  CommitFingerprintImpact: Array<Maybe<CommitFingerprintImpact>>;
  /** Find a single SourceFingerprint by its sha, type and name */
  SourceFingerprint?: Maybe<SourceFingerprint>;
  /** Search for fingerprints, with paging */
  commitsWithFingerprints: CommitsWithFingerprints;
  /** Search find all distinct fingerprints on head commits for type and name */
  distinctHeadCommitFingerprints: Array<SourceFingerprint>;
  fingerprintAggregates?: Maybe<FingerprintAggregates>;
  fingerprintTargets: Array<FingerprintTarget>;
  /** Find the count of all repos that have been analyzed */
  headCommitFingerprintCounts: FingerprintCounts;
  /** Find all repos that contain named fingerprint in the HEAD commit */
  headCommitsWithFingerprint: Array<FingerprintedCommit>;
  /** Return AtmJobs */
  AtmJob?: Maybe<Array<AtmJob>>;
  /** Return AtmJobTasks */
  AtmJobTask?: Maybe<Array<AtmJobTask>>;
  AtomistLog: Array<AtomistLog>;
  ok: Ok;
  /**
   * Generate a report breaking down the number of events submitted by a given team.
   * This query is in beta and may change substantially before being finalized.
   */
  eventsReport: Array<EventsReportRow>;
  /**
   * Generate a report breaking down the number of events which have been throttled for a given team.
   * This query is in beta and may change substantially before being finalized.
   */
  throttledEventsReport: Array<EventsReportRow>;
  /** Auto-generated query for Card */
  Card?: Maybe<Array<Maybe<Card>>>;
  /** Auto-generated query for Notification */
  Notification?: Maybe<Array<Maybe<Notification>>>;
  /** Auto-generated query for CommitIssueRelationship */
  CommitIssueRelationship?: Maybe<Array<Maybe<CommitIssueRelationship>>>;
  /** Auto-generated query for Deployment */
  Deployment?: Maybe<Array<Maybe<Deployment>>>;
  /** Auto-generated query for IssueRelationship */
  IssueRelationship?: Maybe<Array<Maybe<IssueRelationship>>>;
  /** Auto-generated query for SdmGoal */
  SdmGoal?: Maybe<Array<Maybe<SdmGoal>>>;
  /** Auto-generated query for SdmGoalSet */
  SdmGoalSet?: Maybe<Array<Maybe<SdmGoalSet>>>;
  /** Auto-generated query for SdmGoalDisplay */
  SdmGoalDisplay?: Maybe<Array<Maybe<SdmGoalDisplay>>>;
  /** Auto-generated query for SdmBuildIdentifier */
  SdmBuildIdentifier?: Maybe<Array<Maybe<SdmBuildIdentifier>>>;
  /** Auto-generated query for SdmDeployEnablement */
  SdmDeployEnablement?: Maybe<Array<Maybe<SdmDeployEnablement>>>;
  /** Auto-generated query for SdmVersion */
  SdmVersion?: Maybe<Array<Maybe<SdmVersion>>>;
  /** Auto-generated query for SdmGoalSetBadge */
  SdmGoalSetBadge?: Maybe<Array<Maybe<SdmGoalSetBadge>>>;
  /** Auto-generated query for SdmPreference */
  SdmPreference?: Maybe<Array<Maybe<SdmPreference>>>;
  /** Auto-generated query for SdmRepoProvenance */
  SdmRepoProvenance?: Maybe<Array<Maybe<SdmRepoProvenance>>>;
  /** Auto-generated query for PolicyLog */
  PolicyLog?: Maybe<Array<Maybe<PolicyLog>>>;
  /** Auto-generated query for PolicyCompliance */
  PolicyCompliance?: Maybe<Array<Maybe<PolicyCompliance>>>;
  /** Auto-generated query for PolicyTargetStream */
  PolicyTargetStream?: Maybe<Array<Maybe<PolicyTargetStream>>>;
  /** Auto-generated query for PolicyTarget */
  PolicyTarget?: Maybe<Array<Maybe<PolicyTarget>>>;
  /** Auto-generated query for LifecycleAttachment */
  LifecycleAttachment?: Maybe<Array<Maybe<LifecycleAttachment>>>;
  /** Auto-generated query for AspectRegistration */
  AspectRegistration?: Maybe<Array<Maybe<AspectRegistration>>>;
  /** Find a commit by sha */
  commitBySha?: Maybe<Commit>;
  /** Find a Push using after-sha and branch */
  pushBySha?: Maybe<Push>;
  /** Find repo by name, owner and provider id */
  linkedRepo?: Maybe<Repo>;
  /** Find SourceFingerprint by name, owner and provider id */
  linkedFingerprint?: Maybe<SourceFingerprint>;
  /** Fetch a PR by its id */
  pullRequestById?: Maybe<PullRequest>;
};


export type QueryAtomistSkillArgs = {
  id: Scalars['ID'];
};


export type QueryActiveSkillArgs = {
  name: Scalars['String'];
  namespace: Scalars['String'];
};


export type QueryGetSkillArgs = {
  maturity?: Maybe<AtomistSkillMaturityLevel>;
  name: Scalars['String'];
  namespace: Scalars['String'];
  version?: Maybe<Scalars['String']>;
};


export type QuerySkillExecutionArgs = {
  id: Scalars['ID'];
};


export type QuerySkillExecutionsArgs = {
  _after?: Maybe<Scalars['String']>;
  _before?: Maybe<Scalars['String']>;
  _first?: Maybe<Scalars['Int']>;
  _orderBy?: Maybe<AtomistSkillExecutionSortField>;
  _ordering?: Maybe<AtomistSkillExecutionSortOrder>;
  filter?: Maybe<_AtomistSkillExecutionFilter>;
  name?: Maybe<Scalars['String']>;
  namespace?: Maybe<Scalars['String']>;
  version?: Maybe<Scalars['String']>;
  visibility?: Maybe<AtomistSkillExecutionVisibility>;
};


export type QueryTeamConfigurationArgs = {
  namespace?: Maybe<Scalars['String']>;
};


export type QueryIssueArgs = {
  id?: Maybe<Scalars['ID']>;
  number?: Maybe<Scalars['Float']>;
  name?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  body?: Maybe<Scalars['String']>;
  state?: Maybe<IssueState>;
  timestamp?: Maybe<Scalars['String']>;
  action?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  closedAt?: Maybe<Scalars['String']>;
  ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  numbers?: Maybe<Array<Maybe<Scalars['Float']>>>;
  names?: Maybe<Array<Maybe<Scalars['String']>>>;
  titles?: Maybe<Array<Maybe<Scalars['String']>>>;
  bodys?: Maybe<Array<Maybe<Scalars['String']>>>;
  states?: Maybe<Array<Maybe<IssueState>>>;
  timestamps?: Maybe<Array<Maybe<Scalars['String']>>>;
  actions?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAts?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAts?: Maybe<Array<Maybe<Scalars['String']>>>;
  closedAts?: Maybe<Array<Maybe<Scalars['String']>>>;
  orderBy?: Maybe<Array<Maybe<_IssueOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  filter?: Maybe<_IssueFilter>;
};


export type QueryCommentArgs = {
  id?: Maybe<Scalars['ID']>;
  body?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  commentId?: Maybe<Scalars['String']>;
  gitHubId?: Maybe<Scalars['String']>;
  path?: Maybe<Scalars['String']>;
  position?: Maybe<Scalars['String']>;
  htmlUrl?: Maybe<Scalars['String']>;
  commentType?: Maybe<CommentCommentType>;
  ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  bodys?: Maybe<Array<Maybe<Scalars['String']>>>;
  timestamps?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAts?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAts?: Maybe<Array<Maybe<Scalars['String']>>>;
  commentIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  gitHubIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  paths?: Maybe<Array<Maybe<Scalars['String']>>>;
  positions?: Maybe<Array<Maybe<Scalars['String']>>>;
  htmlUrls?: Maybe<Array<Maybe<Scalars['String']>>>;
  commentTypes?: Maybe<Array<Maybe<CommentCommentType>>>;
  orderBy?: Maybe<Array<Maybe<_CommentOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type QueryLabelArgs = {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  default?: Maybe<Scalars['String']>;
  color?: Maybe<Scalars['String']>;
  ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  names?: Maybe<Array<Maybe<Scalars['String']>>>;
  defaults?: Maybe<Array<Maybe<Scalars['String']>>>;
  colors?: Maybe<Array<Maybe<Scalars['String']>>>;
  orderBy?: Maybe<Array<Maybe<_LabelOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type QueryRepoArgs = {
  id?: Maybe<Scalars['ID']>;
  owner?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  allowRebaseMerge?: Maybe<Scalars['Boolean']>;
  allowSquashMerge?: Maybe<Scalars['Boolean']>;
  allowMergeCommit?: Maybe<Scalars['Boolean']>;
  repoId?: Maybe<Scalars['String']>;
  gitHubId?: Maybe<Scalars['String']>;
  defaultBranch?: Maybe<Scalars['String']>;
  ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  owners?: Maybe<Array<Maybe<Scalars['String']>>>;
  names?: Maybe<Array<Maybe<Scalars['String']>>>;
  repoIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  gitHubIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  defaultBranchs?: Maybe<Array<Maybe<Scalars['String']>>>;
  orderBy?: Maybe<Array<Maybe<_RepoOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  filter?: Maybe<_RepoFilter>;
};


export type QueryCommitArgs = {
  id?: Maybe<Scalars['ID']>;
  sha?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
  shas?: Maybe<Array<Maybe<Scalars['String']>>>;
  messages?: Maybe<Array<Maybe<Scalars['String']>>>;
  timestamps?: Maybe<Array<Maybe<Scalars['String']>>>;
  orderBy?: Maybe<Array<Maybe<_CommitOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  filter?: Maybe<_CommitFilter>;
};


export type QueryPushArgs = {
  id?: Maybe<Scalars['ID']>;
  timestamp?: Maybe<Scalars['String']>;
  branch?: Maybe<Scalars['String']>;
  ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  timestamps?: Maybe<Array<Maybe<Scalars['String']>>>;
  branchs?: Maybe<Array<Maybe<Scalars['String']>>>;
  orderBy?: Maybe<Array<Maybe<_PushOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  filter?: Maybe<_PushFilter>;
};


export type QueryBuildArgs = {
  id?: Maybe<Scalars['ID']>;
  buildId?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  status?: Maybe<BuildStatus>;
  buildUrl?: Maybe<Scalars['String']>;
  compareUrl?: Maybe<Scalars['String']>;
  trigger?: Maybe<BuildTrigger>;
  provider?: Maybe<Scalars['String']>;
  pullRequestNumber?: Maybe<Scalars['Float']>;
  startedAt?: Maybe<Scalars['String']>;
  finishedAt?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
  workflowId?: Maybe<Scalars['String']>;
  jobName?: Maybe<Scalars['String']>;
  jobId?: Maybe<Scalars['String']>;
  data?: Maybe<Scalars['String']>;
  ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  buildIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  numbers?: Maybe<Array<Maybe<Scalars['Int']>>>;
  names?: Maybe<Array<Maybe<Scalars['String']>>>;
  statuss?: Maybe<Array<Maybe<BuildStatus>>>;
  buildUrls?: Maybe<Array<Maybe<Scalars['String']>>>;
  compareUrls?: Maybe<Array<Maybe<Scalars['String']>>>;
  triggers?: Maybe<Array<Maybe<BuildTrigger>>>;
  providers?: Maybe<Array<Maybe<Scalars['String']>>>;
  pullRequestNumbers?: Maybe<Array<Maybe<Scalars['Float']>>>;
  startedAts?: Maybe<Array<Maybe<Scalars['String']>>>;
  finishedAts?: Maybe<Array<Maybe<Scalars['String']>>>;
  timestamps?: Maybe<Array<Maybe<Scalars['String']>>>;
  workflowIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  jobNames?: Maybe<Array<Maybe<Scalars['String']>>>;
  jobIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  datas?: Maybe<Array<Maybe<Scalars['String']>>>;
  orderBy?: Maybe<Array<Maybe<_BuildOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type QueryPipelineArgs = {
  _id?: Maybe<Scalars['Int']>;
  pipelineId?: Maybe<Scalars['ID']>;
  provider?: Maybe<Scalars['String']>;
  Status?: Maybe<PipelineStatus>;
};


export type QueryStageArgs = {
  _id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
};


export type QueryJobArgs = {
  _id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  jobId?: Maybe<Scalars['ID']>;
};


export type QueryWorkflowArgs = {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  workflowId?: Maybe<Scalars['String']>;
  provider?: Maybe<Scalars['String']>;
  config?: Maybe<Scalars['String']>;
  ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  names?: Maybe<Array<Maybe<Scalars['String']>>>;
  workflowIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  providers?: Maybe<Array<Maybe<Scalars['String']>>>;
  configs?: Maybe<Array<Maybe<Scalars['String']>>>;
  orderBy?: Maybe<Array<Maybe<_WorkflowOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type QueryBranchArgs = {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
  isRemote?: Maybe<Scalars['Boolean']>;
  remoteRepoHtmlUrl?: Maybe<Scalars['String']>;
  ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  names?: Maybe<Array<Maybe<Scalars['String']>>>;
  timestamps?: Maybe<Array<Maybe<Scalars['String']>>>;
  remoteRepoHtmlUrls?: Maybe<Array<Maybe<Scalars['String']>>>;
  orderBy?: Maybe<Array<Maybe<_BranchOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type QueryDeletedBranchArgs = {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
  ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  names?: Maybe<Array<Maybe<Scalars['String']>>>;
  timestamps?: Maybe<Array<Maybe<Scalars['String']>>>;
  orderBy?: Maybe<Array<Maybe<_DeletedBranchOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type QueryChatIdArgs = {
  id?: Maybe<Scalars['ID']>;
  screenName?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
  provider?: Maybe<Scalars['String']>;
  isAtomistBot?: Maybe<Scalars['String']>;
  isOwner?: Maybe<Scalars['String']>;
  isPrimaryOwner?: Maybe<Scalars['String']>;
  isAdmin?: Maybe<Scalars['String']>;
  isBot?: Maybe<Scalars['String']>;
  timezoneLabel?: Maybe<Scalars['String']>;
  ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  screenNames?: Maybe<Array<Maybe<Scalars['String']>>>;
  userIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  providers?: Maybe<Array<Maybe<Scalars['String']>>>;
  timezoneLabels?: Maybe<Array<Maybe<Scalars['String']>>>;
  orderBy?: Maybe<Array<Maybe<_ChatIdOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type QueryChatChannelArgs = {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  provider?: Maybe<Scalars['String']>;
  normalizedName?: Maybe<Scalars['String']>;
  channelId?: Maybe<Scalars['String']>;
  isDefault?: Maybe<Scalars['Boolean']>;
  botInvitedSelf?: Maybe<Scalars['Boolean']>;
  archived?: Maybe<Scalars['Boolean']>;
  ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  names?: Maybe<Array<Maybe<Scalars['String']>>>;
  providers?: Maybe<Array<Maybe<Scalars['String']>>>;
  normalizedNames?: Maybe<Array<Maybe<Scalars['String']>>>;
  channelIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  orderBy?: Maybe<Array<Maybe<_ChatChannelOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  filter?: Maybe<_ChatChannelFilter>;
};


export type QueryPullRequestArgs = {
  id?: Maybe<Scalars['ID']>;
  number?: Maybe<Scalars['Float']>;
  prId?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  body?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  merged?: Maybe<Scalars['Boolean']>;
  timestamp?: Maybe<Scalars['String']>;
  baseBranchName?: Maybe<Scalars['String']>;
  branchName?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  closedAt?: Maybe<Scalars['String']>;
  mergedAt?: Maybe<Scalars['String']>;
  mergeStatus?: Maybe<MergeStatus>;
  action?: Maybe<PullRequestAction>;
  ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  numbers?: Maybe<Array<Maybe<Scalars['Float']>>>;
  prIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  names?: Maybe<Array<Maybe<Scalars['String']>>>;
  bodys?: Maybe<Array<Maybe<Scalars['String']>>>;
  states?: Maybe<Array<Maybe<Scalars['String']>>>;
  timestamps?: Maybe<Array<Maybe<Scalars['String']>>>;
  baseBranchNames?: Maybe<Array<Maybe<Scalars['String']>>>;
  branchNames?: Maybe<Array<Maybe<Scalars['String']>>>;
  titles?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAts?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAts?: Maybe<Array<Maybe<Scalars['String']>>>;
  closedAts?: Maybe<Array<Maybe<Scalars['String']>>>;
  mergedAts?: Maybe<Array<Maybe<Scalars['String']>>>;
  mergeStatuss?: Maybe<Array<Maybe<MergeStatus>>>;
  actions?: Maybe<Array<Maybe<PullRequestAction>>>;
  orderBy?: Maybe<Array<Maybe<_PullRequestOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  filter?: Maybe<_PullRequestFilter>;
};


export type QueryOrgArgs = {
  id?: Maybe<Scalars['ID']>;
  owner?: Maybe<Scalars['String']>;
  ownerType?: Maybe<OwnerType>;
  ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  owners?: Maybe<Array<Maybe<Scalars['String']>>>;
  ownerTypes?: Maybe<Array<Maybe<OwnerType>>>;
  orderBy?: Maybe<Array<Maybe<_OrgOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  filter?: Maybe<_OrgFilter>;
};


export type QueryGitHubAppInstallationArgs = {
  id?: Maybe<Scalars['ID']>;
  owner?: Maybe<Scalars['String']>;
  ownerType?: Maybe<OwnerType>;
  ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  owners?: Maybe<Array<Maybe<Scalars['String']>>>;
  orderBy?: Maybe<Array<Maybe<_GitHubAppInstallationOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type QueryScmIdArgs = {
  id?: Maybe<Scalars['ID']>;
  login?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  avatar?: Maybe<Scalars['String']>;
  logins?: Maybe<Array<Maybe<Scalars['String']>>>;
  names?: Maybe<Array<Maybe<Scalars['String']>>>;
  avatars?: Maybe<Array<Maybe<Scalars['String']>>>;
  orderBy?: Maybe<Array<Maybe<_ScmIdOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type QueryGitHubAppResourceUserArgs = {
  id?: Maybe<Scalars['ID']>;
  login?: Maybe<Scalars['String']>;
  orderBy?: Maybe<Array<Maybe<_GitHubAppResourceUserOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type QueryGitHubIdArgs = {
  id?: Maybe<Scalars['ID']>;
  login?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  logins?: Maybe<Array<Maybe<Scalars['String']>>>;
  names?: Maybe<Array<Maybe<Scalars['String']>>>;
  orderBy?: Maybe<Array<Maybe<_GitHubIdOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type QueryTagArgs = {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  ref?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
  ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  names?: Maybe<Array<Maybe<Scalars['String']>>>;
  descriptions?: Maybe<Array<Maybe<Scalars['String']>>>;
  refs?: Maybe<Array<Maybe<Scalars['String']>>>;
  timestamps?: Maybe<Array<Maybe<Scalars['String']>>>;
  orderBy?: Maybe<Array<Maybe<_TagOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  filter?: Maybe<_TagFilter>;
};


export type QueryK8PodArgs = {
  name?: Maybe<Scalars['String']>;
  phase?: Maybe<Scalars['String']>;
  environment?: Maybe<Scalars['String']>;
  clusterName?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
  baseName?: Maybe<Scalars['String']>;
  namespace?: Maybe<Scalars['String']>;
  statusJSON?: Maybe<Scalars['String']>;
  host?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  specsJSON?: Maybe<Scalars['String']>;
  envJSON?: Maybe<Scalars['String']>;
  metadataJSON?: Maybe<Scalars['String']>;
  containersCrashLoopBackOff?: Maybe<Scalars['Boolean']>;
  resourceVersion?: Maybe<Scalars['Int']>;
  names?: Maybe<Array<Maybe<Scalars['String']>>>;
  phases?: Maybe<Array<Maybe<Scalars['String']>>>;
  environments?: Maybe<Array<Maybe<Scalars['String']>>>;
  timestamps?: Maybe<Array<Maybe<Scalars['String']>>>;
  baseNames?: Maybe<Array<Maybe<Scalars['String']>>>;
  namespaces?: Maybe<Array<Maybe<Scalars['String']>>>;
  statusJSONs?: Maybe<Array<Maybe<Scalars['String']>>>;
  hosts?: Maybe<Array<Maybe<Scalars['String']>>>;
  states?: Maybe<Array<Maybe<Scalars['String']>>>;
  specsJSONs?: Maybe<Array<Maybe<Scalars['String']>>>;
  envJSONs?: Maybe<Array<Maybe<Scalars['String']>>>;
  metadataJSONs?: Maybe<Array<Maybe<Scalars['String']>>>;
  resourceVersions?: Maybe<Array<Maybe<Scalars['Int']>>>;
  orderBy?: Maybe<Array<Maybe<_K8PodOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  filter?: Maybe<_K8PodFilter>;
};


export type QueryK8ContainerArgs = {
  name?: Maybe<Scalars['String']>;
  imageName?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
  environment?: Maybe<Scalars['String']>;
  clusterName?: Maybe<Scalars['String']>;
  containerJSON?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  stateReason?: Maybe<Scalars['String']>;
  ready?: Maybe<Scalars['Boolean']>;
  restartCount?: Maybe<Scalars['Int']>;
  statusJSON?: Maybe<Scalars['String']>;
  resourceVersion?: Maybe<Scalars['Int']>;
  containerID?: Maybe<Scalars['String']>;
  names?: Maybe<Array<Maybe<Scalars['String']>>>;
  imageNames?: Maybe<Array<Maybe<Scalars['String']>>>;
  timestamps?: Maybe<Array<Maybe<Scalars['String']>>>;
  environments?: Maybe<Array<Maybe<Scalars['String']>>>;
  containerJSONs?: Maybe<Array<Maybe<Scalars['String']>>>;
  states?: Maybe<Array<Maybe<Scalars['String']>>>;
  stateReasons?: Maybe<Array<Maybe<Scalars['String']>>>;
  restartCounts?: Maybe<Array<Maybe<Scalars['Int']>>>;
  statusJSONs?: Maybe<Array<Maybe<Scalars['String']>>>;
  resourceVersions?: Maybe<Array<Maybe<Scalars['Int']>>>;
  containerIDs?: Maybe<Array<Maybe<Scalars['String']>>>;
  orderBy?: Maybe<Array<Maybe<_K8ContainerOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type QueryDockerImageArgs = {
  image?: Maybe<Scalars['String']>;
  imageName?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
  images?: Maybe<Array<Maybe<Scalars['String']>>>;
  imageNames?: Maybe<Array<Maybe<Scalars['String']>>>;
  timestamps?: Maybe<Array<Maybe<Scalars['String']>>>;
  orderBy?: Maybe<Array<Maybe<_DockerImageOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type QueryImageLinkedArgs = {
  timestamp?: Maybe<Scalars['String']>;
  timestamps?: Maybe<Array<Maybe<Scalars['String']>>>;
  orderBy?: Maybe<Array<Maybe<_ImageLinkedOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type QueryReleaseArgs = {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
  ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  names?: Maybe<Array<Maybe<Scalars['String']>>>;
  timestamps?: Maybe<Array<Maybe<Scalars['String']>>>;
  orderBy?: Maybe<Array<Maybe<_ReleaseOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type QueryHerokuAppArgs = {
  app?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
  user?: Maybe<Scalars['String']>;
  appId?: Maybe<Scalars['String']>;
  release?: Maybe<Scalars['String']>;
  apps?: Maybe<Array<Maybe<Scalars['String']>>>;
  urls?: Maybe<Array<Maybe<Scalars['String']>>>;
  timestamps?: Maybe<Array<Maybe<Scalars['String']>>>;
  users?: Maybe<Array<Maybe<Scalars['String']>>>;
  appIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  releases?: Maybe<Array<Maybe<Scalars['String']>>>;
  orderBy?: Maybe<Array<Maybe<_HerokuAppOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type QueryApplicationArgs = {
  id?: Maybe<Scalars['ID']>;
  state?: Maybe<Scalars['String']>;
  host?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
  domain?: Maybe<Scalars['String']>;
  data?: Maybe<Scalars['String']>;
  ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  states?: Maybe<Array<Maybe<Scalars['String']>>>;
  hosts?: Maybe<Array<Maybe<Scalars['String']>>>;
  timestamps?: Maybe<Array<Maybe<Scalars['String']>>>;
  domains?: Maybe<Array<Maybe<Scalars['String']>>>;
  datas?: Maybe<Array<Maybe<Scalars['String']>>>;
  orderBy?: Maybe<Array<Maybe<_ApplicationOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type QueryTeamArgs = {
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  iconUrl?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['String']>;
  ids?: Maybe<Array<Maybe<Scalars['String']>>>;
  names?: Maybe<Array<Maybe<Scalars['String']>>>;
  descriptions?: Maybe<Array<Maybe<Scalars['String']>>>;
  iconUrls?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAts?: Maybe<Array<Maybe<Scalars['String']>>>;
  orderBy?: Maybe<Array<Maybe<_TeamOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type QueryChatTeamArgs = {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  provider?: Maybe<Scalars['String']>;
  tenantId?: Maybe<Scalars['String']>;
  domain?: Maybe<Scalars['String']>;
  messageCount?: Maybe<Scalars['Float']>;
  emailDomain?: Maybe<Scalars['String']>;
  ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  names?: Maybe<Array<Maybe<Scalars['String']>>>;
  providers?: Maybe<Array<Maybe<Scalars['String']>>>;
  domains?: Maybe<Array<Maybe<Scalars['String']>>>;
  messageCounts?: Maybe<Array<Maybe<Scalars['Float']>>>;
  emailDomains?: Maybe<Array<Maybe<Scalars['String']>>>;
  orderBy?: Maybe<Array<Maybe<_ChatTeamOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type QueryPersonArgs = {
  id?: Maybe<Scalars['ID']>;
  forename?: Maybe<Scalars['String']>;
  surname?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  forenames?: Maybe<Array<Maybe<Scalars['String']>>>;
  surnames?: Maybe<Array<Maybe<Scalars['String']>>>;
  names?: Maybe<Array<Maybe<Scalars['String']>>>;
  orderBy?: Maybe<Array<Maybe<_PersonOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type QueryStatusArgs = {
  id?: Maybe<Scalars['ID']>;
  state?: Maybe<StatusState>;
  description?: Maybe<Scalars['String']>;
  targetUrl?: Maybe<Scalars['String']>;
  context?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
  ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  states?: Maybe<Array<Maybe<StatusState>>>;
  descriptions?: Maybe<Array<Maybe<Scalars['String']>>>;
  targetUrls?: Maybe<Array<Maybe<Scalars['String']>>>;
  contexts?: Maybe<Array<Maybe<Scalars['String']>>>;
  timestamps?: Maybe<Array<Maybe<Scalars['String']>>>;
  orderBy?: Maybe<Array<Maybe<_StatusOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type QueryCheckSuiteArgs = {
  id?: Maybe<Scalars['ID']>;
  ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  orderBy?: Maybe<Array<Maybe<_CheckSuiteOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  filter?: Maybe<_CheckSuiteFilter>;
};


export type QueryCheckRunArgs = {
  id?: Maybe<Scalars['ID']>;
  ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  orderBy?: Maybe<Array<Maybe<_CheckRunOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  filter?: Maybe<_CheckRunFilter>;
};


export type QueryEmailArgs = {
  address?: Maybe<Scalars['String']>;
  addresss?: Maybe<Array<Maybe<Scalars['String']>>>;
  orderBy?: Maybe<Array<Maybe<_EmailOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type QueryPushImpactArgs = {
  id?: Maybe<Scalars['ID']>;
  url?: Maybe<Scalars['String']>;
  data?: Maybe<Scalars['String']>;
  ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  urls?: Maybe<Array<Maybe<Scalars['String']>>>;
  datas?: Maybe<Array<Maybe<Scalars['String']>>>;
  orderBy?: Maybe<Array<Maybe<_PushImpactOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type QueryPullRequestImpactArgs = {
  id?: Maybe<Scalars['ID']>;
  url?: Maybe<Scalars['String']>;
  data?: Maybe<Scalars['String']>;
  ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  urls?: Maybe<Array<Maybe<Scalars['String']>>>;
  datas?: Maybe<Array<Maybe<Scalars['String']>>>;
  orderBy?: Maybe<Array<Maybe<_PullRequestImpactOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type QueryGitHubProviderArgs = {
  id?: Maybe<Scalars['ID']>;
  private?: Maybe<Scalars['Boolean']>;
  url?: Maybe<Scalars['String']>;
  providerId?: Maybe<Scalars['String']>;
  apiUrl?: Maybe<Scalars['String']>;
  gitUrl?: Maybe<Scalars['String']>;
  providerType?: Maybe<ProviderType>;
  ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  urls?: Maybe<Array<Maybe<Scalars['String']>>>;
  providerIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  apiUrls?: Maybe<Array<Maybe<Scalars['String']>>>;
  gitUrls?: Maybe<Array<Maybe<Scalars['String']>>>;
  providerTypes?: Maybe<Array<Maybe<ProviderType>>>;
  orderBy?: Maybe<Array<Maybe<_GitHubProviderOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type QueryScmProviderArgs = {
  authProviderId?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  private?: Maybe<Scalars['Boolean']>;
  url?: Maybe<Scalars['String']>;
  providerId?: Maybe<Scalars['String']>;
  apiUrl?: Maybe<Scalars['String']>;
  gitUrl?: Maybe<Scalars['String']>;
  providerType?: Maybe<ProviderType>;
  ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  urls?: Maybe<Array<Maybe<Scalars['String']>>>;
  providerIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  apiUrls?: Maybe<Array<Maybe<Scalars['String']>>>;
  gitUrls?: Maybe<Array<Maybe<Scalars['String']>>>;
  providerTypes?: Maybe<Array<Maybe<ProviderType>>>;
  orderBy?: Maybe<Array<Maybe<_ScmProviderOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type QueryGitHubAppResourceProviderArgs = {
  id?: Maybe<Scalars['ID']>;
  providerId?: Maybe<Scalars['String']>;
  _id?: Maybe<Scalars['Int']>;
};


export type QueryUserJoinedChannelArgs = {
  id?: Maybe<Scalars['ID']>;
  ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  orderBy?: Maybe<Array<Maybe<_UserJoinedChannelOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type QueryWebhookArgs = {
  id?: Maybe<Scalars['ID']>;
  resourceProviderId?: Maybe<Scalars['String']>;
};


export type QueryChannelLinkArgs = {
  id?: Maybe<Scalars['ID']>;
  ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  orderBy?: Maybe<Array<Maybe<_ChannelLinkOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type QueryReviewArgs = {
  id?: Maybe<Scalars['ID']>;
  gitHubId?: Maybe<Scalars['String']>;
  reviewId?: Maybe<Scalars['String']>;
  body?: Maybe<Scalars['String']>;
  state?: Maybe<ReviewState>;
  submittedAt?: Maybe<Scalars['String']>;
  htmlUrl?: Maybe<Scalars['String']>;
  ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  gitHubIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  reviewIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  bodys?: Maybe<Array<Maybe<Scalars['String']>>>;
  states?: Maybe<Array<Maybe<ReviewState>>>;
  submittedAts?: Maybe<Array<Maybe<Scalars['String']>>>;
  htmlUrls?: Maybe<Array<Maybe<Scalars['String']>>>;
  orderBy?: Maybe<Array<Maybe<_ReviewOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type QueryDockerRegistryProviderArgs = {
  id?: Maybe<Scalars['ID']>;
  url?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  type?: Maybe<DockerRegistryType>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type QueryDockerHubRegistryProviderArgs = {
  _id?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type QueryGoogleContainerRegistryProviderArgs = {
  _id?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type QueryJFrogDockerRegistryProviderArgs = {
  _id?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type QueryDockerRegistryArgs = {
  _id?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type QueryDockerRegistryImageArgs = {
  _id?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  filter?: Maybe<_DockerRegistryImageFilter>;
};


export type QueryGoogleCloudPlatformProviderArgs = {
  _id?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type QueryKubernetesClusterProviderArgs = {
  _id?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type QueryArtifactoryMavenRepositoryProviderArgs = {
  _id?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type QueryMavenRepositoryProviderArgs = {
  _id?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type QueryNpmJsRegistryProviderArgs = {
  _id?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type QueryNpmRegistryProviderArgs = {
  _id?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type QueryGitHubNpmRegistryProviderArgs = {
  _id?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type QueryResourceProviderArgs = {
  authProviderId?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  orderBy?: Maybe<Array<Maybe<_ResourceProviderOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type QueryResourceArgs = {
  id?: Maybe<Scalars['ID']>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type QueryGenericResourceUserArgs = {
  login?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  _id?: Maybe<Scalars['Int']>;
};


export type QueryResourceUserArgs = {
  login?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  _id?: Maybe<Scalars['Int']>;
};


export type QuerySystemAccountArgs = {
  id?: Maybe<Scalars['ID']>;
  _id?: Maybe<Scalars['Int']>;
};


export type QueryCredentialArgs = {
  id?: Maybe<Scalars['ID']>;
  _id?: Maybe<Scalars['Int']>;
};


export type QueryOAuthTokenArgs = {
  id?: Maybe<Scalars['ID']>;
  _id?: Maybe<Scalars['Int']>;
};


export type QueryPasswordArgs = {
  id?: Maybe<Scalars['ID']>;
  _id?: Maybe<Scalars['Int']>;
};


export type QueryGenericResourceProviderArgs = {
  id?: Maybe<Scalars['ID']>;
  url?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type QueryBinaryRepositoryProviderArgs = {
  id?: Maybe<Scalars['ID']>;
  url?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  type?: Maybe<BinaryRepositoryType>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type QuerySecretProviderArgs = {
  _id?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type QueryCommitFingerprintImpactArgs = {
  id?: Maybe<Scalars['ID']>;
  type?: Maybe<Scalars['String']>;
};


export type QuerySourceFingerprintArgs = {
  name: Scalars['String'];
  sha: Scalars['String'];
  type: Scalars['String'];
};


export type QueryCommitsWithFingerprintsArgs = {
  _paging?: Maybe<PagingInfoInput>;
  displayName?: Maybe<Scalars['String']>;
  displayValue?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  repoId?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};


export type QueryDistinctHeadCommitFingerprintsArgs = {
  name: Scalars['String'];
  type: Scalars['String'];
};


export type QueryFingerprintAggregatesArgs = {
  name: Scalars['String'];
  type: Scalars['String'];
};


export type QueryFingerprintTargetsArgs = {
  name?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};


export type QueryHeadCommitFingerprintCountsArgs = {
  name?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};


export type QueryHeadCommitsWithFingerprintArgs = {
  displayName?: Maybe<Scalars['String']>;
  displayValue?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  repoId?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};


export type QueryAtmJobArgs = {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  owner?: Maybe<Scalars['String']>;
  state?: Maybe<AtmJobState>;
};


export type QueryAtmJobTaskArgs = {
  id?: Maybe<Scalars['ID']>;
  jobId?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  owner?: Maybe<Scalars['String']>;
  state?: Maybe<AtmJobTaskState>;
};


export type QueryAtomistLogArgs = {
  _after?: Maybe<Scalars['String']>;
  _before?: Maybe<Scalars['String']>;
  _first?: Maybe<Scalars['Int']>;
  _offset?: Maybe<Scalars['Int']>;
  _orderBy?: Maybe<Scalars['String']>;
  _ordering?: Maybe<_AtomistLogOrdering>;
  _search?: Maybe<Scalars['String']>;
  category?: Maybe<Array<Scalars['String']>>;
  id?: Maybe<Scalars['ID']>;
  level?: Maybe<Array<Scalars['String']>>;
  message?: Maybe<Array<Scalars['String']>>;
  team_id?: Maybe<Array<Scalars['String']>>;
  timestamp?: Maybe<Array<Scalars['String']>>;
};


export type QueryEventsReportArgs = {
  bucketUnit?: Maybe<BucketUnit>;
  eventTypes?: Maybe<Array<EventType>>;
  from?: Maybe<Scalars['String']>;
  to?: Maybe<Scalars['String']>;
};


export type QueryThrottledEventsReportArgs = {
  bucketUnit?: Maybe<BucketUnit>;
  eventTypes?: Maybe<Array<EventType>>;
  from?: Maybe<Scalars['String']>;
  to?: Maybe<Scalars['String']>;
};


export type QueryCardArgs = {
  id?: Maybe<Scalars['ID']>;
  _offset?: Maybe<Scalars['Int']>;
  _first?: Maybe<Scalars['Int']>;
  _orderBy?: Maybe<Scalars['String']>;
  _after?: Maybe<Scalars['Int']>;
  _before?: Maybe<Scalars['Int']>;
  _ordering?: Maybe<_Ordering>;
  _search?: Maybe<Scalars['String']>;
  key?: Maybe<Array<Maybe<Scalars['String']>>>;
  post?: Maybe<Array<Maybe<Scalars['String']>>>;
  shortTitle?: Maybe<Array<Maybe<Scalars['String']>>>;
  ts?: Maybe<Array<Maybe<Scalars['Int']>>>;
  ttl?: Maybe<Array<Maybe<Scalars['Int']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type QueryNotificationArgs = {
  id?: Maybe<Scalars['ID']>;
  _offset?: Maybe<Scalars['Int']>;
  _first?: Maybe<Scalars['Int']>;
  _orderBy?: Maybe<Scalars['String']>;
  _after?: Maybe<Scalars['Int']>;
  _before?: Maybe<Scalars['Int']>;
  _ordering?: Maybe<_Ordering>;
  _search?: Maybe<Scalars['String']>;
  body?: Maybe<Scalars['String']>;
  contentType?: Maybe<Scalars['String']>;
  correlationId?: Maybe<Scalars['String']>;
  key?: Maybe<Scalars['String']>;
  post?: Maybe<Array<Maybe<Scalars['String']>>>;
  ts?: Maybe<Scalars['Int']>;
  ttl?: Maybe<Array<Maybe<Scalars['Int']>>>;
};


export type QueryCommitIssueRelationshipArgs = {
  id?: Maybe<Scalars['ID']>;
  _offset?: Maybe<Scalars['Int']>;
  _first?: Maybe<Scalars['Int']>;
  _orderBy?: Maybe<Scalars['String']>;
  _after?: Maybe<Scalars['Int']>;
  _before?: Maybe<Scalars['Int']>;
  _ordering?: Maybe<_Ordering>;
  _search?: Maybe<Scalars['String']>;
  type?: Maybe<Array<Maybe<CommitIssueRelationshipType>>>;
};


export type QueryDeploymentArgs = {
  id?: Maybe<Scalars['ID']>;
  _offset?: Maybe<Scalars['Int']>;
  _first?: Maybe<Scalars['Int']>;
  _orderBy?: Maybe<Scalars['String']>;
  _after?: Maybe<Scalars['Int']>;
  _before?: Maybe<Scalars['Int']>;
  _ordering?: Maybe<_Ordering>;
  _search?: Maybe<Scalars['String']>;
  environment?: Maybe<Array<Maybe<Scalars['String']>>>;
  ts?: Maybe<Array<Maybe<Scalars['Int']>>>;
};


export type QueryIssueRelationshipArgs = {
  id?: Maybe<Scalars['ID']>;
  _offset?: Maybe<Scalars['Int']>;
  _first?: Maybe<Scalars['Int']>;
  _orderBy?: Maybe<Scalars['String']>;
  _after?: Maybe<Scalars['Int']>;
  _before?: Maybe<Scalars['Int']>;
  _ordering?: Maybe<_Ordering>;
  _search?: Maybe<Scalars['String']>;
  relationshipId?: Maybe<Array<Maybe<Scalars['String']>>>;
  state?: Maybe<Array<Maybe<Scalars['String']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type QuerySdmGoalArgs = {
  id?: Maybe<Scalars['ID']>;
  _offset?: Maybe<Scalars['Int']>;
  _first?: Maybe<Scalars['Int']>;
  _orderBy?: Maybe<Scalars['String']>;
  _after?: Maybe<Scalars['Int']>;
  _before?: Maybe<Scalars['Int']>;
  _ordering?: Maybe<_Ordering>;
  _search?: Maybe<Scalars['String']>;
  _showHistory?: Maybe<Scalars['Boolean']>;
  approvalRequired?: Maybe<Array<Maybe<Scalars['Boolean']>>>;
  branch?: Maybe<Array<Maybe<Scalars['String']>>>;
  data?: Maybe<Array<Maybe<Scalars['String']>>>;
  description?: Maybe<Array<Maybe<Scalars['String']>>>;
  environment?: Maybe<Array<Maybe<Scalars['String']>>>;
  error?: Maybe<Array<Maybe<Scalars['String']>>>;
  externalKey?: Maybe<Array<Maybe<Scalars['String']>>>;
  externalUrl?: Maybe<Array<Maybe<Scalars['String']>>>;
  goalSet?: Maybe<Array<Maybe<Scalars['String']>>>;
  goalSetId?: Maybe<Array<Maybe<Scalars['String']>>>;
  name?: Maybe<Array<Maybe<Scalars['String']>>>;
  parameters?: Maybe<Array<Maybe<Scalars['String']>>>;
  phase?: Maybe<Array<Maybe<Scalars['String']>>>;
  preApprovalRequired?: Maybe<Array<Maybe<Scalars['Boolean']>>>;
  registration?: Maybe<Array<Maybe<Scalars['String']>>>;
  retryFeasible?: Maybe<Array<Maybe<Scalars['Boolean']>>>;
  sha?: Maybe<Array<Maybe<Scalars['String']>>>;
  signature?: Maybe<Array<Maybe<Scalars['String']>>>;
  state?: Maybe<Array<Maybe<SdmGoalState>>>;
  ts?: Maybe<Array<Maybe<Scalars['Int']>>>;
  uniqueName?: Maybe<Array<Maybe<Scalars['String']>>>;
  url?: Maybe<Array<Maybe<Scalars['String']>>>;
  version?: Maybe<Array<Maybe<Scalars['Int']>>>;
};


export type QuerySdmGoalSetArgs = {
  id?: Maybe<Scalars['ID']>;
  _offset?: Maybe<Scalars['Int']>;
  _first?: Maybe<Scalars['Int']>;
  _orderBy?: Maybe<Scalars['String']>;
  _after?: Maybe<Scalars['Int']>;
  _before?: Maybe<Scalars['Int']>;
  _ordering?: Maybe<_Ordering>;
  _search?: Maybe<Scalars['String']>;
  branch?: Maybe<Array<Maybe<Scalars['String']>>>;
  goalSet?: Maybe<Array<Maybe<Scalars['String']>>>;
  goalSetId?: Maybe<Array<Maybe<Scalars['String']>>>;
  sha?: Maybe<Array<Maybe<Scalars['String']>>>;
  state?: Maybe<Array<Maybe<SdmGoalState>>>;
  ts?: Maybe<Array<Maybe<Scalars['Int']>>>;
};


export type QuerySdmGoalDisplayArgs = {
  id?: Maybe<Scalars['ID']>;
  _offset?: Maybe<Scalars['Int']>;
  _first?: Maybe<Scalars['Int']>;
  _orderBy?: Maybe<Scalars['String']>;
  _after?: Maybe<Scalars['Int']>;
  _before?: Maybe<Scalars['Int']>;
  _ordering?: Maybe<_Ordering>;
  _search?: Maybe<Scalars['String']>;
  branch?: Maybe<Array<Maybe<Scalars['String']>>>;
  format?: Maybe<Array<Maybe<SdmGoalDisplayFormat>>>;
  sha?: Maybe<Array<Maybe<Scalars['String']>>>;
  state?: Maybe<Array<Maybe<SdmGoalDisplayState>>>;
  ts?: Maybe<Array<Maybe<Scalars['Int']>>>;
};


export type QuerySdmBuildIdentifierArgs = {
  id?: Maybe<Scalars['ID']>;
  _offset?: Maybe<Scalars['Int']>;
  _first?: Maybe<Scalars['Int']>;
  _orderBy?: Maybe<Scalars['String']>;
  _after?: Maybe<Scalars['Int']>;
  _before?: Maybe<Scalars['Int']>;
  _ordering?: Maybe<_Ordering>;
  _search?: Maybe<Scalars['String']>;
  identifier?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type QuerySdmDeployEnablementArgs = {
  id?: Maybe<Scalars['ID']>;
  _offset?: Maybe<Scalars['Int']>;
  _first?: Maybe<Scalars['Int']>;
  _orderBy?: Maybe<Scalars['String']>;
  _after?: Maybe<Scalars['Int']>;
  _before?: Maybe<Scalars['Int']>;
  _ordering?: Maybe<_Ordering>;
  _search?: Maybe<Scalars['String']>;
  owner?: Maybe<Array<Maybe<Scalars['String']>>>;
  providerId?: Maybe<Array<Maybe<Scalars['String']>>>;
  repo?: Maybe<Array<Maybe<Scalars['String']>>>;
  state?: Maybe<Array<Maybe<SdmDeployState>>>;
};


export type QuerySdmVersionArgs = {
  id?: Maybe<Scalars['ID']>;
  _offset?: Maybe<Scalars['Int']>;
  _first?: Maybe<Scalars['Int']>;
  _orderBy?: Maybe<Scalars['String']>;
  _after?: Maybe<Scalars['Int']>;
  _before?: Maybe<Scalars['Int']>;
  _ordering?: Maybe<_Ordering>;
  _search?: Maybe<Scalars['String']>;
  branch?: Maybe<Array<Maybe<Scalars['String']>>>;
  sha?: Maybe<Array<Maybe<Scalars['String']>>>;
  version?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type QuerySdmGoalSetBadgeArgs = {
  id?: Maybe<Scalars['ID']>;
  _offset?: Maybe<Scalars['Int']>;
  _first?: Maybe<Scalars['Int']>;
  _orderBy?: Maybe<Scalars['String']>;
  _after?: Maybe<Scalars['Int']>;
  _before?: Maybe<Scalars['Int']>;
  _ordering?: Maybe<_Ordering>;
  _search?: Maybe<Scalars['String']>;
  sdm?: Maybe<Array<Maybe<Scalars['String']>>>;
  token?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type QuerySdmPreferenceArgs = {
  id?: Maybe<Scalars['ID']>;
  _offset?: Maybe<Scalars['Int']>;
  _first?: Maybe<Scalars['Int']>;
  _orderBy?: Maybe<Scalars['String']>;
  _after?: Maybe<Scalars['Int']>;
  _before?: Maybe<Scalars['Int']>;
  _ordering?: Maybe<_Ordering>;
  _search?: Maybe<Scalars['String']>;
  key?: Maybe<Array<Maybe<Scalars['String']>>>;
  ttl?: Maybe<Array<Maybe<Scalars['Int']>>>;
  value?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type QuerySdmRepoProvenanceArgs = {
  id?: Maybe<Scalars['ID']>;
  _offset?: Maybe<Scalars['Int']>;
  _first?: Maybe<Scalars['Int']>;
  _orderBy?: Maybe<Scalars['String']>;
  _after?: Maybe<Scalars['Int']>;
  _before?: Maybe<Scalars['Int']>;
  _ordering?: Maybe<_Ordering>;
  _search?: Maybe<Scalars['String']>;
};


export type QueryPolicyLogArgs = {
  id?: Maybe<Scalars['ID']>;
  _offset?: Maybe<Scalars['Int']>;
  _first?: Maybe<Scalars['Int']>;
  _orderBy?: Maybe<Scalars['String']>;
  _after?: Maybe<Scalars['Int']>;
  _before?: Maybe<Scalars['Int']>;
  _ordering?: Maybe<_Ordering>;
  _search?: Maybe<Scalars['String']>;
  name?: Maybe<Array<Maybe<Scalars['String']>>>;
  ts?: Maybe<Array<Maybe<Scalars['Int']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type QueryPolicyComplianceArgs = {
  id?: Maybe<Scalars['ID']>;
  _offset?: Maybe<Scalars['Int']>;
  _first?: Maybe<Scalars['Int']>;
  _orderBy?: Maybe<Scalars['String']>;
  _after?: Maybe<Scalars['Int']>;
  _before?: Maybe<Scalars['Int']>;
  _ordering?: Maybe<_Ordering>;
  _search?: Maybe<Scalars['String']>;
  _branch?: Maybe<Array<Maybe<Scalars['String']>>>;
  _owner?: Maybe<Array<Maybe<Scalars['String']>>>;
  _repo?: Maybe<Array<Maybe<Scalars['String']>>>;
  _sha?: Maybe<Array<Maybe<Scalars['String']>>>;
  owner?: Maybe<Array<Maybe<Scalars['String']>>>;
  state?: Maybe<Array<Maybe<PolicyCompliaceState>>>;
  ts?: Maybe<Array<Maybe<Scalars['Int']>>>;
};


export type QueryPolicyTargetStreamArgs = {
  id?: Maybe<Scalars['ID']>;
  _offset?: Maybe<Scalars['Int']>;
  _first?: Maybe<Scalars['Int']>;
  _orderBy?: Maybe<Scalars['String']>;
  _after?: Maybe<Scalars['Int']>;
  _before?: Maybe<Scalars['Int']>;
  _ordering?: Maybe<_Ordering>;
  _search?: Maybe<Scalars['String']>;
  name?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type QueryPolicyTargetArgs = {
  id?: Maybe<Scalars['ID']>;
  _offset?: Maybe<Scalars['Int']>;
  _first?: Maybe<Scalars['Int']>;
  _orderBy?: Maybe<Scalars['String']>;
  _after?: Maybe<Scalars['Int']>;
  _before?: Maybe<Scalars['Int']>;
  _ordering?: Maybe<_Ordering>;
  _search?: Maybe<Scalars['String']>;
  data?: Maybe<Array<Maybe<Scalars['String']>>>;
  displayName?: Maybe<Array<Maybe<Scalars['String']>>>;
  displayValue?: Maybe<Array<Maybe<Scalars['String']>>>;
  name?: Maybe<Array<Maybe<Scalars['String']>>>;
  sha?: Maybe<Array<Maybe<Scalars['String']>>>;
  streams?: Maybe<Array<Maybe<Scalars['ID']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type QueryLifecycleAttachmentArgs = {
  id?: Maybe<Scalars['ID']>;
  _offset?: Maybe<Scalars['Int']>;
  _first?: Maybe<Scalars['Int']>;
  _orderBy?: Maybe<Scalars['String']>;
  _after?: Maybe<Scalars['Int']>;
  _before?: Maybe<Scalars['Int']>;
  _ordering?: Maybe<_Ordering>;
  _search?: Maybe<Scalars['String']>;
  body?: Maybe<Array<Maybe<Scalars['String']>>>;
  configuration?: Maybe<Array<Maybe<Scalars['String']>>>;
  contentType?: Maybe<Array<Maybe<Scalars['String']>>>;
  identifier?: Maybe<Array<Maybe<Scalars['String']>>>;
  name?: Maybe<Array<Maybe<Scalars['String']>>>;
  skill?: Maybe<Array<Maybe<Scalars['String']>>>;
  ts?: Maybe<Array<Maybe<Scalars['Int']>>>;
  type?: Maybe<Array<Maybe<LifecycleAttachmentType>>>;
};


export type QueryAspectRegistrationArgs = {
  id?: Maybe<Scalars['ID']>;
  _offset?: Maybe<Scalars['Int']>;
  _first?: Maybe<Scalars['Int']>;
  _orderBy?: Maybe<Scalars['String']>;
  _after?: Maybe<Scalars['Int']>;
  _before?: Maybe<Scalars['Int']>;
  _ordering?: Maybe<_Ordering>;
  _search?: Maybe<Scalars['String']>;
  category?: Maybe<Array<Maybe<Scalars['String']>>>;
  description?: Maybe<Array<Maybe<Scalars['String']>>>;
  displayName?: Maybe<Array<Maybe<Scalars['String']>>>;
  endpoint?: Maybe<Array<Maybe<Scalars['String']>>>;
  manageable?: Maybe<Array<Maybe<Scalars['Boolean']>>>;
  name?: Maybe<Array<Maybe<Scalars['String']>>>;
  owner?: Maybe<Array<Maybe<Scalars['String']>>>;
  shortName?: Maybe<Array<Maybe<Scalars['String']>>>;
  state?: Maybe<Array<Maybe<AspectRegistrationState>>>;
  unit?: Maybe<Array<Maybe<Scalars['String']>>>;
  url?: Maybe<Array<Maybe<Scalars['String']>>>;
  uuid?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type QueryCommitByShaArgs = {
  sha: Scalars['String'];
};


export type QueryPushByShaArgs = {
  branchName: Scalars['String'];
  afterSha: Scalars['String'];
  ownerName?: Maybe<Scalars['String']>;
  repoName?: Maybe<Scalars['String']>;
};


export type QueryLinkedRepoArgs = {
  name: Scalars['String'];
  owner: Scalars['String'];
  provider: Scalars['String'];
};


export type QueryLinkedFingerprintArgs = {
  name: Scalars['String'];
  sha: Scalars['String'];
  type: Scalars['String'];
};


export type QueryPullRequestByIdArgs = {
  id: Scalars['ID'];
};

export type RegisteredAtomistSkill = AtomistSkill & {
  __typename?: 'RegisteredAtomistSkill';
  artifacts: Array<AtomistSkillArtifact>;
  author: Scalars['String'];
  capabilities: AtomistSkillCapabilitiesSpec;
  categories: Array<AtomistSkillCategory>;
  commands: Array<AtomistChatCommand>;
  createdAt: Scalars['String'];
  datalogSubscriptions?: Maybe<Array<AtomistSkillDatalogSubscription>>;
  description: Scalars['String'];
  dispatchStyle: AtomistSkillEventDispatchStyle;
  displayName?: Maybe<Scalars['String']>;
  homepageUrl: Scalars['String'];
  iconUrl: Scalars['String'];
  inCatalog: Scalars['Boolean'];
  ingesters: Array<Scalars['String']>;
  integration: Scalars['Boolean'];
  license: Scalars['String'];
  longDescription: Scalars['String'];
  maturities: Array<AtomistSkillMaturityLevel>;
  maxConfigurations: Scalars['Int'];
  name: Scalars['String'];
  namespace: Scalars['String'];
  owner: Scalars['Boolean'];
  parameters: Array<AtomistSkillParameterSpec>;
  platform: AtomistSkillExecutionPlatform;
  publishedAt?: Maybe<Scalars['String']>;
  readme?: Maybe<Scalars['String']>;
  resourceProviders?: Maybe<Array<AtomistSkillResourceProviderSpec>>;
  schemata?: Maybe<Array<AtomistSkillIngestionSchema>>;
  subscriptions: Array<Scalars['String']>;
  technologies: Array<AtomistSkillTechnology>;
  version: Scalars['String'];
  videoUrl?: Maybe<Scalars['String']>;
};

export type Release = {
  __typename?: 'Release';
  _id?: Maybe<Scalars['Int']>;
  url?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  gitHubId: Scalars['String'];
  name?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
  action?: Maybe<ReleaseAction>;
  tag?: Maybe<Tag>;
};


export type ReleaseTagArgs = {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  ref?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
};

export enum ReleaseAction {
  Published = 'published',
  Unpublished = 'unpublished',
  Created = 'created',
  Edited = 'edited',
  Deleted = 'deleted',
  Prereleased = 'prereleased',
  Released = 'released'
}

/** Repo-Node */
export type Repo = {
  __typename?: 'Repo';
  _id?: Maybe<Scalars['Int']>;
  url?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  owner?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  allowRebaseMerge?: Maybe<Scalars['Boolean']>;
  allowSquashMerge?: Maybe<Scalars['Boolean']>;
  allowMergeCommit?: Maybe<Scalars['Boolean']>;
  repoId?: Maybe<Scalars['String']>;
  gitHubId?: Maybe<Scalars['String']>;
  defaultBranch?: Maybe<Scalars['String']>;
  labels?: Maybe<Array<Maybe<Label>>>;
  channels?: Maybe<Array<Maybe<ChatChannel>>>;
  org?: Maybe<Org>;
  issue?: Maybe<Array<Maybe<Issue>>>;
  issues?: Maybe<Array<Maybe<Issue>>>;
  pullRequest?: Maybe<Array<Maybe<PullRequest>>>;
  pullRequests?: Maybe<Array<Maybe<PullRequest>>>;
  pushes?: Maybe<Array<Maybe<Push>>>;
  /** Repo branches Branch */
  branches?: Maybe<Array<Maybe<Branch>>>;
  /** Repo links ChannelLink */
  links?: Maybe<Array<Maybe<ChannelLink>>>;
};


/** Repo-Node */
export type RepoLabelsArgs = {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  default?: Maybe<Scalars['String']>;
  orderBy?: Maybe<Array<Maybe<_LabelOrdering>>>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  color?: Maybe<Scalars['String']>;
};


/** Repo-Node */
export type RepoChannelsArgs = {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  provider?: Maybe<Scalars['String']>;
  normalizedName?: Maybe<Scalars['String']>;
  channelId?: Maybe<Scalars['String']>;
  isDefault?: Maybe<Scalars['Boolean']>;
  botInvitedSelf?: Maybe<Scalars['Boolean']>;
  orderBy?: Maybe<Array<Maybe<_ChatChannelOrdering>>>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  archived?: Maybe<Scalars['Boolean']>;
};


/** Repo-Node */
export type RepoOrgArgs = {
  id?: Maybe<Scalars['ID']>;
  owner?: Maybe<Scalars['String']>;
  ownerType?: Maybe<OwnerType>;
};


/** Repo-Node */
export type RepoIssueArgs = {
  id?: Maybe<Scalars['ID']>;
  number?: Maybe<Scalars['Float']>;
  name?: Maybe<Scalars['String']>;
  names?: Maybe<Array<Maybe<Scalars['String']>>>;
  title?: Maybe<Scalars['String']>;
  body?: Maybe<Scalars['String']>;
  state?: Maybe<IssueState>;
  timestamp?: Maybe<Scalars['String']>;
  action?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  orderBy?: Maybe<Array<Maybe<_IssueOrdering>>>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  closedAt?: Maybe<Scalars['String']>;
};


/** Repo-Node */
export type RepoIssuesArgs = {
  id?: Maybe<Scalars['ID']>;
  number?: Maybe<Scalars['Float']>;
  name?: Maybe<Scalars['String']>;
  names?: Maybe<Array<Maybe<Scalars['String']>>>;
  title?: Maybe<Scalars['String']>;
  body?: Maybe<Scalars['String']>;
  state?: Maybe<IssueState>;
  timestamp?: Maybe<Scalars['String']>;
  action?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  orderBy?: Maybe<Array<Maybe<_IssueOrdering>>>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  closedAt?: Maybe<Scalars['String']>;
};


/** Repo-Node */
export type RepoPullRequestArgs = {
  id?: Maybe<Scalars['ID']>;
  number?: Maybe<Scalars['Float']>;
  prId?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  names?: Maybe<Array<Maybe<Scalars['String']>>>;
  body?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  merged?: Maybe<Scalars['Boolean']>;
  timestamp?: Maybe<Scalars['String']>;
  baseBranchName?: Maybe<Scalars['String']>;
  branchName?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  closedAt?: Maybe<Scalars['String']>;
  mergedAt?: Maybe<Scalars['String']>;
  orderBy?: Maybe<Array<Maybe<_PullRequestOrdering>>>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  mergeStatus?: Maybe<MergeStatus>;
};


/** Repo-Node */
export type RepoPullRequestsArgs = {
  id?: Maybe<Scalars['ID']>;
  number?: Maybe<Scalars['Float']>;
  prId?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  body?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  merged?: Maybe<Scalars['Boolean']>;
  timestamp?: Maybe<Scalars['String']>;
  baseBranchName?: Maybe<Scalars['String']>;
  branchName?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  closedAt?: Maybe<Scalars['String']>;
  mergedAt?: Maybe<Scalars['String']>;
  orderBy?: Maybe<Array<Maybe<_PullRequestOrdering>>>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  mergeStatus?: Maybe<MergeStatus>;
};


/** Repo-Node */
export type RepoPushesArgs = {
  name?: Maybe<Scalars['String']>;
  orderBy?: Maybe<Array<Maybe<_PushOrdering>>>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


/** Repo-Node */
export type RepoBranchesArgs = {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
  isRemote?: Maybe<Scalars['Boolean']>;
  orderBy?: Maybe<Array<Maybe<_BranchOrdering>>>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  remoteRepoHtmlUrl?: Maybe<Scalars['String']>;
};


/** Repo-Node */
export type RepoLinksArgs = {
  orderBy?: Maybe<Array<Maybe<_ChannelLinkOrdering>>>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['ID']>;
};

/** a GitHub Owner (like an Org) can set a login to be used for background tasks */
export type RepoLogin = {
  __typename?: 'RepoLogin';
  /** The repository name */
  repo?: Maybe<Scalars['String']>;
  /** The owner name for the Organization/Team */
  owner?: Maybe<Scalars['String']>;
  /** The id of the git provider for this Owner */
  providerId?: Maybe<Scalars['String']>;
  /** The login that should be used */
  login?: Maybe<Scalars['String']>;
};

/** The data for an existing Repo has been loaded and is ready for querying */
export type RepoOnboarded = {
  __typename?: 'RepoOnboarded';
  /** GitHub Repository */
  repo: Repo;
};

export type Resource = {
  id: Scalars['ID'];
  _id: Scalars['Int'];
};

export type ResourceLinks = {
  pushLink?: Maybe<PushLink>;
  commitLink?: Maybe<CommitLink>;
};

export type ResourceProvider = {
  _typenames?: Maybe<Array<Maybe<Scalars['String']>>>;
  _id: Scalars['Int'];
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  team: Team;
  authProviderId?: Maybe<Scalars['String']>;
  state?: Maybe<ResourceProviderState>;
  credential?: Maybe<Credential>;
  webhooks?: Maybe<Array<Maybe<Webhook>>>;
  createdAt: Scalars['String'];
  updatedAt: Scalars['String'];
  createdBy?: Maybe<Person>;
  updatedBy?: Maybe<Person>;
  metadata?: Maybe<ResourceProviderMetadata>;
};


export type ResourceProviderWebhooksArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type ResourceProviderMetadata = {
  __typename?: 'ResourceProviderMetadata';
  /** The 20 most recenetly receieved events to this ResourceProvider */
  events: Array<Scalars['String']>;
  /** A timestamp of when we last received an event on this ResourceProvider */
  eventLastReceived?: Maybe<Scalars['String']>;
};

export type ResourceProviderState = {
  __typename?: 'ResourceProviderState';
  error?: Maybe<Scalars['String']>;
  name?: Maybe<ResourceProviderStateName>;
};

export type ResourceProviderStateInput = {
  state: ResourceProviderStateName;
  error?: Maybe<Scalars['String']>;
};

export enum ResourceProviderStateName {
  Converged = 'converged',
  Unconverged = 'unconverged',
  Misconfigured = 'misconfigured',
  Unauthorized = 'unauthorized'
}

export type ResourceUser = {
  _typenames?: Maybe<Array<Maybe<Scalars['String']>>>;
  id: Scalars['ID'];
  _id?: Maybe<Scalars['Int']>;
  credential?: Maybe<Credential>;
  provider: ResourceProvider;
  login: Scalars['String'];
};


export type ResourceUserProviderArgs = {
  id?: Maybe<Scalars['ID']>;
};

export enum ResourceUserType {
  ScmId = 'SCMId',
  GenericResourceUser = 'GenericResourceUser',
  SystemAccount = 'SystemAccount',
  GitHubAppResourceUser = 'GitHubAppResourceUser'
}

/** Review-Node */
export type Review = {
  __typename?: 'Review';
  /** internal node id */
  _id?: Maybe<Scalars['Int']>;
  /** the URL of the Review */
  url?: Maybe<Scalars['String']>;
  /** id of  Review */
  id?: Maybe<Scalars['ID']>;
  /** gitHubId of  Review */
  gitHubId?: Maybe<Scalars['String']>;
  /** reviewId of  Review */
  reviewId?: Maybe<Scalars['String']>;
  /** body of  Review */
  body?: Maybe<Scalars['String']>;
  /** state of  Review */
  state?: Maybe<ReviewState>;
  /** submittedAt of  Review */
  submittedAt?: Maybe<Scalars['String']>;
  /** htmlUrl of  Review */
  htmlUrl?: Maybe<Scalars['String']>;
  /** Review by SCMId */
  by?: Maybe<Array<Maybe<ScmId>>>;
  /** Review commit Commit */
  commit?: Maybe<Commit>;
  /** Review comments Comment */
  comments?: Maybe<Array<Maybe<Comment>>>;
  /** Review pullRequest PullRequest */
  pullRequest?: Maybe<PullRequest>;
};


/** Review-Node */
export type ReviewByArgs = {
  login?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  orderBy?: Maybe<Array<Maybe<_ScmIdOrdering>>>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  avatar?: Maybe<Scalars['String']>;
  filter?: Maybe<_ScmIdFilter>;
};


/** Review-Node */
export type ReviewCommitArgs = {
  sha?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
};


/** Review-Node */
export type ReviewCommentsArgs = {
  id?: Maybe<Scalars['ID']>;
  body?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  commentId?: Maybe<Scalars['String']>;
  gitHubId?: Maybe<Scalars['String']>;
  path?: Maybe<Scalars['String']>;
  position?: Maybe<Scalars['String']>;
  htmlUrl?: Maybe<Scalars['String']>;
  orderBy?: Maybe<Array<Maybe<_CommentOrdering>>>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  commentType?: Maybe<CommentCommentType>;
};


/** Review-Node */
export type ReviewPullRequestArgs = {
  id?: Maybe<Scalars['ID']>;
  number?: Maybe<Scalars['Float']>;
  prId?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  body?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  merged?: Maybe<Scalars['Boolean']>;
  timestamp?: Maybe<Scalars['String']>;
  baseBranchName?: Maybe<Scalars['String']>;
  branchName?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  closedAt?: Maybe<Scalars['String']>;
  mergedAt?: Maybe<Scalars['String']>;
  mergeStatus?: Maybe<MergeStatus>;
};

/** Enum for ReviewState */
export enum ReviewState {
  /** Value for requested */
  Requested = 'requested',
  /** Value for pending */
  Pending = 'pending',
  /** Value for approved */
  Approved = 'approved',
  /** Value for commented */
  Commented = 'commented',
  /** Value for unapproved */
  Unapproved = 'unapproved',
  /** Value for changes_requested */
  ChangesRequested = 'changes_requested'
}

export type ScmAuthorInput = {
  /** The login of the commit author in the SCM provider */
  login: Scalars['String'];
  /** The authors email address */
  email?: Maybe<EmailInput>;
  /** The name of the author */
  name?: Maybe<Scalars['String']>;
};

export type ScmCommitInput = {
  /** The id of the repo as it appears in the graph */
  repoId: Scalars['String'];
  /** The sha of the commit */
  sha: Scalars['String'];
  /** The email address of the commit */
  email?: Maybe<EmailInput>;
  /** The commit message */
  message: Scalars['String'];
  /** The http url of the commit in the SCM provider */
  url?: Maybe<Scalars['String']>;
  /** The commit timestamp */
  timestamp: Scalars['String'];
  /** The name of the branch this commit is being ingested on */
  branchName: Scalars['String'];
  /** The author of the commit - optional but helpful if available */
  author?: Maybe<ScmAuthorInput>;
};

/** SCMId-Node */
export type ScmId = ResourceUser & {
  __typename?: 'SCMId';
  /** name of  SCMId */
  name?: Maybe<Scalars['String']>;
  /** avatar of  SCMId */
  avatar?: Maybe<Scalars['String']>;
  credential?: Maybe<OAuthToken>;
  provider: ScmProvider;
  /** SCMId emails Email */
  emails?: Maybe<Array<Maybe<Email>>>;
  /** SCMId person Person */
  person?: Maybe<Person>;
  _typenames?: Maybe<Array<Maybe<Scalars['String']>>>;
  id: Scalars['ID'];
  _id?: Maybe<Scalars['Int']>;
  login: Scalars['String'];
};


/** SCMId-Node */
export type ScmIdProviderArgs = {
  id?: Maybe<Scalars['ID']>;
};


/** SCMId-Node */
export type ScmIdEmailsArgs = {
  orderBy?: Maybe<Array<Maybe<_EmailOrdering>>>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  address?: Maybe<Scalars['String']>;
};


/** SCMId-Node */
export type ScmIdPersonArgs = {
  id?: Maybe<Scalars['ID']>;
  forename?: Maybe<Scalars['String']>;
  surname?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

export type ScmOrgInput = {
  name: Scalars['String'];
  id?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  ownerType: OwnerType;
};

export type ScmOrgsInput = {
  orgs: Array<ScmOrgInput>;
};

/** SCMProvider-Node */
export type ScmProvider = ResourceProvider & {
  __typename?: 'SCMProvider';
  url?: Maybe<Scalars['String']>;
  providerId: Scalars['String'];
  private?: Maybe<Scalars['Boolean']>;
  apiUrl: Scalars['String'];
  gitUrl: Scalars['String'];
  providerType?: Maybe<ProviderType>;
  targetConfiguration?: Maybe<ScmProviderSpec>;
  orgs?: Maybe<Array<Maybe<Org>>>;
  credential?: Maybe<OAuthToken>;
  _typenames?: Maybe<Array<Maybe<Scalars['String']>>>;
  _id: Scalars['Int'];
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  team: Team;
  authProviderId?: Maybe<Scalars['String']>;
  state?: Maybe<ResourceProviderState>;
  webhooks?: Maybe<Array<Maybe<Webhook>>>;
  createdAt: Scalars['String'];
  updatedAt: Scalars['String'];
  createdBy?: Maybe<Person>;
  updatedBy?: Maybe<Person>;
  metadata?: Maybe<ResourceProviderMetadata>;
};


/** SCMProvider-Node */
export type ScmProviderOrgsArgs = {
  owner?: Maybe<Scalars['String']>;
  orderBy?: Maybe<Array<Maybe<_OrgOrdering>>>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  ownerType?: Maybe<OwnerType>;
};


/** SCMProvider-Node */
export type ScmProviderWebhooksArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type ScmProviderRepoSpec = {
  __typename?: 'SCMProviderRepoSpec';
  ownerSpec: Scalars['String'];
  nameSpec: Scalars['String'];
};

export type ScmProviderSpec = {
  __typename?: 'SCMProviderSpec';
  orgSpecs: Array<Scalars['String']>;
  repoSpecs: Array<ScmProviderRepoSpec>;
};

export type ScmProviderStateInput = {
  state: ScmProviderStateName;
  error?: Maybe<Scalars['String']>;
};

export enum ScmProviderStateName {
  Converged = 'converged',
  Unconverged = 'unconverged',
  Misconfigured = 'misconfigured',
  Unauthorized = 'unauthorized'
}

export type ScmRepoInput = {
  /** The the id of the repo as provided by the SCM provider not the Atomist graph */
  repoId: Scalars['String'];
  /** The http url of the repo in the SCM provider */
  url?: Maybe<Scalars['String']>;
  /** The name of the repo */
  name: Scalars['String'];
  /** The default branch of the repo (master if unknown) */
  defaultBranch?: Maybe<Scalars['String']>;
};

export type ScmReposInput = {
  /** The id of the org as represented in the Atomist graph */
  orgId: Scalars['String'];
  owner: Scalars['String'];
  /** The list of repos to ingest */
  repos: Array<ScmRepoInput>;
};

export type ScmResourceProviderInput = {
  orgs: Array<Scalars['String']>;
  repos: Array<ScmResourceProviderRepoInput>;
};

export type ScmResourceProviderRepoInput = {
  owner: Scalars['String'];
  repo: Scalars['String'];
};

export type SdmBuildIdentifier = {
  __typename?: 'SdmBuildIdentifier';
  identifier?: Maybe<Scalars['String']>;
  repo?: Maybe<SdmBuildIdentifierRepository>;
  /** The ID of this SdmBuildIdentifier */
  id?: Maybe<Scalars['ID']>;
};


export type SdmBuildIdentifierRepoArgs = {
  name?: Maybe<Array<Maybe<Scalars['String']>>>;
  owner?: Maybe<Array<Maybe<Scalars['String']>>>;
  providerId?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type SdmBuildIdentifierRepository = {
  __typename?: 'SdmBuildIdentifierRepository';
  name?: Maybe<Scalars['String']>;
  owner?: Maybe<Scalars['String']>;
  providerId?: Maybe<Scalars['String']>;
};

export type SdmCondition = {
  __typename?: 'SdmCondition';
  environment?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  uniqueName?: Maybe<Scalars['String']>;
};

export type SdmDeployEnablement = {
  __typename?: 'SdmDeployEnablement';
  owner?: Maybe<Scalars['String']>;
  providerId?: Maybe<Scalars['String']>;
  repo?: Maybe<Scalars['String']>;
  state?: Maybe<SdmDeployState>;
  /** The ID of this SdmDeployEnablement */
  id?: Maybe<Scalars['ID']>;
};

export enum SdmDeployState {
  Requested = 'requested',
  Disabled = 'disabled'
}

export type SdmExternalUrl = {
  __typename?: 'SdmExternalUrl';
  label?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
};

export type SdmGoal = {
  __typename?: 'SdmGoal';
  approval?: Maybe<SdmProvenance>;
  approvalRequired?: Maybe<Scalars['Boolean']>;
  branch?: Maybe<Scalars['String']>;
  data?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  descriptions?: Maybe<SdmGoalDescriptions>;
  environment?: Maybe<Scalars['String']>;
  error?: Maybe<Scalars['String']>;
  externalKey?: Maybe<Scalars['String']>;
  externalUrl?: Maybe<Scalars['String']>;
  externalUrls?: Maybe<Array<Maybe<SdmExternalUrl>>>;
  fulfillment?: Maybe<SdmGoalFulfillment>;
  goalSet?: Maybe<Scalars['String']>;
  goalSetId?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  parameters?: Maybe<Scalars['String']>;
  phase?: Maybe<Scalars['String']>;
  preApproval?: Maybe<SdmProvenance>;
  preApprovalRequired?: Maybe<Scalars['Boolean']>;
  preConditions?: Maybe<Array<Maybe<SdmCondition>>>;
  provenance?: Maybe<Array<Maybe<SdmProvenance>>>;
  push?: Maybe<Push>;
  registration?: Maybe<Scalars['String']>;
  repo?: Maybe<SdmRepository>;
  retryFeasible?: Maybe<Scalars['Boolean']>;
  sha?: Maybe<Scalars['String']>;
  signature?: Maybe<Scalars['String']>;
  state?: Maybe<SdmGoalState>;
  ts?: Maybe<Scalars['Int']>;
  uniqueName?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  version?: Maybe<Scalars['Int']>;
  /** The ID of this SdmGoal */
  id?: Maybe<Scalars['ID']>;
};


export type SdmGoalFulfillmentArgs = {
  name?: Maybe<Array<Maybe<Scalars['String']>>>;
  method?: Maybe<Array<Maybe<Scalars['String']>>>;
  registration?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type SdmGoalProvenanceArgs = {
  registration?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type SdmGoalRepoArgs = {
  name?: Maybe<Array<Maybe<Scalars['String']>>>;
  owner?: Maybe<Array<Maybe<Scalars['String']>>>;
  providerId?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type SdmGoalDescriptions = {
  __typename?: 'SdmGoalDescriptions';
  canceled?: Maybe<Scalars['String']>;
  completed?: Maybe<Scalars['String']>;
  failed?: Maybe<Scalars['String']>;
  inProcess?: Maybe<Scalars['String']>;
  planned?: Maybe<Scalars['String']>;
  requested?: Maybe<Scalars['String']>;
  skipped?: Maybe<Scalars['String']>;
  stopped?: Maybe<Scalars['String']>;
  waitingForApproval?: Maybe<Scalars['String']>;
  waitingForPreApproval?: Maybe<Scalars['String']>;
};

export type SdmGoalDisplay = {
  __typename?: 'SdmGoalDisplay';
  branch?: Maybe<Scalars['String']>;
  format?: Maybe<SdmGoalDisplayFormat>;
  push?: Maybe<Push>;
  repo?: Maybe<SdmRepository>;
  sha?: Maybe<Scalars['String']>;
  state?: Maybe<SdmGoalDisplayState>;
  ts?: Maybe<Scalars['Int']>;
  /** The ID of this SdmGoalDisplay */
  id?: Maybe<Scalars['ID']>;
};

export enum SdmGoalDisplayFormat {
  Compact = 'compact',
  Full = 'full'
}

export enum SdmGoalDisplayState {
  ShowCurrent = 'show_current',
  ShowAll = 'show_all'
}

export type SdmGoalFulfillment = {
  __typename?: 'SdmGoalFulfillment';
  method?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  registration?: Maybe<Scalars['String']>;
};

export type SdmGoalName = {
  __typename?: 'SdmGoalName';
  name?: Maybe<Scalars['String']>;
  uniqueName?: Maybe<Scalars['String']>;
};

export type SdmGoalSet = {
  __typename?: 'SdmGoalSet';
  branch?: Maybe<Scalars['String']>;
  goalSet?: Maybe<Scalars['String']>;
  goalSetId?: Maybe<Scalars['String']>;
  goals?: Maybe<Array<Maybe<SdmGoalName>>>;
  provenance?: Maybe<SdmProvenance>;
  push?: Maybe<Push>;
  repo?: Maybe<SdmRepository>;
  sha?: Maybe<Scalars['String']>;
  state?: Maybe<SdmGoalState>;
  tags?: Maybe<Array<Maybe<SdmGoalSetTag>>>;
  ts?: Maybe<Scalars['Int']>;
  /** The ID of this SdmGoalSet */
  id?: Maybe<Scalars['ID']>;
};


export type SdmGoalSetProvenanceArgs = {
  registration?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type SdmGoalSetRepoArgs = {
  name?: Maybe<Array<Maybe<Scalars['String']>>>;
  owner?: Maybe<Array<Maybe<Scalars['String']>>>;
  providerId?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type SdmGoalSetBadge = {
  __typename?: 'SdmGoalSetBadge';
  repo?: Maybe<SdmGoalSetBadgeRepository>;
  sdm?: Maybe<Scalars['String']>;
  token?: Maybe<Scalars['String']>;
  /** The ID of this SdmGoalSetBadge */
  id?: Maybe<Scalars['ID']>;
};


export type SdmGoalSetBadgeRepoArgs = {
  name?: Maybe<Array<Maybe<Scalars['String']>>>;
  owner?: Maybe<Array<Maybe<Scalars['String']>>>;
  providerId?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type SdmGoalSetBadgeRepository = {
  __typename?: 'SdmGoalSetBadgeRepository';
  name?: Maybe<Scalars['String']>;
  owner?: Maybe<Scalars['String']>;
  providerId?: Maybe<Scalars['String']>;
};

export type SdmGoalSetTag = {
  __typename?: 'SdmGoalSetTag';
  name?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export enum SdmGoalState {
  Success = 'success',
  PreApproved = 'pre_approved',
  Requested = 'requested',
  WaitingForPreApproval = 'waiting_for_pre_approval',
  Approved = 'approved',
  WaitingForApproval = 'waiting_for_approval',
  Failure = 'failure',
  Stopped = 'stopped',
  Planned = 'planned',
  InProcess = 'in_process',
  Skipped = 'skipped',
  Canceled = 'canceled'
}

export type SdmPreference = {
  __typename?: 'SdmPreference';
  key?: Maybe<Scalars['String']>;
  ttl?: Maybe<Scalars['Int']>;
  value?: Maybe<Scalars['String']>;
  /** The ID of this SdmPreference */
  id?: Maybe<Scalars['ID']>;
};

export type SdmProvenance = {
  __typename?: 'SdmProvenance';
  channelId?: Maybe<Scalars['String']>;
  correlationId?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  registration?: Maybe<Scalars['String']>;
  ts?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['String']>;
  version?: Maybe<Scalars['String']>;
};

export type SdmRepoProvenance = {
  __typename?: 'SdmRepoProvenance';
  provenance?: Maybe<SdmProvenance>;
  repo?: Maybe<SdmRepository>;
  /** The ID of this SdmRepoProvenance */
  id?: Maybe<Scalars['ID']>;
};


export type SdmRepoProvenanceRepoArgs = {
  name?: Maybe<Array<Maybe<Scalars['String']>>>;
  owner?: Maybe<Array<Maybe<Scalars['String']>>>;
  providerId?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type SdmRepository = {
  __typename?: 'SdmRepository';
  name?: Maybe<Scalars['String']>;
  owner?: Maybe<Scalars['String']>;
  providerId?: Maybe<Scalars['String']>;
};

export type SdmVersion = {
  __typename?: 'SdmVersion';
  branch?: Maybe<Scalars['String']>;
  repo?: Maybe<SdmVersionRepository>;
  sha?: Maybe<Scalars['String']>;
  version?: Maybe<Scalars['String']>;
  /** The ID of this SdmVersion */
  id?: Maybe<Scalars['ID']>;
};


export type SdmVersionRepoArgs = {
  name?: Maybe<Array<Maybe<Scalars['String']>>>;
  owner?: Maybe<Array<Maybe<Scalars['String']>>>;
  providerId?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type SdmVersionRepository = {
  __typename?: 'SdmVersionRepository';
  name?: Maybe<Scalars['String']>;
  owner?: Maybe<Scalars['String']>;
  providerId?: Maybe<Scalars['String']>;
};

export type SecretProvider = ResourceProvider & {
  __typename?: 'SecretProvider';
  name: Scalars['String'];
  _typenames?: Maybe<Array<Maybe<Scalars['String']>>>;
  _id: Scalars['Int'];
  id: Scalars['ID'];
  team: Team;
  authProviderId?: Maybe<Scalars['String']>;
  state?: Maybe<ResourceProviderState>;
  credential?: Maybe<Credential>;
  webhooks?: Maybe<Array<Maybe<Webhook>>>;
  createdAt: Scalars['String'];
  updatedAt: Scalars['String'];
  createdBy?: Maybe<Person>;
  updatedBy?: Maybe<Person>;
  metadata?: Maybe<ResourceProviderMetadata>;
};


export type SecretProviderWebhooksArgs = {
  id?: Maybe<Scalars['ID']>;
};

export type SecretProviderInput = {
  name: Scalars['String'];
};

/** A slack channel */
export type SlackChannel = {
  __typename?: 'SlackChannel';
  /** The id of the chat team */
  chatTeamId?: Maybe<Scalars['String']>;
  /** The name of the channel */
  name?: Maybe<Scalars['String']>;
  /** The id of the channel */
  id?: Maybe<Scalars['String']>;
};

/** Fingerprint of some artifact in an SCM repository */
export type SourceFingerprint = {
  data?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  displayType?: Maybe<Scalars['String']>;
  displayValue?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  name: Scalars['String'];
  sha: Scalars['String'];
  type: Scalars['String'];
};

export type SourceFingerprintStats = {
  __typename?: 'SourceFingerprintStats';
  fingerprint: SourceFingerprint;
  /** How many repos has this fingerprint been seen in? */
  inRepos: Scalars['Int'];
};

/** Stage-Node */
export type Stage = {
  __typename?: 'Stage';
  /** internal node id */
  _id?: Maybe<Scalars['Int']>;
  /** The name of this stage */
  name?: Maybe<Scalars['String']>;
  /** The pipeline that this stage belongs to */
  pipeline?: Maybe<Pipeline>;
  /** The list of jobs associated with this stage */
  jobs?: Maybe<Array<Maybe<Job>>>;
};

/** Status-Node */
export type Status = {
  __typename?: 'Status';
  /** internal node id */
  _id?: Maybe<Scalars['Int']>;
  /** id of  Status */
  id?: Maybe<Scalars['ID']>;
  /** state of  Status */
  state?: Maybe<StatusState>;
  /** description of  Status */
  description?: Maybe<Scalars['String']>;
  /** targetUrl of  Status */
  targetUrl?: Maybe<Scalars['String']>;
  /** context of  Status */
  context?: Maybe<Scalars['String']>;
  /** timestamp of  Status */
  timestamp?: Maybe<Scalars['String']>;
  /** Status commit Commit */
  commit?: Maybe<Commit>;
};


/** Status-Node */
export type StatusCommitArgs = {
  sha?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
};

/** Enum for StatusState */
export enum StatusState {
  /** Value for pending */
  Pending = 'pending',
  /** Value for success */
  Success = 'success',
  /** Value for error */
  Error = 'error',
  /** Value for failure */
  Failure = 'failure'
}

export type Subscription = {
  __typename?: 'Subscription';
  /** Subscribe to OnSchedule cron events */
  OnSchedule: Array<OnSchedule>;
  Issue?: Maybe<Array<Maybe<Issue>>>;
  Comment?: Maybe<Array<Maybe<Comment>>>;
  Label?: Maybe<Array<Maybe<Label>>>;
  Repo?: Maybe<Array<Maybe<Repo>>>;
  Commit?: Maybe<Array<Maybe<Commit>>>;
  Push?: Maybe<Array<Maybe<Push>>>;
  Build?: Maybe<Array<Maybe<Build>>>;
  Pipeline?: Maybe<Array<Maybe<Pipeline>>>;
  Stage?: Maybe<Array<Maybe<Stage>>>;
  Job?: Maybe<Array<Maybe<Job>>>;
  Workflow?: Maybe<Array<Maybe<Workflow>>>;
  Branch?: Maybe<Array<Maybe<Branch>>>;
  DeletedBranch?: Maybe<Array<Maybe<DeletedBranch>>>;
  ChatId?: Maybe<Array<Maybe<ChatId>>>;
  ChatChannel?: Maybe<Array<Maybe<ChatChannel>>>;
  PullRequest?: Maybe<Array<Maybe<PullRequest>>>;
  Org?: Maybe<Array<Maybe<Org>>>;
  GitHubAppInstallation?: Maybe<Array<Maybe<GitHubAppInstallation>>>;
  SCMId?: Maybe<Array<Maybe<ScmId>>>;
  GitHubAppResourceUser?: Maybe<Array<Maybe<GitHubAppResourceUser>>>;
  GitHubId?: Maybe<Array<Maybe<GitHubId>>>;
  Tag?: Maybe<Array<Maybe<Tag>>>;
  K8Pod?: Maybe<Array<Maybe<K8Pod>>>;
  K8Container?: Maybe<Array<Maybe<K8Container>>>;
  DockerImage?: Maybe<Array<Maybe<DockerImage>>>;
  ImageLinked?: Maybe<Array<Maybe<ImageLinked>>>;
  Release?: Maybe<Array<Maybe<Release>>>;
  HerokuApp?: Maybe<Array<Maybe<HerokuApp>>>;
  Application?: Maybe<Array<Maybe<Application>>>;
  Team?: Maybe<Array<Maybe<Team>>>;
  ChatTeam?: Maybe<Array<Maybe<ChatTeam>>>;
  Person?: Maybe<Array<Maybe<Person>>>;
  Status?: Maybe<Array<Maybe<Status>>>;
  CheckSuite?: Maybe<Array<Maybe<CheckSuite>>>;
  CheckRun?: Maybe<Array<Maybe<CheckRun>>>;
  Email?: Maybe<Array<Maybe<Email>>>;
  PushImpact?: Maybe<Array<Maybe<PushImpact>>>;
  PullRequestImpact?: Maybe<Array<Maybe<PullRequestImpact>>>;
  GitHubProvider?: Maybe<Array<Maybe<GitHubProvider>>>;
  SCMProvider?: Maybe<Array<Maybe<ScmProvider>>>;
  GitHubAppResourceProvider?: Maybe<Array<Maybe<GitHubAppResourceProvider>>>;
  UserJoinedChannel?: Maybe<Array<Maybe<UserJoinedChannel>>>;
  Webhook?: Maybe<Array<Maybe<Webhook>>>;
  ChannelLink?: Maybe<Array<Maybe<ChannelLink>>>;
  Review?: Maybe<Array<Maybe<Review>>>;
  DockerRegistryProvider?: Maybe<Array<Maybe<DockerRegistryProvider>>>;
  DockerHubRegistryProvider: Array<DockerHubRegistryProvider>;
  GoogleContainerRegistryProvider: Array<GoogleContainerRegistryProvider>;
  JFrogDockerRegistryProvider: Array<JFrogDockerRegistryProvider>;
  DockerRegistry: Array<DockerRegistry>;
  DockerRegistryImage: Array<DockerRegistryImage>;
  GoogleCloudPlatformProvider: Array<GoogleCloudPlatformProvider>;
  KubernetesClusterProvider: Array<KubernetesClusterProvider>;
  ArtifactoryMavenRepositoryProvider: Array<ArtifactoryMavenRepositoryProvider>;
  MavenRepositoryProvider: Array<MavenRepositoryProvider>;
  NpmJSRegistryProvider: Array<NpmJsRegistryProvider>;
  NpmRegistryProvider: Array<NpmRegistryProvider>;
  GitHubNpmRegistryProvider: Array<GitHubNpmRegistryProvider>;
  ResourceProvider?: Maybe<Array<Maybe<ResourceProvider>>>;
  Resource: Array<Resource>;
  GenericResourceUser?: Maybe<Array<Maybe<GenericResourceUser>>>;
  ResourceUser?: Maybe<Array<Maybe<ResourceUser>>>;
  SystemAccount?: Maybe<Array<Maybe<SystemAccount>>>;
  Credential?: Maybe<Array<Maybe<Credential>>>;
  OAuthToken?: Maybe<Array<Maybe<OAuthToken>>>;
  Password?: Maybe<Array<Maybe<Password>>>;
  GenericResourceProvider?: Maybe<Array<Maybe<GenericResourceProvider>>>;
  BinaryRepositoryProvider?: Maybe<Array<Maybe<BinaryRepositoryProvider>>>;
  SecretProvider: Array<SecretProvider>;
  CommitFingerprintImpact: Array<Maybe<CommitFingerprintImpact>>;
  /** Return AtmJobs */
  AtmJob?: Maybe<Array<AtmJob>>;
  /** Return AtmJobTasks */
  AtmJobTask?: Maybe<Array<AtmJobTask>>;
  AtomistLog: Array<AtomistLog>;
  /** Auto-generated subscription for Card */
  Card?: Maybe<Array<Maybe<Card>>>;
  /** Auto-generated subscription for Notification */
  Notification?: Maybe<Array<Maybe<Notification>>>;
  /** Auto-generated subscription for CommitIssueRelationship */
  CommitIssueRelationship?: Maybe<Array<Maybe<CommitIssueRelationship>>>;
  /** Auto-generated subscription for Deployment */
  Deployment?: Maybe<Array<Maybe<Deployment>>>;
  /** Auto-generated subscription for IssueRelationship */
  IssueRelationship?: Maybe<Array<Maybe<IssueRelationship>>>;
  /** Auto-generated subscription for SdmGoal */
  SdmGoal?: Maybe<Array<Maybe<SdmGoal>>>;
  /** Auto-generated subscription for SdmGoalSet */
  SdmGoalSet?: Maybe<Array<Maybe<SdmGoalSet>>>;
  /** Auto-generated subscription for SdmGoalDisplay */
  SdmGoalDisplay?: Maybe<Array<Maybe<SdmGoalDisplay>>>;
  /** Auto-generated subscription for SdmBuildIdentifier */
  SdmBuildIdentifier?: Maybe<Array<Maybe<SdmBuildIdentifier>>>;
  /** Auto-generated subscription for SdmDeployEnablement */
  SdmDeployEnablement?: Maybe<Array<Maybe<SdmDeployEnablement>>>;
  /** Auto-generated subscription for SdmVersion */
  SdmVersion?: Maybe<Array<Maybe<SdmVersion>>>;
  /** Auto-generated subscription for SdmGoalSetBadge */
  SdmGoalSetBadge?: Maybe<Array<Maybe<SdmGoalSetBadge>>>;
  /** Auto-generated subscription for SdmPreference */
  SdmPreference?: Maybe<Array<Maybe<SdmPreference>>>;
  /** Auto-generated subscription for SdmRepoProvenance */
  SdmRepoProvenance?: Maybe<Array<Maybe<SdmRepoProvenance>>>;
  /** Auto-generated subscription for PolicyLog */
  PolicyLog?: Maybe<Array<Maybe<PolicyLog>>>;
  /** Auto-generated subscription for PolicyCompliance */
  PolicyCompliance?: Maybe<Array<Maybe<PolicyCompliance>>>;
  /** Auto-generated subscription for PolicyTargetStream */
  PolicyTargetStream?: Maybe<Array<Maybe<PolicyTargetStream>>>;
  /** Auto-generated subscription for PolicyTarget */
  PolicyTarget?: Maybe<Array<Maybe<PolicyTarget>>>;
  /** Auto-generated subscription for LifecycleAttachment */
  LifecycleAttachment?: Maybe<Array<Maybe<LifecycleAttachment>>>;
  /** Auto-generated subscription for AspectRegistration */
  AspectRegistration?: Maybe<Array<Maybe<AspectRegistration>>>;
  RepoOnboarded?: Maybe<Array<Maybe<RepoOnboarded>>>;
};


export type SubscriptionIssueArgs = {
  id?: Maybe<Scalars['ID']>;
  number?: Maybe<Scalars['Float']>;
  name?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  body?: Maybe<Scalars['String']>;
  state?: Maybe<IssueState>;
  timestamp?: Maybe<Scalars['String']>;
  action?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  closedAt?: Maybe<Scalars['String']>;
  ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  numbers?: Maybe<Array<Maybe<Scalars['Float']>>>;
  names?: Maybe<Array<Maybe<Scalars['String']>>>;
  titles?: Maybe<Array<Maybe<Scalars['String']>>>;
  bodys?: Maybe<Array<Maybe<Scalars['String']>>>;
  states?: Maybe<Array<Maybe<IssueState>>>;
  timestamps?: Maybe<Array<Maybe<Scalars['String']>>>;
  actions?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAts?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAts?: Maybe<Array<Maybe<Scalars['String']>>>;
  closedAts?: Maybe<Array<Maybe<Scalars['String']>>>;
  orderBy?: Maybe<Array<Maybe<_IssueOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  filter?: Maybe<_IssueFilter>;
};


export type SubscriptionCommentArgs = {
  id?: Maybe<Scalars['ID']>;
  body?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  commentId?: Maybe<Scalars['String']>;
  gitHubId?: Maybe<Scalars['String']>;
  path?: Maybe<Scalars['String']>;
  position?: Maybe<Scalars['String']>;
  htmlUrl?: Maybe<Scalars['String']>;
  commentType?: Maybe<CommentCommentType>;
  ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  bodys?: Maybe<Array<Maybe<Scalars['String']>>>;
  timestamps?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAts?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAts?: Maybe<Array<Maybe<Scalars['String']>>>;
  commentIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  gitHubIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  paths?: Maybe<Array<Maybe<Scalars['String']>>>;
  positions?: Maybe<Array<Maybe<Scalars['String']>>>;
  htmlUrls?: Maybe<Array<Maybe<Scalars['String']>>>;
  commentTypes?: Maybe<Array<Maybe<CommentCommentType>>>;
  orderBy?: Maybe<Array<Maybe<_CommentOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type SubscriptionLabelArgs = {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  default?: Maybe<Scalars['String']>;
  color?: Maybe<Scalars['String']>;
  ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  names?: Maybe<Array<Maybe<Scalars['String']>>>;
  defaults?: Maybe<Array<Maybe<Scalars['String']>>>;
  colors?: Maybe<Array<Maybe<Scalars['String']>>>;
  orderBy?: Maybe<Array<Maybe<_LabelOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type SubscriptionRepoArgs = {
  id?: Maybe<Scalars['ID']>;
  owner?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  allowRebaseMerge?: Maybe<Scalars['Boolean']>;
  allowSquashMerge?: Maybe<Scalars['Boolean']>;
  allowMergeCommit?: Maybe<Scalars['Boolean']>;
  repoId?: Maybe<Scalars['String']>;
  gitHubId?: Maybe<Scalars['String']>;
  defaultBranch?: Maybe<Scalars['String']>;
  ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  owners?: Maybe<Array<Maybe<Scalars['String']>>>;
  names?: Maybe<Array<Maybe<Scalars['String']>>>;
  repoIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  gitHubIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  defaultBranchs?: Maybe<Array<Maybe<Scalars['String']>>>;
  orderBy?: Maybe<Array<Maybe<_RepoOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  filter?: Maybe<_RepoFilter>;
};


export type SubscriptionCommitArgs = {
  id?: Maybe<Scalars['ID']>;
  sha?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
  shas?: Maybe<Array<Maybe<Scalars['String']>>>;
  messages?: Maybe<Array<Maybe<Scalars['String']>>>;
  timestamps?: Maybe<Array<Maybe<Scalars['String']>>>;
  orderBy?: Maybe<Array<Maybe<_CommitOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  filter?: Maybe<_CommitFilter>;
};


export type SubscriptionPushArgs = {
  id?: Maybe<Scalars['ID']>;
  timestamp?: Maybe<Scalars['String']>;
  branch?: Maybe<Scalars['String']>;
  ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  timestamps?: Maybe<Array<Maybe<Scalars['String']>>>;
  branchs?: Maybe<Array<Maybe<Scalars['String']>>>;
  orderBy?: Maybe<Array<Maybe<_PushOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  filter?: Maybe<_PushFilter>;
};


export type SubscriptionBuildArgs = {
  id?: Maybe<Scalars['ID']>;
  buildId?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  status?: Maybe<BuildStatus>;
  buildUrl?: Maybe<Scalars['String']>;
  compareUrl?: Maybe<Scalars['String']>;
  trigger?: Maybe<BuildTrigger>;
  provider?: Maybe<Scalars['String']>;
  pullRequestNumber?: Maybe<Scalars['Float']>;
  startedAt?: Maybe<Scalars['String']>;
  finishedAt?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
  workflowId?: Maybe<Scalars['String']>;
  jobName?: Maybe<Scalars['String']>;
  jobId?: Maybe<Scalars['String']>;
  data?: Maybe<Scalars['String']>;
  ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  buildIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  numbers?: Maybe<Array<Maybe<Scalars['Int']>>>;
  names?: Maybe<Array<Maybe<Scalars['String']>>>;
  statuss?: Maybe<Array<Maybe<BuildStatus>>>;
  buildUrls?: Maybe<Array<Maybe<Scalars['String']>>>;
  compareUrls?: Maybe<Array<Maybe<Scalars['String']>>>;
  triggers?: Maybe<Array<Maybe<BuildTrigger>>>;
  providers?: Maybe<Array<Maybe<Scalars['String']>>>;
  pullRequestNumbers?: Maybe<Array<Maybe<Scalars['Float']>>>;
  startedAts?: Maybe<Array<Maybe<Scalars['String']>>>;
  finishedAts?: Maybe<Array<Maybe<Scalars['String']>>>;
  timestamps?: Maybe<Array<Maybe<Scalars['String']>>>;
  workflowIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  jobNames?: Maybe<Array<Maybe<Scalars['String']>>>;
  jobIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  datas?: Maybe<Array<Maybe<Scalars['String']>>>;
  orderBy?: Maybe<Array<Maybe<_BuildOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type SubscriptionPipelineArgs = {
  _id?: Maybe<Scalars['Int']>;
  pipelineId?: Maybe<Scalars['ID']>;
  provider?: Maybe<Scalars['String']>;
  Status?: Maybe<PipelineStatus>;
};


export type SubscriptionStageArgs = {
  _id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
};


export type SubscriptionJobArgs = {
  _id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  jobId?: Maybe<Scalars['ID']>;
};


export type SubscriptionWorkflowArgs = {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  workflowId?: Maybe<Scalars['String']>;
  provider?: Maybe<Scalars['String']>;
  config?: Maybe<Scalars['String']>;
  ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  names?: Maybe<Array<Maybe<Scalars['String']>>>;
  workflowIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  providers?: Maybe<Array<Maybe<Scalars['String']>>>;
  configs?: Maybe<Array<Maybe<Scalars['String']>>>;
  orderBy?: Maybe<Array<Maybe<_WorkflowOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type SubscriptionBranchArgs = {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
  isRemote?: Maybe<Scalars['Boolean']>;
  remoteRepoHtmlUrl?: Maybe<Scalars['String']>;
  ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  names?: Maybe<Array<Maybe<Scalars['String']>>>;
  timestamps?: Maybe<Array<Maybe<Scalars['String']>>>;
  remoteRepoHtmlUrls?: Maybe<Array<Maybe<Scalars['String']>>>;
  orderBy?: Maybe<Array<Maybe<_BranchOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type SubscriptionDeletedBranchArgs = {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
  ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  names?: Maybe<Array<Maybe<Scalars['String']>>>;
  timestamps?: Maybe<Array<Maybe<Scalars['String']>>>;
  orderBy?: Maybe<Array<Maybe<_DeletedBranchOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type SubscriptionChatIdArgs = {
  id?: Maybe<Scalars['ID']>;
  screenName?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
  provider?: Maybe<Scalars['String']>;
  isAtomistBot?: Maybe<Scalars['String']>;
  isOwner?: Maybe<Scalars['String']>;
  isPrimaryOwner?: Maybe<Scalars['String']>;
  isAdmin?: Maybe<Scalars['String']>;
  isBot?: Maybe<Scalars['String']>;
  timezoneLabel?: Maybe<Scalars['String']>;
  ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  screenNames?: Maybe<Array<Maybe<Scalars['String']>>>;
  userIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  providers?: Maybe<Array<Maybe<Scalars['String']>>>;
  timezoneLabels?: Maybe<Array<Maybe<Scalars['String']>>>;
  orderBy?: Maybe<Array<Maybe<_ChatIdOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type SubscriptionChatChannelArgs = {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  provider?: Maybe<Scalars['String']>;
  normalizedName?: Maybe<Scalars['String']>;
  channelId?: Maybe<Scalars['String']>;
  isDefault?: Maybe<Scalars['Boolean']>;
  botInvitedSelf?: Maybe<Scalars['Boolean']>;
  archived?: Maybe<Scalars['Boolean']>;
  ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  names?: Maybe<Array<Maybe<Scalars['String']>>>;
  providers?: Maybe<Array<Maybe<Scalars['String']>>>;
  normalizedNames?: Maybe<Array<Maybe<Scalars['String']>>>;
  channelIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  orderBy?: Maybe<Array<Maybe<_ChatChannelOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  filter?: Maybe<_ChatChannelFilter>;
};


export type SubscriptionPullRequestArgs = {
  id?: Maybe<Scalars['ID']>;
  number?: Maybe<Scalars['Float']>;
  prId?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  body?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  merged?: Maybe<Scalars['Boolean']>;
  timestamp?: Maybe<Scalars['String']>;
  baseBranchName?: Maybe<Scalars['String']>;
  branchName?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  closedAt?: Maybe<Scalars['String']>;
  mergedAt?: Maybe<Scalars['String']>;
  mergeStatus?: Maybe<MergeStatus>;
  action?: Maybe<PullRequestAction>;
  ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  numbers?: Maybe<Array<Maybe<Scalars['Float']>>>;
  prIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  names?: Maybe<Array<Maybe<Scalars['String']>>>;
  bodys?: Maybe<Array<Maybe<Scalars['String']>>>;
  states?: Maybe<Array<Maybe<Scalars['String']>>>;
  timestamps?: Maybe<Array<Maybe<Scalars['String']>>>;
  baseBranchNames?: Maybe<Array<Maybe<Scalars['String']>>>;
  branchNames?: Maybe<Array<Maybe<Scalars['String']>>>;
  titles?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAts?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedAts?: Maybe<Array<Maybe<Scalars['String']>>>;
  closedAts?: Maybe<Array<Maybe<Scalars['String']>>>;
  mergedAts?: Maybe<Array<Maybe<Scalars['String']>>>;
  mergeStatuss?: Maybe<Array<Maybe<MergeStatus>>>;
  actions?: Maybe<Array<Maybe<PullRequestAction>>>;
  orderBy?: Maybe<Array<Maybe<_PullRequestOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  filter?: Maybe<_PullRequestFilter>;
};


export type SubscriptionOrgArgs = {
  id?: Maybe<Scalars['ID']>;
  owner?: Maybe<Scalars['String']>;
  ownerType?: Maybe<OwnerType>;
  ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  owners?: Maybe<Array<Maybe<Scalars['String']>>>;
  ownerTypes?: Maybe<Array<Maybe<OwnerType>>>;
  orderBy?: Maybe<Array<Maybe<_OrgOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  filter?: Maybe<_OrgFilter>;
};


export type SubscriptionGitHubAppInstallationArgs = {
  id?: Maybe<Scalars['ID']>;
  owner?: Maybe<Scalars['String']>;
  ownerType?: Maybe<OwnerType>;
  ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  owners?: Maybe<Array<Maybe<Scalars['String']>>>;
  orderBy?: Maybe<Array<Maybe<_GitHubAppInstallationOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type SubscriptionScmIdArgs = {
  id?: Maybe<Scalars['ID']>;
  login?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  avatar?: Maybe<Scalars['String']>;
  logins?: Maybe<Array<Maybe<Scalars['String']>>>;
  names?: Maybe<Array<Maybe<Scalars['String']>>>;
  avatars?: Maybe<Array<Maybe<Scalars['String']>>>;
  orderBy?: Maybe<Array<Maybe<_ScmIdOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type SubscriptionGitHubAppResourceUserArgs = {
  id?: Maybe<Scalars['ID']>;
  login?: Maybe<Scalars['String']>;
  orderBy?: Maybe<Array<Maybe<_GitHubAppResourceUserOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type SubscriptionGitHubIdArgs = {
  id?: Maybe<Scalars['ID']>;
  login?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  logins?: Maybe<Array<Maybe<Scalars['String']>>>;
  names?: Maybe<Array<Maybe<Scalars['String']>>>;
  orderBy?: Maybe<Array<Maybe<_GitHubIdOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type SubscriptionTagArgs = {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  ref?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
  ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  names?: Maybe<Array<Maybe<Scalars['String']>>>;
  descriptions?: Maybe<Array<Maybe<Scalars['String']>>>;
  refs?: Maybe<Array<Maybe<Scalars['String']>>>;
  timestamps?: Maybe<Array<Maybe<Scalars['String']>>>;
  orderBy?: Maybe<Array<Maybe<_TagOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  filter?: Maybe<_TagFilter>;
};


export type SubscriptionK8PodArgs = {
  name?: Maybe<Scalars['String']>;
  phase?: Maybe<Scalars['String']>;
  environment?: Maybe<Scalars['String']>;
  clusterName?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
  baseName?: Maybe<Scalars['String']>;
  namespace?: Maybe<Scalars['String']>;
  statusJSON?: Maybe<Scalars['String']>;
  host?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  specsJSON?: Maybe<Scalars['String']>;
  envJSON?: Maybe<Scalars['String']>;
  metadataJSON?: Maybe<Scalars['String']>;
  containersCrashLoopBackOff?: Maybe<Scalars['Boolean']>;
  resourceVersion?: Maybe<Scalars['Int']>;
  names?: Maybe<Array<Maybe<Scalars['String']>>>;
  phases?: Maybe<Array<Maybe<Scalars['String']>>>;
  environments?: Maybe<Array<Maybe<Scalars['String']>>>;
  timestamps?: Maybe<Array<Maybe<Scalars['String']>>>;
  baseNames?: Maybe<Array<Maybe<Scalars['String']>>>;
  namespaces?: Maybe<Array<Maybe<Scalars['String']>>>;
  statusJSONs?: Maybe<Array<Maybe<Scalars['String']>>>;
  hosts?: Maybe<Array<Maybe<Scalars['String']>>>;
  states?: Maybe<Array<Maybe<Scalars['String']>>>;
  specsJSONs?: Maybe<Array<Maybe<Scalars['String']>>>;
  envJSONs?: Maybe<Array<Maybe<Scalars['String']>>>;
  metadataJSONs?: Maybe<Array<Maybe<Scalars['String']>>>;
  resourceVersions?: Maybe<Array<Maybe<Scalars['Int']>>>;
  orderBy?: Maybe<Array<Maybe<_K8PodOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  filter?: Maybe<_K8PodFilter>;
};


export type SubscriptionK8ContainerArgs = {
  name?: Maybe<Scalars['String']>;
  imageName?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
  environment?: Maybe<Scalars['String']>;
  clusterName?: Maybe<Scalars['String']>;
  containerJSON?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  stateReason?: Maybe<Scalars['String']>;
  ready?: Maybe<Scalars['Boolean']>;
  restartCount?: Maybe<Scalars['Int']>;
  statusJSON?: Maybe<Scalars['String']>;
  resourceVersion?: Maybe<Scalars['Int']>;
  containerID?: Maybe<Scalars['String']>;
  names?: Maybe<Array<Maybe<Scalars['String']>>>;
  imageNames?: Maybe<Array<Maybe<Scalars['String']>>>;
  timestamps?: Maybe<Array<Maybe<Scalars['String']>>>;
  environments?: Maybe<Array<Maybe<Scalars['String']>>>;
  containerJSONs?: Maybe<Array<Maybe<Scalars['String']>>>;
  states?: Maybe<Array<Maybe<Scalars['String']>>>;
  stateReasons?: Maybe<Array<Maybe<Scalars['String']>>>;
  restartCounts?: Maybe<Array<Maybe<Scalars['Int']>>>;
  statusJSONs?: Maybe<Array<Maybe<Scalars['String']>>>;
  resourceVersions?: Maybe<Array<Maybe<Scalars['Int']>>>;
  containerIDs?: Maybe<Array<Maybe<Scalars['String']>>>;
  orderBy?: Maybe<Array<Maybe<_K8ContainerOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type SubscriptionDockerImageArgs = {
  image?: Maybe<Scalars['String']>;
  imageName?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
  images?: Maybe<Array<Maybe<Scalars['String']>>>;
  imageNames?: Maybe<Array<Maybe<Scalars['String']>>>;
  timestamps?: Maybe<Array<Maybe<Scalars['String']>>>;
  orderBy?: Maybe<Array<Maybe<_DockerImageOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type SubscriptionImageLinkedArgs = {
  timestamp?: Maybe<Scalars['String']>;
  timestamps?: Maybe<Array<Maybe<Scalars['String']>>>;
  orderBy?: Maybe<Array<Maybe<_ImageLinkedOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type SubscriptionReleaseArgs = {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
  ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  names?: Maybe<Array<Maybe<Scalars['String']>>>;
  timestamps?: Maybe<Array<Maybe<Scalars['String']>>>;
  orderBy?: Maybe<Array<Maybe<_ReleaseOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type SubscriptionHerokuAppArgs = {
  app?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
  user?: Maybe<Scalars['String']>;
  appId?: Maybe<Scalars['String']>;
  release?: Maybe<Scalars['String']>;
  apps?: Maybe<Array<Maybe<Scalars['String']>>>;
  urls?: Maybe<Array<Maybe<Scalars['String']>>>;
  timestamps?: Maybe<Array<Maybe<Scalars['String']>>>;
  users?: Maybe<Array<Maybe<Scalars['String']>>>;
  appIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  releases?: Maybe<Array<Maybe<Scalars['String']>>>;
  orderBy?: Maybe<Array<Maybe<_HerokuAppOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type SubscriptionApplicationArgs = {
  id?: Maybe<Scalars['ID']>;
  state?: Maybe<Scalars['String']>;
  host?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
  domain?: Maybe<Scalars['String']>;
  data?: Maybe<Scalars['String']>;
  ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  states?: Maybe<Array<Maybe<Scalars['String']>>>;
  hosts?: Maybe<Array<Maybe<Scalars['String']>>>;
  timestamps?: Maybe<Array<Maybe<Scalars['String']>>>;
  domains?: Maybe<Array<Maybe<Scalars['String']>>>;
  datas?: Maybe<Array<Maybe<Scalars['String']>>>;
  orderBy?: Maybe<Array<Maybe<_ApplicationOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type SubscriptionTeamArgs = {
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  iconUrl?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['String']>;
  ids?: Maybe<Array<Maybe<Scalars['String']>>>;
  names?: Maybe<Array<Maybe<Scalars['String']>>>;
  descriptions?: Maybe<Array<Maybe<Scalars['String']>>>;
  iconUrls?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdAts?: Maybe<Array<Maybe<Scalars['String']>>>;
  orderBy?: Maybe<Array<Maybe<_TeamOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type SubscriptionChatTeamArgs = {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  provider?: Maybe<Scalars['String']>;
  tenantId?: Maybe<Scalars['String']>;
  domain?: Maybe<Scalars['String']>;
  messageCount?: Maybe<Scalars['Float']>;
  emailDomain?: Maybe<Scalars['String']>;
  ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  names?: Maybe<Array<Maybe<Scalars['String']>>>;
  providers?: Maybe<Array<Maybe<Scalars['String']>>>;
  domains?: Maybe<Array<Maybe<Scalars['String']>>>;
  messageCounts?: Maybe<Array<Maybe<Scalars['Float']>>>;
  emailDomains?: Maybe<Array<Maybe<Scalars['String']>>>;
  orderBy?: Maybe<Array<Maybe<_ChatTeamOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type SubscriptionPersonArgs = {
  id?: Maybe<Scalars['ID']>;
  forename?: Maybe<Scalars['String']>;
  surname?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  forenames?: Maybe<Array<Maybe<Scalars['String']>>>;
  surnames?: Maybe<Array<Maybe<Scalars['String']>>>;
  names?: Maybe<Array<Maybe<Scalars['String']>>>;
  orderBy?: Maybe<Array<Maybe<_PersonOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type SubscriptionStatusArgs = {
  id?: Maybe<Scalars['ID']>;
  state?: Maybe<StatusState>;
  description?: Maybe<Scalars['String']>;
  targetUrl?: Maybe<Scalars['String']>;
  context?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
  ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  states?: Maybe<Array<Maybe<StatusState>>>;
  descriptions?: Maybe<Array<Maybe<Scalars['String']>>>;
  targetUrls?: Maybe<Array<Maybe<Scalars['String']>>>;
  contexts?: Maybe<Array<Maybe<Scalars['String']>>>;
  timestamps?: Maybe<Array<Maybe<Scalars['String']>>>;
  orderBy?: Maybe<Array<Maybe<_StatusOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type SubscriptionCheckSuiteArgs = {
  id?: Maybe<Scalars['ID']>;
  ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  orderBy?: Maybe<Array<Maybe<_CheckSuiteOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  filter?: Maybe<_CheckSuiteFilter>;
};


export type SubscriptionCheckRunArgs = {
  id?: Maybe<Scalars['ID']>;
  ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  orderBy?: Maybe<Array<Maybe<_CheckRunOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  filter?: Maybe<_CheckRunFilter>;
};


export type SubscriptionEmailArgs = {
  address?: Maybe<Scalars['String']>;
  addresss?: Maybe<Array<Maybe<Scalars['String']>>>;
  orderBy?: Maybe<Array<Maybe<_EmailOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type SubscriptionPushImpactArgs = {
  id?: Maybe<Scalars['ID']>;
  url?: Maybe<Scalars['String']>;
  data?: Maybe<Scalars['String']>;
  ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  urls?: Maybe<Array<Maybe<Scalars['String']>>>;
  datas?: Maybe<Array<Maybe<Scalars['String']>>>;
  orderBy?: Maybe<Array<Maybe<_PushImpactOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type SubscriptionPullRequestImpactArgs = {
  id?: Maybe<Scalars['ID']>;
  url?: Maybe<Scalars['String']>;
  data?: Maybe<Scalars['String']>;
  ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  urls?: Maybe<Array<Maybe<Scalars['String']>>>;
  datas?: Maybe<Array<Maybe<Scalars['String']>>>;
  orderBy?: Maybe<Array<Maybe<_PullRequestImpactOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type SubscriptionGitHubProviderArgs = {
  id?: Maybe<Scalars['ID']>;
  private?: Maybe<Scalars['Boolean']>;
  url?: Maybe<Scalars['String']>;
  providerId?: Maybe<Scalars['String']>;
  apiUrl?: Maybe<Scalars['String']>;
  gitUrl?: Maybe<Scalars['String']>;
  providerType?: Maybe<ProviderType>;
  ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  urls?: Maybe<Array<Maybe<Scalars['String']>>>;
  providerIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  apiUrls?: Maybe<Array<Maybe<Scalars['String']>>>;
  gitUrls?: Maybe<Array<Maybe<Scalars['String']>>>;
  providerTypes?: Maybe<Array<Maybe<ProviderType>>>;
  orderBy?: Maybe<Array<Maybe<_GitHubProviderOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type SubscriptionScmProviderArgs = {
  authProviderId?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  private?: Maybe<Scalars['Boolean']>;
  url?: Maybe<Scalars['String']>;
  providerId?: Maybe<Scalars['String']>;
  apiUrl?: Maybe<Scalars['String']>;
  gitUrl?: Maybe<Scalars['String']>;
  providerType?: Maybe<ProviderType>;
  ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  urls?: Maybe<Array<Maybe<Scalars['String']>>>;
  providerIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  apiUrls?: Maybe<Array<Maybe<Scalars['String']>>>;
  gitUrls?: Maybe<Array<Maybe<Scalars['String']>>>;
  providerTypes?: Maybe<Array<Maybe<ProviderType>>>;
  orderBy?: Maybe<Array<Maybe<_ScmProviderOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type SubscriptionGitHubAppResourceProviderArgs = {
  id?: Maybe<Scalars['ID']>;
  providerId?: Maybe<Scalars['String']>;
  _id?: Maybe<Scalars['Int']>;
};


export type SubscriptionUserJoinedChannelArgs = {
  id?: Maybe<Scalars['ID']>;
  ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  orderBy?: Maybe<Array<Maybe<_UserJoinedChannelOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type SubscriptionWebhookArgs = {
  id?: Maybe<Scalars['ID']>;
  resourceProviderId?: Maybe<Scalars['String']>;
};


export type SubscriptionChannelLinkArgs = {
  id?: Maybe<Scalars['ID']>;
  ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  orderBy?: Maybe<Array<Maybe<_ChannelLinkOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type SubscriptionReviewArgs = {
  id?: Maybe<Scalars['ID']>;
  gitHubId?: Maybe<Scalars['String']>;
  reviewId?: Maybe<Scalars['String']>;
  body?: Maybe<Scalars['String']>;
  state?: Maybe<ReviewState>;
  submittedAt?: Maybe<Scalars['String']>;
  htmlUrl?: Maybe<Scalars['String']>;
  ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  gitHubIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  reviewIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  bodys?: Maybe<Array<Maybe<Scalars['String']>>>;
  states?: Maybe<Array<Maybe<ReviewState>>>;
  submittedAts?: Maybe<Array<Maybe<Scalars['String']>>>;
  htmlUrls?: Maybe<Array<Maybe<Scalars['String']>>>;
  orderBy?: Maybe<Array<Maybe<_ReviewOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type SubscriptionDockerRegistryProviderArgs = {
  id?: Maybe<Scalars['ID']>;
  url?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  type?: Maybe<DockerRegistryType>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type SubscriptionDockerHubRegistryProviderArgs = {
  _id?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type SubscriptionGoogleContainerRegistryProviderArgs = {
  _id?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type SubscriptionJFrogDockerRegistryProviderArgs = {
  _id?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type SubscriptionDockerRegistryArgs = {
  _id?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type SubscriptionDockerRegistryImageArgs = {
  _id?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  filter?: Maybe<_DockerRegistryImageFilter>;
};


export type SubscriptionGoogleCloudPlatformProviderArgs = {
  _id?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type SubscriptionKubernetesClusterProviderArgs = {
  _id?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type SubscriptionArtifactoryMavenRepositoryProviderArgs = {
  _id?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type SubscriptionMavenRepositoryProviderArgs = {
  _id?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type SubscriptionNpmJsRegistryProviderArgs = {
  _id?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type SubscriptionNpmRegistryProviderArgs = {
  _id?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type SubscriptionGitHubNpmRegistryProviderArgs = {
  _id?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type SubscriptionResourceProviderArgs = {
  authProviderId?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  orderBy?: Maybe<Array<Maybe<_ResourceProviderOrdering>>>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type SubscriptionResourceArgs = {
  id?: Maybe<Scalars['ID']>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type SubscriptionGenericResourceUserArgs = {
  login?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  _id?: Maybe<Scalars['Int']>;
};


export type SubscriptionResourceUserArgs = {
  login?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  _id?: Maybe<Scalars['Int']>;
};


export type SubscriptionSystemAccountArgs = {
  id?: Maybe<Scalars['ID']>;
  _id?: Maybe<Scalars['Int']>;
};


export type SubscriptionCredentialArgs = {
  id?: Maybe<Scalars['ID']>;
  _id?: Maybe<Scalars['Int']>;
};


export type SubscriptionOAuthTokenArgs = {
  id?: Maybe<Scalars['ID']>;
  _id?: Maybe<Scalars['Int']>;
};


export type SubscriptionPasswordArgs = {
  id?: Maybe<Scalars['ID']>;
  _id?: Maybe<Scalars['Int']>;
};


export type SubscriptionGenericResourceProviderArgs = {
  id?: Maybe<Scalars['ID']>;
  url?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type SubscriptionBinaryRepositoryProviderArgs = {
  id?: Maybe<Scalars['ID']>;
  url?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  type?: Maybe<BinaryRepositoryType>;
  _id?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type SubscriptionSecretProviderArgs = {
  _id?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
};


export type SubscriptionCommitFingerprintImpactArgs = {
  id?: Maybe<Scalars['ID']>;
  type?: Maybe<Scalars['String']>;
};


export type SubscriptionAtmJobArgs = {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  owner?: Maybe<Scalars['String']>;
  state?: Maybe<AtmJobState>;
};


export type SubscriptionAtmJobTaskArgs = {
  id?: Maybe<Scalars['ID']>;
  jobId?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  owner?: Maybe<Scalars['String']>;
  state?: Maybe<AtmJobTaskState>;
};


export type SubscriptionAtomistLogArgs = {
  _after?: Maybe<Scalars['String']>;
  _before?: Maybe<Scalars['String']>;
  _first?: Maybe<Scalars['Int']>;
  _offset?: Maybe<Scalars['Int']>;
  _orderBy?: Maybe<Scalars['String']>;
  _ordering?: Maybe<_AtomistLogOrdering>;
  _search?: Maybe<Scalars['String']>;
  category?: Maybe<Array<Scalars['String']>>;
  id?: Maybe<Scalars['ID']>;
  level?: Maybe<Array<Scalars['String']>>;
  message?: Maybe<Array<Scalars['String']>>;
  team_id?: Maybe<Array<Scalars['String']>>;
  timestamp?: Maybe<Array<Scalars['String']>>;
};


export type SubscriptionCardArgs = {
  key?: Maybe<Array<Maybe<Scalars['String']>>>;
  post?: Maybe<Array<Maybe<Scalars['String']>>>;
  shortTitle?: Maybe<Array<Maybe<Scalars['String']>>>;
  ts?: Maybe<Array<Maybe<Scalars['Int']>>>;
  ttl?: Maybe<Array<Maybe<Scalars['Int']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type SubscriptionNotificationArgs = {
  body?: Maybe<Scalars['String']>;
  contentType?: Maybe<Scalars['String']>;
  correlationId?: Maybe<Scalars['String']>;
  key?: Maybe<Scalars['String']>;
  post?: Maybe<Array<Maybe<Scalars['String']>>>;
  ts?: Maybe<Scalars['Int']>;
  ttl?: Maybe<Array<Maybe<Scalars['Int']>>>;
};


export type SubscriptionCommitIssueRelationshipArgs = {
  type?: Maybe<Array<Maybe<CommitIssueRelationshipType>>>;
};


export type SubscriptionDeploymentArgs = {
  environment?: Maybe<Array<Maybe<Scalars['String']>>>;
  ts?: Maybe<Array<Maybe<Scalars['Int']>>>;
};


export type SubscriptionIssueRelationshipArgs = {
  relationshipId?: Maybe<Array<Maybe<Scalars['String']>>>;
  state?: Maybe<Array<Maybe<Scalars['String']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type SubscriptionSdmGoalArgs = {
  approvalRequired?: Maybe<Array<Maybe<Scalars['Boolean']>>>;
  branch?: Maybe<Array<Maybe<Scalars['String']>>>;
  data?: Maybe<Array<Maybe<Scalars['String']>>>;
  description?: Maybe<Array<Maybe<Scalars['String']>>>;
  environment?: Maybe<Array<Maybe<Scalars['String']>>>;
  error?: Maybe<Array<Maybe<Scalars['String']>>>;
  externalKey?: Maybe<Array<Maybe<Scalars['String']>>>;
  externalUrl?: Maybe<Array<Maybe<Scalars['String']>>>;
  goalSet?: Maybe<Array<Maybe<Scalars['String']>>>;
  goalSetId?: Maybe<Array<Maybe<Scalars['String']>>>;
  name?: Maybe<Array<Maybe<Scalars['String']>>>;
  parameters?: Maybe<Array<Maybe<Scalars['String']>>>;
  phase?: Maybe<Array<Maybe<Scalars['String']>>>;
  preApprovalRequired?: Maybe<Array<Maybe<Scalars['Boolean']>>>;
  registration?: Maybe<Array<Maybe<Scalars['String']>>>;
  retryFeasible?: Maybe<Array<Maybe<Scalars['Boolean']>>>;
  sha?: Maybe<Array<Maybe<Scalars['String']>>>;
  signature?: Maybe<Array<Maybe<Scalars['String']>>>;
  state?: Maybe<Array<Maybe<SdmGoalState>>>;
  ts?: Maybe<Array<Maybe<Scalars['Int']>>>;
  uniqueName?: Maybe<Array<Maybe<Scalars['String']>>>;
  url?: Maybe<Array<Maybe<Scalars['String']>>>;
  version?: Maybe<Array<Maybe<Scalars['Int']>>>;
};


export type SubscriptionSdmGoalSetArgs = {
  branch?: Maybe<Array<Maybe<Scalars['String']>>>;
  goalSet?: Maybe<Array<Maybe<Scalars['String']>>>;
  goalSetId?: Maybe<Array<Maybe<Scalars['String']>>>;
  sha?: Maybe<Array<Maybe<Scalars['String']>>>;
  state?: Maybe<Array<Maybe<SdmGoalState>>>;
  ts?: Maybe<Array<Maybe<Scalars['Int']>>>;
};


export type SubscriptionSdmGoalDisplayArgs = {
  branch?: Maybe<Array<Maybe<Scalars['String']>>>;
  format?: Maybe<Array<Maybe<SdmGoalDisplayFormat>>>;
  sha?: Maybe<Array<Maybe<Scalars['String']>>>;
  state?: Maybe<Array<Maybe<SdmGoalDisplayState>>>;
  ts?: Maybe<Array<Maybe<Scalars['Int']>>>;
};


export type SubscriptionSdmBuildIdentifierArgs = {
  identifier?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type SubscriptionSdmDeployEnablementArgs = {
  owner?: Maybe<Array<Maybe<Scalars['String']>>>;
  providerId?: Maybe<Array<Maybe<Scalars['String']>>>;
  repo?: Maybe<Array<Maybe<Scalars['String']>>>;
  state?: Maybe<Array<Maybe<SdmDeployState>>>;
};


export type SubscriptionSdmVersionArgs = {
  branch?: Maybe<Array<Maybe<Scalars['String']>>>;
  sha?: Maybe<Array<Maybe<Scalars['String']>>>;
  version?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type SubscriptionSdmGoalSetBadgeArgs = {
  sdm?: Maybe<Array<Maybe<Scalars['String']>>>;
  token?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type SubscriptionSdmPreferenceArgs = {
  key?: Maybe<Array<Maybe<Scalars['String']>>>;
  ttl?: Maybe<Array<Maybe<Scalars['Int']>>>;
  value?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type SubscriptionPolicyLogArgs = {
  name?: Maybe<Array<Maybe<Scalars['String']>>>;
  ts?: Maybe<Array<Maybe<Scalars['Int']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type SubscriptionPolicyComplianceArgs = {
  _branch?: Maybe<Array<Maybe<Scalars['String']>>>;
  _owner?: Maybe<Array<Maybe<Scalars['String']>>>;
  _repo?: Maybe<Array<Maybe<Scalars['String']>>>;
  _sha?: Maybe<Array<Maybe<Scalars['String']>>>;
  owner?: Maybe<Array<Maybe<Scalars['String']>>>;
  state?: Maybe<Array<Maybe<PolicyCompliaceState>>>;
  ts?: Maybe<Array<Maybe<Scalars['Int']>>>;
};


export type SubscriptionPolicyTargetStreamArgs = {
  name?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type SubscriptionPolicyTargetArgs = {
  data?: Maybe<Array<Maybe<Scalars['String']>>>;
  displayName?: Maybe<Array<Maybe<Scalars['String']>>>;
  displayValue?: Maybe<Array<Maybe<Scalars['String']>>>;
  name?: Maybe<Array<Maybe<Scalars['String']>>>;
  sha?: Maybe<Array<Maybe<Scalars['String']>>>;
  streams?: Maybe<Array<Maybe<Scalars['ID']>>>;
  type?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type SubscriptionLifecycleAttachmentArgs = {
  body?: Maybe<Array<Maybe<Scalars['String']>>>;
  configuration?: Maybe<Array<Maybe<Scalars['String']>>>;
  contentType?: Maybe<Array<Maybe<Scalars['String']>>>;
  identifier?: Maybe<Array<Maybe<Scalars['String']>>>;
  name?: Maybe<Array<Maybe<Scalars['String']>>>;
  skill?: Maybe<Array<Maybe<Scalars['String']>>>;
  ts?: Maybe<Array<Maybe<Scalars['Int']>>>;
  type?: Maybe<Array<Maybe<LifecycleAttachmentType>>>;
};


export type SubscriptionAspectRegistrationArgs = {
  category?: Maybe<Array<Maybe<Scalars['String']>>>;
  description?: Maybe<Array<Maybe<Scalars['String']>>>;
  displayName?: Maybe<Array<Maybe<Scalars['String']>>>;
  endpoint?: Maybe<Array<Maybe<Scalars['String']>>>;
  manageable?: Maybe<Array<Maybe<Scalars['Boolean']>>>;
  name?: Maybe<Array<Maybe<Scalars['String']>>>;
  owner?: Maybe<Array<Maybe<Scalars['String']>>>;
  shortName?: Maybe<Array<Maybe<Scalars['String']>>>;
  state?: Maybe<Array<Maybe<AspectRegistrationState>>>;
  unit?: Maybe<Array<Maybe<Scalars['String']>>>;
  url?: Maybe<Array<Maybe<Scalars['String']>>>;
  uuid?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type SystemAccount = ResourceUser & {
  __typename?: 'SystemAccount';
  createdBy?: Maybe<Person>;
  _typenames?: Maybe<Array<Maybe<Scalars['String']>>>;
  id: Scalars['ID'];
  _id?: Maybe<Scalars['Int']>;
  credential?: Maybe<Credential>;
  provider: ResourceProvider;
  login: Scalars['String'];
};


export type SystemAccountProviderArgs = {
  id?: Maybe<Scalars['ID']>;
};

/** Tag-Node */
export type Tag = {
  __typename?: 'Tag';
  /** internal node id */
  _id?: Maybe<Scalars['Int']>;
  /** the URL of the Tag */
  url?: Maybe<Scalars['String']>;
  /** id of  Tag */
  id?: Maybe<Scalars['ID']>;
  /** name of  Tag */
  name?: Maybe<Scalars['String']>;
  /** description of  Tag */
  description?: Maybe<Scalars['String']>;
  /** ref of  Tag */
  ref?: Maybe<Scalars['String']>;
  /** timestamp of  Tag */
  timestamp?: Maybe<Scalars['String']>;
  /** Tag release Release */
  release?: Maybe<Release>;
  /** Tag commit Commit */
  commit?: Maybe<Commit>;
  /** Tag containers DockerImage */
  containers?: Maybe<Array<Maybe<DockerImage>>>;
  /** Tag builds Build */
  builds?: Maybe<Array<Maybe<Build>>>;
};


/** Tag-Node */
export type TagReleaseArgs = {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
};


/** Tag-Node */
export type TagCommitArgs = {
  sha?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
};


/** Tag-Node */
export type TagContainersArgs = {
  image?: Maybe<Scalars['String']>;
  imageName?: Maybe<Scalars['String']>;
  orderBy?: Maybe<Array<Maybe<_DockerImageOrdering>>>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  timestamp?: Maybe<Scalars['String']>;
};


/** Tag-Node */
export type TagBuildsArgs = {
  id?: Maybe<Scalars['ID']>;
  buildId?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  status?: Maybe<BuildStatus>;
  buildUrl?: Maybe<Scalars['String']>;
  compareUrl?: Maybe<Scalars['String']>;
  trigger?: Maybe<BuildTrigger>;
  provider?: Maybe<Scalars['String']>;
  pullRequestNumber?: Maybe<Scalars['Float']>;
  startedAt?: Maybe<Scalars['String']>;
  finishedAt?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
  workflowId?: Maybe<Scalars['String']>;
  jobName?: Maybe<Scalars['String']>;
  jobId?: Maybe<Scalars['String']>;
  orderBy?: Maybe<Array<Maybe<_BuildOrdering>>>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  data?: Maybe<Scalars['String']>;
};

export type TagInput = {
  name: Scalars['String'];
  value: Scalars['String'];
};

/** Team-Node */
export type Team = {
  __typename?: 'Team';
  /** internal node id */
  _id?: Maybe<Scalars['Int']>;
  /** the URL of the Team */
  url?: Maybe<Scalars['String']>;
  /** id of  Team */
  id?: Maybe<Scalars['String']>;
  /** name of  Team */
  name?: Maybe<Scalars['String']>;
  /** description of  Team */
  description?: Maybe<Scalars['String']>;
  /** iconUrl of  Team */
  iconUrl?: Maybe<Scalars['String']>;
  /** createdAt of  Team */
  createdAt?: Maybe<Scalars['String']>;
  /** Team persons Person */
  persons?: Maybe<Array<Maybe<Person>>>;
  /** Team orgs Org */
  orgs?: Maybe<Array<Maybe<Org>>>;
  /** Team providers GitHubProvider */
  providers?: Maybe<Array<Maybe<GitHubProvider>>>;
  resourceProviders?: Maybe<Array<Maybe<ResourceProvider>>>;
  /** Team scmProviders SCMProvider */
  scmProviders?: Maybe<Array<Maybe<ScmProvider>>>;
  /** Team chatTeams ChatTeam */
  chatTeams?: Maybe<Array<Maybe<ChatTeam>>>;
  configuration?: Maybe<Array<Maybe<TeamConfiguration>>>;
};


/** Team-Node */
export type TeamPersonsArgs = {
  id?: Maybe<Scalars['ID']>;
  forename?: Maybe<Scalars['String']>;
  surname?: Maybe<Scalars['String']>;
  orderBy?: Maybe<Array<Maybe<_PersonOrdering>>>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
};


/** Team-Node */
export type TeamOrgsArgs = {
  id?: Maybe<Scalars['ID']>;
  owner?: Maybe<Scalars['String']>;
  orderBy?: Maybe<Array<Maybe<_OrgOrdering>>>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  ownerType?: Maybe<OwnerType>;
};


/** Team-Node */
export type TeamProvidersArgs = {
  id?: Maybe<Scalars['ID']>;
  url?: Maybe<Scalars['String']>;
  providerId?: Maybe<Scalars['String']>;
  apiUrl?: Maybe<Scalars['String']>;
  gitUrl?: Maybe<Scalars['String']>;
  providerType?: Maybe<ProviderType>;
};


/** Team-Node */
export type TeamResourceProvidersArgs = {
  id?: Maybe<Scalars['ID']>;
  providerId?: Maybe<Scalars['String']>;
};


/** Team-Node */
export type TeamScmProvidersArgs = {
  id?: Maybe<Scalars['ID']>;
  url?: Maybe<Scalars['String']>;
  providerId?: Maybe<Scalars['String']>;
  apiUrl?: Maybe<Scalars['String']>;
  gitUrl?: Maybe<Scalars['String']>;
  orderBy?: Maybe<Array<Maybe<_ScmProviderOrdering>>>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  providerType?: Maybe<ProviderType>;
};


/** Team-Node */
export type TeamChatTeamsArgs = {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  provider?: Maybe<Scalars['String']>;
  tenantId?: Maybe<Scalars['String']>;
  domain?: Maybe<Scalars['String']>;
  messageCount?: Maybe<Scalars['Float']>;
  orderBy?: Maybe<Array<Maybe<_ChatTeamOrdering>>>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  emailDomain?: Maybe<Scalars['String']>;
};


/** Team-Node */
export type TeamConfigurationArgs = {
  namespace?: Maybe<Scalars['String']>;
};

export type TeamConfiguration = {
  __typename?: 'TeamConfiguration';
  namespace: Scalars['String'];
  name: Scalars['String'];
  value: Scalars['String'];
  ttlSecs?: Maybe<Scalars['Int']>;
  createdAt: Scalars['String'];
  team: Team;
};

/** A team's preferences as key/value pairs */
export type TeamPreference = {
  __typename?: 'TeamPreference';
  /** The name of the preference */
  name?: Maybe<Scalars['String']>;
  /** The value of the preference */
  value?: Maybe<Scalars['String']>;
};

export enum TimeUnit {
  Seconds = 'seconds',
  Minutes = 'minutes',
  Hours = 'hours'
}

/** UserJoinedChannel-Node */
export type UserJoinedChannel = {
  __typename?: 'UserJoinedChannel';
  /** internal node id */
  _id?: Maybe<Scalars['Int']>;
  /** id of  UserJoinedChannel */
  id?: Maybe<Scalars['ID']>;
  /** UserJoinedChannel user ChatId */
  user?: Maybe<ChatId>;
  /** UserJoinedChannel channel ChatChannel */
  channel?: Maybe<ChatChannel>;
};


/** UserJoinedChannel-Node */
export type UserJoinedChannelUserArgs = {
  id?: Maybe<Scalars['ID']>;
  screenName?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
  provider?: Maybe<Scalars['String']>;
  isAtomistBot?: Maybe<Scalars['String']>;
  isOwner?: Maybe<Scalars['String']>;
  isPrimaryOwner?: Maybe<Scalars['String']>;
  isAdmin?: Maybe<Scalars['String']>;
  isBot?: Maybe<Scalars['String']>;
  timezoneLabel?: Maybe<Scalars['String']>;
};


/** UserJoinedChannel-Node */
export type UserJoinedChannelChannelArgs = {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  provider?: Maybe<Scalars['String']>;
  normalizedName?: Maybe<Scalars['String']>;
  channelId?: Maybe<Scalars['String']>;
  isDefault?: Maybe<Scalars['Boolean']>;
  botInvitedSelf?: Maybe<Scalars['Boolean']>;
  archived?: Maybe<Scalars['Boolean']>;
};

/** A user's preferences as key/value pairs */
export type UserPreference = {
  __typename?: 'UserPreference';
  /** The name of the preference */
  name?: Maybe<Scalars['String']>;
  /** The value of the preference */
  value?: Maybe<Scalars['String']>;
};

/** Webhook-Node */
export type Webhook = {
  __typename?: 'Webhook';
  /** just a name */
  name: Scalars['String'];
  /** id of  Webhook */
  id: Scalars['ID'];
  /** url of  Webhook */
  url: Scalars['String'];
  /** type of validation */
  authType: WebhookAuthType;
  provider: ResourceProvider;
  tags?: Maybe<Array<Maybe<AtomistKeyValuePair>>>;
  state: WebhookState;
};

export enum WebhookAuthType {
  HmacSha1 = 'hmac_sha1',
  None = 'none'
}

export type WebhookInput = {
  name: Scalars['String'];
  resourceProviderId: Scalars['String'];
  authType: WebhookAuthType;
  hmacSha1?: Maybe<HmacSha1AuthInput>;
  tags?: Maybe<Array<Maybe<TagInput>>>;
  state?: Maybe<WebhookState>;
};

export enum WebhookState {
  Enabled = 'enabled',
  Disabled = 'disabled'
}

export type WebhookUpdateInput = {
  name?: Maybe<Scalars['String']>;
  authType?: Maybe<WebhookAuthType>;
  hmacSha1?: Maybe<HmacSha1AuthInput>;
  tags?: Maybe<Array<Maybe<TagInput>>>;
  state?: Maybe<WebhookState>;
};

/** Workflow-Node */
export type Workflow = {
  __typename?: 'Workflow';
  /** internal node id */
  _id?: Maybe<Scalars['Int']>;
  /** id of  Workflow */
  id?: Maybe<Scalars['ID']>;
  /** name of  Workflow */
  name?: Maybe<Scalars['String']>;
  /** workflowId of  Workflow */
  workflowId?: Maybe<Scalars['String']>;
  /** provider of  Workflow */
  provider?: Maybe<Scalars['String']>;
  /** config of  Workflow */
  config?: Maybe<Scalars['String']>;
  /** Workflow builds Build */
  builds?: Maybe<Array<Maybe<Build>>>;
};


/** Workflow-Node */
export type WorkflowBuildsArgs = {
  id?: Maybe<Scalars['ID']>;
  buildId?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  status?: Maybe<BuildStatus>;
  buildUrl?: Maybe<Scalars['String']>;
  compareUrl?: Maybe<Scalars['String']>;
  trigger?: Maybe<BuildTrigger>;
  provider?: Maybe<Scalars['String']>;
  pullRequestNumber?: Maybe<Scalars['Float']>;
  startedAt?: Maybe<Scalars['String']>;
  finishedAt?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['String']>;
  workflowId?: Maybe<Scalars['String']>;
  jobName?: Maybe<Scalars['String']>;
  jobId?: Maybe<Scalars['String']>;
  orderBy?: Maybe<Array<Maybe<_BuildOrdering>>>;
  first?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  data?: Maybe<Scalars['String']>;
};

/** Ordering Enum for Application */
export enum _ApplicationOrdering {
  /** Ascending sort for atmTeamId */
  AtmTeamIdAsc = 'atmTeamId_asc',
  /** Descending sort for atmTeamId */
  AtmTeamIdDesc = 'atmTeamId_desc',
  /** Ascending sort for id */
  IdAsc = 'id_asc',
  /** Descending sort for id */
  IdDesc = 'id_desc',
  /** Ascending sort for state */
  StateAsc = 'state_asc',
  /** Descending sort for state */
  StateDesc = 'state_desc',
  /** Ascending sort for host */
  HostAsc = 'host_asc',
  /** Descending sort for host */
  HostDesc = 'host_desc',
  /** Ascending sort for timestamp */
  TimestampAsc = 'timestamp_asc',
  /** Descending sort for timestamp */
  TimestampDesc = 'timestamp_desc',
  /** Ascending sort for domain */
  DomainAsc = 'domain_asc',
  /** Descending sort for domain */
  DomainDesc = 'domain_desc',
  /** Ascending sort for data */
  DataAsc = 'data_asc',
  /** Descending sort for data */
  DataDesc = 'data_desc'
}

export enum _AtomistLogOrdering {
  Asc = 'asc',
  Desc = 'desc'
}

export type _AtomistSkillConfigurationFilter = {
  instances_in?: Maybe<Array<_AtomistSkillConfigurationInstanceFilter>>;
  repository_in?: Maybe<Array<_AtomistSkillConfigurationRepositoryFilter>>;
};

export type _AtomistSkillConfigurationInstanceFilter = {
  name_in?: Maybe<Array<Scalars['String']>>;
};

export type _AtomistSkillConfigurationRepositoryFilter = {
  commitSha_in?: Maybe<Array<Scalars['String']>>;
};

export type _AtomistSkillExecutionContextFilter = {
  configuration_in?: Maybe<Array<_AtomistSkillConfigurationFilter>>;
  triggerEvent_in?: Maybe<Array<_AtomistSkillExecutionTriggerEventFilter>>;
};

export type _AtomistSkillExecutionFilter = {
  context_in?: Maybe<Array<_AtomistSkillExecutionContextFilter>>;
  skill_in?: Maybe<Array<_AtomistSkillFilter>>;
  status_in?: Maybe<Array<_AtomistSkillExecutionStatusFilter>>;
  triggerCorrelationId_in?: Maybe<Array<Scalars['String']>>;
  visibility_in?: Maybe<Array<AtomistSkillExecutionVisibility>>;
};

export type _AtomistSkillExecutionStatusFilter = {
  state: AtomistSkillExecutionState;
};

export type _AtomistSkillExecutionTriggerEventFilter = {
  name_in?: Maybe<Array<Scalars['String']>>;
  type_in?: Maybe<Array<AtomistSkillExecutionTriggerEventType>>;
};

export type _AtomistSkillFilter = {
  name: Scalars['String'];
  namespace: Scalars['String'];
  version?: Maybe<Scalars['String']>;
};

export type _AtomistSkillLogFilter = {
  category_in?: Maybe<Array<AtomistSkillExecutionLogCategory>>;
  severity_in?: Maybe<Array<AtomistSkillExecutionLogSeverity>>;
  timestamp_gt?: Maybe<Scalars['String']>;
  timestamp_gte?: Maybe<Scalars['String']>;
  timestamp_lt?: Maybe<Scalars['String']>;
  timestamp_lte?: Maybe<Scalars['String']>;
};

export type _BranchFilter = {
  name?: Maybe<Scalars['String']>;
  isRemote?: Maybe<Scalars['Boolean']>;
};

/** Ordering Enum for Branch */
export enum _BranchOrdering {
  /** Ascending sort for atmTeamId */
  AtmTeamIdAsc = 'atmTeamId_asc',
  /** Descending sort for atmTeamId */
  AtmTeamIdDesc = 'atmTeamId_desc',
  /** Ascending sort for id */
  IdAsc = 'id_asc',
  /** Descending sort for id */
  IdDesc = 'id_desc',
  /** Ascending sort for name */
  NameAsc = 'name_asc',
  /** Descending sort for name */
  NameDesc = 'name_desc',
  /** Ascending sort for timestamp */
  TimestampAsc = 'timestamp_asc',
  /** Descending sort for timestamp */
  TimestampDesc = 'timestamp_desc',
  /** Ascending sort for isRemote */
  IsRemoteAsc = 'isRemote_asc',
  /** Descending sort for isRemote */
  IsRemoteDesc = 'isRemote_desc',
  /** Ascending sort for remoteRepoHtmlUrl */
  RemoteRepoHtmlUrlAsc = 'remoteRepoHtmlUrl_asc',
  /** Descending sort for remoteRepoHtmlUrl */
  RemoteRepoHtmlUrlDesc = 'remoteRepoHtmlUrl_desc'
}

/** Ordering Enum for Build */
export enum _BuildOrdering {
  /** Ascending sort for atmTeamId */
  AtmTeamIdAsc = 'atmTeamId_asc',
  /** Descending sort for atmTeamId */
  AtmTeamIdDesc = 'atmTeamId_desc',
  /** Ascending sort for id */
  IdAsc = 'id_asc',
  /** Descending sort for id */
  IdDesc = 'id_desc',
  /** Ascending sort for buildId */
  BuildIdAsc = 'buildId_asc',
  /** Descending sort for buildId */
  BuildIdDesc = 'buildId_desc',
  /** Ascending sort for number */
  NumberAsc = 'number_asc',
  /** Descending sort for number */
  NumberDesc = 'number_desc',
  /** Ascending sort for name */
  NameAsc = 'name_asc',
  /** Descending sort for name */
  NameDesc = 'name_desc',
  /** Ascending sort for status */
  StatusAsc = 'status_asc',
  /** Descending sort for status */
  StatusDesc = 'status_desc',
  /** Ascending sort for buildUrl */
  BuildUrlAsc = 'buildUrl_asc',
  /** Descending sort for buildUrl */
  BuildUrlDesc = 'buildUrl_desc',
  /** Ascending sort for compareUrl */
  CompareUrlAsc = 'compareUrl_asc',
  /** Descending sort for compareUrl */
  CompareUrlDesc = 'compareUrl_desc',
  /** Ascending sort for trigger */
  TriggerAsc = 'trigger_asc',
  /** Descending sort for trigger */
  TriggerDesc = 'trigger_desc',
  /** Ascending sort for provider */
  ProviderAsc = 'provider_asc',
  /** Descending sort for provider */
  ProviderDesc = 'provider_desc',
  /** Ascending sort for pullRequestNumber */
  PullRequestNumberAsc = 'pullRequestNumber_asc',
  /** Descending sort for pullRequestNumber */
  PullRequestNumberDesc = 'pullRequestNumber_desc',
  /** Ascending sort for startedAt */
  StartedAtAsc = 'startedAt_asc',
  /** Descending sort for startedAt */
  StartedAtDesc = 'startedAt_desc',
  /** Ascending sort for finishedAt */
  FinishedAtAsc = 'finishedAt_asc',
  /** Descending sort for finishedAt */
  FinishedAtDesc = 'finishedAt_desc',
  /** Ascending sort for timestamp */
  TimestampAsc = 'timestamp_asc',
  /** Descending sort for timestamp */
  TimestampDesc = 'timestamp_desc',
  /** Ascending sort for workflowId */
  WorkflowIdAsc = 'workflowId_asc',
  /** Descending sort for workflowId */
  WorkflowIdDesc = 'workflowId_desc',
  /** Ascending sort for jobName */
  JobNameAsc = 'jobName_asc',
  /** Descending sort for jobName */
  JobNameDesc = 'jobName_desc',
  /** Ascending sort for jobId */
  JobIdAsc = 'jobId_asc',
  /** Descending sort for jobId */
  JobIdDesc = 'jobId_desc',
  /** Ascending sort for data */
  DataAsc = 'data_asc',
  /** Descending sort for data */
  DataDesc = 'data_desc'
}

/** Ordering Enum for ChannelLink */
export enum _ChannelLinkOrdering {
  /** Ascending sort for atmTeamId */
  AtmTeamIdAsc = 'atmTeamId_asc',
  /** Descending sort for atmTeamId */
  AtmTeamIdDesc = 'atmTeamId_desc',
  /** Ascending sort for id */
  IdAsc = 'id_asc',
  /** Descending sort for id */
  IdDesc = 'id_desc'
}

export type _ChatChannelFilter = {
  name?: Maybe<Scalars['String']>;
  name_contains?: Maybe<Scalars['String']>;
};

/** Ordering Enum for ChatChannel */
export enum _ChatChannelOrdering {
  /** Ascending sort for atmTeamId */
  AtmTeamIdAsc = 'atmTeamId_asc',
  /** Descending sort for atmTeamId */
  AtmTeamIdDesc = 'atmTeamId_desc',
  /** Ascending sort for id */
  IdAsc = 'id_asc',
  /** Descending sort for id */
  IdDesc = 'id_desc',
  /** Ascending sort for name */
  NameAsc = 'name_asc',
  /** Descending sort for name */
  NameDesc = 'name_desc',
  /** Ascending sort for provider */
  ProviderAsc = 'provider_asc',
  /** Descending sort for provider */
  ProviderDesc = 'provider_desc',
  /** Ascending sort for normalizedName */
  NormalizedNameAsc = 'normalizedName_asc',
  /** Descending sort for normalizedName */
  NormalizedNameDesc = 'normalizedName_desc',
  /** Ascending sort for channelId */
  ChannelIdAsc = 'channelId_asc',
  /** Descending sort for channelId */
  ChannelIdDesc = 'channelId_desc',
  /** Ascending sort for isDefault */
  IsDefaultAsc = 'isDefault_asc',
  /** Descending sort for isDefault */
  IsDefaultDesc = 'isDefault_desc',
  /** Ascending sort for botInvitedSelf */
  BotInvitedSelfAsc = 'botInvitedSelf_asc',
  /** Descending sort for botInvitedSelf */
  BotInvitedSelfDesc = 'botInvitedSelf_desc',
  /** Ascending sort for archived */
  ArchivedAsc = 'archived_asc',
  /** Descending sort for archived */
  ArchivedDesc = 'archived_desc'
}

export type _ChatIdFilter = {
  screenName?: Maybe<Scalars['String']>;
  screenName_not?: Maybe<Scalars['String']>;
};

/** Ordering Enum for ChatId */
export enum _ChatIdOrdering {
  /** Ascending sort for atmTeamId */
  AtmTeamIdAsc = 'atmTeamId_asc',
  /** Descending sort for atmTeamId */
  AtmTeamIdDesc = 'atmTeamId_desc',
  /** Ascending sort for id */
  IdAsc = 'id_asc',
  /** Descending sort for id */
  IdDesc = 'id_desc',
  /** Ascending sort for screenName */
  ScreenNameAsc = 'screenName_asc',
  /** Descending sort for screenName */
  ScreenNameDesc = 'screenName_desc',
  /** Ascending sort for userId */
  UserIdAsc = 'userId_asc',
  /** Descending sort for userId */
  UserIdDesc = 'userId_desc',
  /** Ascending sort for provider */
  ProviderAsc = 'provider_asc',
  /** Descending sort for provider */
  ProviderDesc = 'provider_desc',
  /** Ascending sort for isAtomistBot */
  IsAtomistBotAsc = 'isAtomistBot_asc',
  /** Descending sort for isAtomistBot */
  IsAtomistBotDesc = 'isAtomistBot_desc',
  /** Ascending sort for isOwner */
  IsOwnerAsc = 'isOwner_asc',
  /** Descending sort for isOwner */
  IsOwnerDesc = 'isOwner_desc',
  /** Ascending sort for isPrimaryOwner */
  IsPrimaryOwnerAsc = 'isPrimaryOwner_asc',
  /** Descending sort for isPrimaryOwner */
  IsPrimaryOwnerDesc = 'isPrimaryOwner_desc',
  /** Ascending sort for isAdmin */
  IsAdminAsc = 'isAdmin_asc',
  /** Descending sort for isAdmin */
  IsAdminDesc = 'isAdmin_desc',
  /** Ascending sort for isBot */
  IsBotAsc = 'isBot_asc',
  /** Descending sort for isBot */
  IsBotDesc = 'isBot_desc',
  /** Ascending sort for timezoneLabel */
  TimezoneLabelAsc = 'timezoneLabel_asc',
  /** Descending sort for timezoneLabel */
  TimezoneLabelDesc = 'timezoneLabel_desc'
}

/** Ordering Enum for ChatTeam */
export enum _ChatTeamOrdering {
  /** Ascending sort for atmTeamId */
  AtmTeamIdAsc = 'atmTeamId_asc',
  /** Descending sort for atmTeamId */
  AtmTeamIdDesc = 'atmTeamId_desc',
  /** Ascending sort for id */
  IdAsc = 'id_asc',
  /** Descending sort for id */
  IdDesc = 'id_desc',
  /** Ascending sort for name */
  NameAsc = 'name_asc',
  /** Descending sort for name */
  NameDesc = 'name_desc',
  /** Ascending sort for provider */
  ProviderAsc = 'provider_asc',
  /** Descending sort for provider */
  ProviderDesc = 'provider_desc',
  /** Ascending sort for domain */
  DomainAsc = 'domain_asc',
  /** Descending sort for domain */
  DomainDesc = 'domain_desc',
  /** Ascending sort for messageCount */
  MessageCountAsc = 'messageCount_asc',
  /** Descending sort for messageCount */
  MessageCountDesc = 'messageCount_desc',
  /** Ascending sort for emailDomain */
  EmailDomainAsc = 'emailDomain_asc',
  /** Descending sort for emailDomain */
  EmailDomainDesc = 'emailDomain_desc'
}

export type _CheckRunFilter = {
  checkSuite?: Maybe<_CheckSuiteFilter>;
  conclusion?: Maybe<CheckRunConclusion>;
  status?: Maybe<CheckRunStatus>;
  action?: Maybe<CheckRunAction>;
  name?: Maybe<Scalars['String']>;
};

export enum _CheckRunOrdering {
  StartedAtAsc = 'startedAt_asc',
  StartedAtDesc = 'startedAt_desc',
  CompletedAtAsc = 'completedAt_asc',
  CompletedAtDesc = 'completedAt_desc'
}

export type _CheckSuiteFilter = {
  commit?: Maybe<_CommitFilter>;
  conclusion?: Maybe<CheckSuiteConclusion>;
  status?: Maybe<CheckSuiteStatus>;
};

export enum _CheckSuiteOrdering {
  TimestampAsc = 'timestamp_asc',
  TimestampDesc = 'timestamp_desc'
}

/** Ordering Enum for Comment */
export enum _CommentOrdering {
  /** Ascending sort for atmTeamId */
  AtmTeamIdAsc = 'atmTeamId_asc',
  /** Descending sort for atmTeamId */
  AtmTeamIdDesc = 'atmTeamId_desc',
  /** Ascending sort for id */
  IdAsc = 'id_asc',
  /** Descending sort for id */
  IdDesc = 'id_desc',
  /** Ascending sort for body */
  BodyAsc = 'body_asc',
  /** Descending sort for body */
  BodyDesc = 'body_desc',
  /** Ascending sort for timestamp */
  TimestampAsc = 'timestamp_asc',
  /** Descending sort for timestamp */
  TimestampDesc = 'timestamp_desc',
  /** Ascending sort for createdAt */
  CreatedAtAsc = 'createdAt_asc',
  /** Descending sort for createdAt */
  CreatedAtDesc = 'createdAt_desc',
  /** Ascending sort for updatedAt */
  UpdatedAtAsc = 'updatedAt_asc',
  /** Descending sort for updatedAt */
  UpdatedAtDesc = 'updatedAt_desc',
  /** Ascending sort for commentId */
  CommentIdAsc = 'commentId_asc',
  /** Descending sort for commentId */
  CommentIdDesc = 'commentId_desc',
  /** Ascending sort for gitHubId */
  GitHubIdAsc = 'gitHubId_asc',
  /** Descending sort for gitHubId */
  GitHubIdDesc = 'gitHubId_desc',
  /** Ascending sort for path */
  PathAsc = 'path_asc',
  /** Descending sort for path */
  PathDesc = 'path_desc',
  /** Ascending sort for position */
  PositionAsc = 'position_asc',
  /** Descending sort for position */
  PositionDesc = 'position_desc',
  /** Ascending sort for htmlUrl */
  HtmlUrlAsc = 'htmlUrl_asc',
  /** Descending sort for htmlUrl */
  HtmlUrlDesc = 'htmlUrl_desc',
  /** Ascending sort for commentType */
  CommentTypeAsc = 'commentType_asc',
  /** Descending sort for commentType */
  CommentTypeDesc = 'commentType_desc'
}

export type _CommitFilter = {
  sha?: Maybe<Scalars['String']>;
  pushes_some?: Maybe<_PushesFilter>;
  repo?: Maybe<_RepoFilter>;
};

/** Ordering Enum for Commit */
export enum _CommitOrdering {
  /** Ascending sort for atmTeamId */
  AtmTeamIdAsc = 'atmTeamId_asc',
  /** Descending sort for atmTeamId */
  AtmTeamIdDesc = 'atmTeamId_desc',
  /** Ascending sort for sha */
  ShaAsc = 'sha_asc',
  /** Descending sort for sha */
  ShaDesc = 'sha_desc',
  /** Ascending sort for message */
  MessageAsc = 'message_asc',
  /** Descending sort for message */
  MessageDesc = 'message_desc',
  /** Ascending sort for timestamp */
  TimestampAsc = 'timestamp_asc',
  /** Descending sort for timestamp */
  TimestampDesc = 'timestamp_desc'
}

/** Ordering Enum for DeletedBranch */
export enum _DeletedBranchOrdering {
  /** Ascending sort for atmTeamId */
  AtmTeamIdAsc = 'atmTeamId_asc',
  /** Descending sort for atmTeamId */
  AtmTeamIdDesc = 'atmTeamId_desc',
  /** Ascending sort for id */
  IdAsc = 'id_asc',
  /** Descending sort for id */
  IdDesc = 'id_desc',
  /** Ascending sort for name */
  NameAsc = 'name_asc',
  /** Descending sort for name */
  NameDesc = 'name_desc',
  /** Ascending sort for timestamp */
  TimestampAsc = 'timestamp_asc',
  /** Descending sort for timestamp */
  TimestampDesc = 'timestamp_desc'
}

/** Ordering Enum for DockerImage */
export enum _DockerImageOrdering {
  /** Ascending sort for atmTeamId */
  AtmTeamIdAsc = 'atmTeamId_asc',
  /** Descending sort for atmTeamId */
  AtmTeamIdDesc = 'atmTeamId_desc',
  /** Ascending sort for image */
  ImageAsc = 'image_asc',
  /** Descending sort for image */
  ImageDesc = 'image_desc',
  /** Ascending sort for imageName */
  ImageNameAsc = 'imageName_asc',
  /** Descending sort for imageName */
  ImageNameDesc = 'imageName_desc',
  /** Ascending sort for timestamp */
  TimestampAsc = 'timestamp_asc',
  /** Descending sort for timestamp */
  TimestampDesc = 'timestamp_desc'
}

export type _DockerRegistryImageFilter = {
  commit?: Maybe<_CommitFilter>;
  imageName_starts_with?: Maybe<Scalars['String']>;
  imageName_not_starts_with?: Maybe<Scalars['String']>;
};

/** Ordering Enum for Email */
export enum _EmailOrdering {
  /** Ascending sort for atmTeamId */
  AtmTeamIdAsc = 'atmTeamId_asc',
  /** Descending sort for atmTeamId */
  AtmTeamIdDesc = 'atmTeamId_desc',
  /** Ascending sort for address */
  AddressAsc = 'address_asc',
  /** Descending sort for address */
  AddressDesc = 'address_desc'
}

export enum _GitHubAppInstallationOrdering {
  /** Ascending sort for owner */
  OwnerAsc = 'owner_asc',
  /** Descending sort for owner */
  OwnerDesc = 'owner_desc',
  /** Ascending sort for ownerType */
  OwnerTypeAsc = 'ownerType_asc',
  /** Descending sort for ownerType */
  OwnerTypeDesc = 'ownerType_desc'
}

/** Ordering Enum for SCMId */
export enum _GitHubAppResourceUserOrdering {
  /** Ascending sort for login */
  LoginAsc = 'login_asc',
  /** Descending sort for login */
  LoginDesc = 'login_desc'
}

/** Ordering Enum for GitHubId */
export enum _GitHubIdOrdering {
  /** Ascending sort for atmTeamId */
  AtmTeamIdAsc = 'atmTeamId_asc',
  /** Descending sort for atmTeamId */
  AtmTeamIdDesc = 'atmTeamId_desc',
  /** Ascending sort for login */
  LoginAsc = 'login_asc',
  /** Descending sort for login */
  LoginDesc = 'login_desc',
  /** Ascending sort for name */
  NameAsc = 'name_asc',
  /** Descending sort for name */
  NameDesc = 'name_desc'
}

/** Ordering Enum for GitHubProvider */
export enum _GitHubProviderOrdering {
  /** Ascending sort for atmTeamId */
  AtmTeamIdAsc = 'atmTeamId_asc',
  /** Descending sort for atmTeamId */
  AtmTeamIdDesc = 'atmTeamId_desc',
  /** Ascending sort for id */
  IdAsc = 'id_asc',
  /** Descending sort for id */
  IdDesc = 'id_desc',
  /** Ascending sort for url */
  UrlAsc = 'url_asc',
  /** Descending sort for url */
  UrlDesc = 'url_desc',
  /** Ascending sort for providerId */
  ProviderIdAsc = 'providerId_asc',
  /** Descending sort for providerId */
  ProviderIdDesc = 'providerId_desc',
  /** Ascending sort for apiUrl */
  ApiUrlAsc = 'apiUrl_asc',
  /** Descending sort for apiUrl */
  ApiUrlDesc = 'apiUrl_desc',
  /** Ascending sort for gitUrl */
  GitUrlAsc = 'gitUrl_asc',
  /** Descending sort for gitUrl */
  GitUrlDesc = 'gitUrl_desc',
  /** Ascending sort for providerType */
  ProviderTypeAsc = 'providerType_asc',
  /** Descending sort for providerType */
  ProviderTypeDesc = 'providerType_desc'
}

/** Ordering Enum for HerokuApp */
export enum _HerokuAppOrdering {
  /** Ascending sort for atmTeamId */
  AtmTeamIdAsc = 'atmTeamId_asc',
  /** Descending sort for atmTeamId */
  AtmTeamIdDesc = 'atmTeamId_desc',
  /** Ascending sort for app */
  AppAsc = 'app_asc',
  /** Descending sort for app */
  AppDesc = 'app_desc',
  /** Ascending sort for url */
  UrlAsc = 'url_asc',
  /** Descending sort for url */
  UrlDesc = 'url_desc',
  /** Ascending sort for timestamp */
  TimestampAsc = 'timestamp_asc',
  /** Descending sort for timestamp */
  TimestampDesc = 'timestamp_desc',
  /** Ascending sort for user */
  UserAsc = 'user_asc',
  /** Descending sort for user */
  UserDesc = 'user_desc',
  /** Ascending sort for appId */
  AppIdAsc = 'appId_asc',
  /** Descending sort for appId */
  AppIdDesc = 'appId_desc',
  /** Ascending sort for release */
  ReleaseAsc = 'release_asc',
  /** Descending sort for release */
  ReleaseDesc = 'release_desc'
}

/** Ordering Enum for ImageLinked */
export enum _ImageLinkedOrdering {
  /** Ascending sort for atmTeamId */
  AtmTeamIdAsc = 'atmTeamId_asc',
  /** Descending sort for atmTeamId */
  AtmTeamIdDesc = 'atmTeamId_desc',
  /** Ascending sort for timestamp */
  TimestampAsc = 'timestamp_asc',
  /** Descending sort for timestamp */
  TimestampDesc = 'timestamp_desc'
}

export type _IssueFilter = {
  name?: Maybe<Scalars['String']>;
  repo?: Maybe<_RepoFilter>;
};

/** Ordering Enum for Issue */
export enum _IssueOrdering {
  /** Ascending sort for atmTeamId */
  AtmTeamIdAsc = 'atmTeamId_asc',
  /** Descending sort for atmTeamId */
  AtmTeamIdDesc = 'atmTeamId_desc',
  /** Ascending sort for id */
  IdAsc = 'id_asc',
  /** Descending sort for id */
  IdDesc = 'id_desc',
  /** Ascending sort for number */
  NumberAsc = 'number_asc',
  /** Descending sort for number */
  NumberDesc = 'number_desc',
  /** Ascending sort for name */
  NameAsc = 'name_asc',
  /** Descending sort for name */
  NameDesc = 'name_desc',
  /** Ascending sort for title */
  TitleAsc = 'title_asc',
  /** Descending sort for title */
  TitleDesc = 'title_desc',
  /** Ascending sort for body */
  BodyAsc = 'body_asc',
  /** Descending sort for body */
  BodyDesc = 'body_desc',
  /** Ascending sort for state */
  StateAsc = 'state_asc',
  /** Descending sort for state */
  StateDesc = 'state_desc',
  /** Ascending sort for timestamp */
  TimestampAsc = 'timestamp_asc',
  /** Descending sort for timestamp */
  TimestampDesc = 'timestamp_desc',
  /** Ascending sort for action */
  ActionAsc = 'action_asc',
  /** Descending sort for action */
  ActionDesc = 'action_desc',
  /** Ascending sort for createdAt */
  CreatedAtAsc = 'createdAt_asc',
  /** Descending sort for createdAt */
  CreatedAtDesc = 'createdAt_desc',
  /** Ascending sort for updatedAt */
  UpdatedAtAsc = 'updatedAt_asc',
  /** Descending sort for updatedAt */
  UpdatedAtDesc = 'updatedAt_desc',
  /** Ascending sort for closedAt */
  ClosedAtAsc = 'closedAt_asc',
  /** Descending sort for closedAt */
  ClosedAtDesc = 'closedAt_desc'
}

export type _K8ContainerFilter = {
  state?: Maybe<Scalars['String']>;
};

/** Ordering Enum for K8Container */
export enum _K8ContainerOrdering {
  /** Ascending sort for atmTeamId */
  AtmTeamIdAsc = 'atmTeamId_asc',
  /** Descending sort for atmTeamId */
  AtmTeamIdDesc = 'atmTeamId_desc',
  /** Ascending sort for name */
  NameAsc = 'name_asc',
  /** Descending sort for name */
  NameDesc = 'name_desc',
  /** Ascending sort for imageName */
  ImageNameAsc = 'imageName_asc',
  /** Descending sort for imageName */
  ImageNameDesc = 'imageName_desc',
  /** Ascending sort for timestamp */
  TimestampAsc = 'timestamp_asc',
  /** Descending sort for timestamp */
  TimestampDesc = 'timestamp_desc',
  /** Ascending sort for environment */
  EnvironmentAsc = 'environment_asc',
  /** Descending sort for environment */
  EnvironmentDesc = 'environment_desc',
  /** Ascending sort for containerJSON */
  ContainerJsonAsc = 'containerJSON_asc',
  /** Descending sort for containerJSON */
  ContainerJsonDesc = 'containerJSON_desc',
  /** Ascending sort for state */
  StateAsc = 'state_asc',
  /** Descending sort for state */
  StateDesc = 'state_desc',
  /** Ascending sort for stateReason */
  StateReasonAsc = 'stateReason_asc',
  /** Descending sort for stateReason */
  StateReasonDesc = 'stateReason_desc',
  /** Ascending sort for ready */
  ReadyAsc = 'ready_asc',
  /** Descending sort for ready */
  ReadyDesc = 'ready_desc',
  /** Ascending sort for restartCount */
  RestartCountAsc = 'restartCount_asc',
  /** Descending sort for restartCount */
  RestartCountDesc = 'restartCount_desc',
  /** Ascending sort for statusJSON */
  StatusJsonAsc = 'statusJSON_asc',
  /** Descending sort for statusJSON */
  StatusJsonDesc = 'statusJSON_desc',
  /** Ascending sort for resourceVersion */
  ResourceVersionAsc = 'resourceVersion_asc',
  /** Descending sort for resourceVersion */
  ResourceVersionDesc = 'resourceVersion_desc',
  /** Ascending sort for containerID */
  ContainerIdAsc = 'containerID_asc',
  /** Descending sort for containerID */
  ContainerIdDesc = 'containerID_desc'
}

export type _K8PodFilter = {
  containers?: Maybe<_K8ContainerFilter>;
};

/** Ordering Enum for K8Pod */
export enum _K8PodOrdering {
  /** Ascending sort for atmTeamId */
  AtmTeamIdAsc = 'atmTeamId_asc',
  /** Descending sort for atmTeamId */
  AtmTeamIdDesc = 'atmTeamId_desc',
  /** Ascending sort for name */
  NameAsc = 'name_asc',
  /** Descending sort for name */
  NameDesc = 'name_desc',
  /** Ascending sort for phase */
  PhaseAsc = 'phase_asc',
  /** Descending sort for phase */
  PhaseDesc = 'phase_desc',
  /** Ascending sort for environment */
  EnvironmentAsc = 'environment_asc',
  /** Descending sort for environment */
  EnvironmentDesc = 'environment_desc',
  /** Ascending sort for timestamp */
  TimestampAsc = 'timestamp_asc',
  /** Descending sort for timestamp */
  TimestampDesc = 'timestamp_desc',
  /** Ascending sort for baseName */
  BaseNameAsc = 'baseName_asc',
  /** Descending sort for baseName */
  BaseNameDesc = 'baseName_desc',
  /** Ascending sort for namespace */
  NamespaceAsc = 'namespace_asc',
  /** Descending sort for namespace */
  NamespaceDesc = 'namespace_desc',
  /** Ascending sort for statusJSON */
  StatusJsonAsc = 'statusJSON_asc',
  /** Descending sort for statusJSON */
  StatusJsonDesc = 'statusJSON_desc',
  /** Ascending sort for host */
  HostAsc = 'host_asc',
  /** Descending sort for host */
  HostDesc = 'host_desc',
  /** Ascending sort for state */
  StateAsc = 'state_asc',
  /** Descending sort for state */
  StateDesc = 'state_desc',
  /** Ascending sort for specsJSON */
  SpecsJsonAsc = 'specsJSON_asc',
  /** Descending sort for specsJSON */
  SpecsJsonDesc = 'specsJSON_desc',
  /** Ascending sort for envJSON */
  EnvJsonAsc = 'envJSON_asc',
  /** Descending sort for envJSON */
  EnvJsonDesc = 'envJSON_desc',
  /** Ascending sort for metadataJSON */
  MetadataJsonAsc = 'metadataJSON_asc',
  /** Descending sort for metadataJSON */
  MetadataJsonDesc = 'metadataJSON_desc',
  /** Ascending sort for containersCrashLoopBackOff */
  ContainersCrashLoopBackOffAsc = 'containersCrashLoopBackOff_asc',
  /** Descending sort for containersCrashLoopBackOff */
  ContainersCrashLoopBackOffDesc = 'containersCrashLoopBackOff_desc',
  /** Ascending sort for resourceVersion */
  ResourceVersionAsc = 'resourceVersion_asc',
  /** Descending sort for resourceVersion */
  ResourceVersionDesc = 'resourceVersion_desc'
}

export type _LabelFilter = {
  name?: Maybe<Scalars['String']>;
};

/** Ordering Enum for Label */
export enum _LabelOrdering {
  /** Ascending sort for atmTeamId */
  AtmTeamIdAsc = 'atmTeamId_asc',
  /** Descending sort for atmTeamId */
  AtmTeamIdDesc = 'atmTeamId_desc',
  /** Ascending sort for id */
  IdAsc = 'id_asc',
  /** Descending sort for id */
  IdDesc = 'id_desc',
  /** Ascending sort for name */
  NameAsc = 'name_asc',
  /** Descending sort for name */
  NameDesc = 'name_desc',
  /** Ascending sort for default */
  DefaultAsc = 'default_asc',
  /** Descending sort for default */
  DefaultDesc = 'default_desc',
  /** Ascending sort for color */
  ColorAsc = 'color_asc',
  /** Descending sort for color */
  ColorDesc = 'color_desc'
}

export type _LabelsFilter = {
  name?: Maybe<Scalars['String']>;
};

/** asc or desc ordering. Must be used with orderBy */
export enum _Ordering {
  /** Descending order */
  Desc = 'desc',
  /** Ascending order */
  Asc = 'asc'
}

export type _OrgFilter = {
  provider?: Maybe<_ProviderFilter>;
  repo_some?: Maybe<_RepoFilter>;
  repos_some?: Maybe<_RepoFilter>;
  scmProvider?: Maybe<_ScmProviderFilter>;
};

/** Ordering Enum for Org */
export enum _OrgOrdering {
  /** Ascending sort for atmTeamId */
  AtmTeamIdAsc = 'atmTeamId_asc',
  /** Descending sort for atmTeamId */
  AtmTeamIdDesc = 'atmTeamId_desc',
  /** Ascending sort for id */
  IdAsc = 'id_asc',
  /** Descending sort for id */
  IdDesc = 'id_desc',
  /** Ascending sort for owner */
  OwnerAsc = 'owner_asc',
  /** Descending sort for owner */
  OwnerDesc = 'owner_desc',
  /** Ascending sort for ownerType */
  OwnerTypeAsc = 'ownerType_asc',
  /** Descending sort for ownerType */
  OwnerTypeDesc = 'ownerType_desc'
}

export type _PersonFilter = {
  chatId?: Maybe<_ChatIdFilter>;
};

/** Ordering Enum for Person */
export enum _PersonOrdering {
  /** Ascending sort for atmTeamId */
  AtmTeamIdAsc = 'atmTeamId_asc',
  /** Descending sort for atmTeamId */
  AtmTeamIdDesc = 'atmTeamId_desc',
  /** Ascending sort for id */
  IdAsc = 'id_asc',
  /** Descending sort for id */
  IdDesc = 'id_desc',
  /** Ascending sort for forename */
  ForenameAsc = 'forename_asc',
  /** Descending sort for forename */
  ForenameDesc = 'forename_desc',
  /** Ascending sort for surname */
  SurnameAsc = 'surname_asc',
  /** Descending sort for surname */
  SurnameDesc = 'surname_desc',
  /** Ascending sort for name */
  NameAsc = 'name_asc',
  /** Descending sort for name */
  NameDesc = 'name_desc'
}

export type _ProviderFilter = {
  providerId?: Maybe<Scalars['String']>;
};

export type _PullRequestFilter = {
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  state_not?: Maybe<Scalars['String']>;
  branch?: Maybe<_BranchFilter>;
  commits_some?: Maybe<_CommitFilter>;
  head?: Maybe<_CommitFilter>;
  repo?: Maybe<_RepoFilter>;
  labels_some?: Maybe<_LabelsFilter>;
  reviews?: Maybe<_ReviewFilter>;
  reviews_every?: Maybe<_ReviewFilter>;
  reviews_in?: Maybe<Array<Maybe<_ReviewFilter>>>;
  reviews_none?: Maybe<_ReviewFilter>;
  reviews_not?: Maybe<_ReviewFilter>;
  reviews_not_in?: Maybe<Array<Maybe<_ReviewFilter>>>;
  reviews_single?: Maybe<_ReviewFilter>;
  reviews_some?: Maybe<_ReviewFilter>;
};

/** Ordering Enum for PullRequestImpact */
export enum _PullRequestImpactOrdering {
  /** Ascending sort for atmTeamId */
  AtmTeamIdAsc = 'atmTeamId_asc',
  /** Descending sort for atmTeamId */
  AtmTeamIdDesc = 'atmTeamId_desc',
  /** Ascending sort for id */
  IdAsc = 'id_asc',
  /** Descending sort for id */
  IdDesc = 'id_desc',
  /** Ascending sort for url */
  UrlAsc = 'url_asc',
  /** Descending sort for url */
  UrlDesc = 'url_desc',
  /** Ascending sort for data */
  DataAsc = 'data_asc',
  /** Descending sort for data */
  DataDesc = 'data_desc'
}

/** Ordering Enum for PullRequest */
export enum _PullRequestOrdering {
  /** Ascending sort for atmTeamId */
  AtmTeamIdAsc = 'atmTeamId_asc',
  /** Descending sort for atmTeamId */
  AtmTeamIdDesc = 'atmTeamId_desc',
  /** Ascending sort for id */
  IdAsc = 'id_asc',
  /** Descending sort for id */
  IdDesc = 'id_desc',
  /** Ascending sort for number */
  NumberAsc = 'number_asc',
  /** Descending sort for number */
  NumberDesc = 'number_desc',
  /** Ascending sort for prId */
  PrIdAsc = 'prId_asc',
  /** Descending sort for prId */
  PrIdDesc = 'prId_desc',
  /** Ascending sort for name */
  NameAsc = 'name_asc',
  /** Descending sort for name */
  NameDesc = 'name_desc',
  /** Ascending sort for body */
  BodyAsc = 'body_asc',
  /** Descending sort for body */
  BodyDesc = 'body_desc',
  /** Ascending sort for state */
  StateAsc = 'state_asc',
  /** Descending sort for state */
  StateDesc = 'state_desc',
  /** Ascending sort for merged */
  MergedAsc = 'merged_asc',
  /** Descending sort for merged */
  MergedDesc = 'merged_desc',
  /** Ascending sort for timestamp */
  TimestampAsc = 'timestamp_asc',
  /** Descending sort for timestamp */
  TimestampDesc = 'timestamp_desc',
  /** Ascending sort for baseBranchName */
  BaseBranchNameAsc = 'baseBranchName_asc',
  /** Descending sort for baseBranchName */
  BaseBranchNameDesc = 'baseBranchName_desc',
  /** Ascending sort for branchName */
  BranchNameAsc = 'branchName_asc',
  /** Descending sort for branchName */
  BranchNameDesc = 'branchName_desc',
  /** Ascending sort for title */
  TitleAsc = 'title_asc',
  /** Descending sort for title */
  TitleDesc = 'title_desc',
  /** Ascending sort for createdAt */
  CreatedAtAsc = 'createdAt_asc',
  /** Descending sort for createdAt */
  CreatedAtDesc = 'createdAt_desc',
  /** Ascending sort for updatedAt */
  UpdatedAtAsc = 'updatedAt_asc',
  /** Descending sort for updatedAt */
  UpdatedAtDesc = 'updatedAt_desc',
  /** Ascending sort for closedAt */
  ClosedAtAsc = 'closedAt_asc',
  /** Descending sort for closedAt */
  ClosedAtDesc = 'closedAt_desc',
  /** Ascending sort for mergedAt */
  MergedAtAsc = 'mergedAt_asc',
  /** Descending sort for mergedAt */
  MergedAtDesc = 'mergedAt_desc',
  /** Ascending sort for mergeStatus */
  MergeStatusAsc = 'mergeStatus_asc',
  /** Descending sort for mergeStatus */
  MergeStatusDesc = 'mergeStatus_desc'
}

export type _PushFilter = {
  branch?: Maybe<Scalars['String']>;
  after?: Maybe<_CommitFilter>;
  before?: Maybe<_CommitFilter>;
  provider?: Maybe<_ProviderFilter>;
  repo?: Maybe<_RepoFilter>;
};

/** Ordering Enum for PushImpact */
export enum _PushImpactOrdering {
  /** Ascending sort for atmTeamId */
  AtmTeamIdAsc = 'atmTeamId_asc',
  /** Descending sort for atmTeamId */
  AtmTeamIdDesc = 'atmTeamId_desc',
  /** Ascending sort for id */
  IdAsc = 'id_asc',
  /** Descending sort for id */
  IdDesc = 'id_desc',
  /** Ascending sort for url */
  UrlAsc = 'url_asc',
  /** Descending sort for url */
  UrlDesc = 'url_desc',
  /** Ascending sort for data */
  DataAsc = 'data_asc',
  /** Descending sort for data */
  DataDesc = 'data_desc'
}

/** Ordering Enum for Push */
export enum _PushOrdering {
  /** Ascending sort for atmTeamId */
  AtmTeamIdAsc = 'atmTeamId_asc',
  /** Descending sort for atmTeamId */
  AtmTeamIdDesc = 'atmTeamId_desc',
  /** Ascending sort for id */
  IdAsc = 'id_asc',
  /** Descending sort for id */
  IdDesc = 'id_desc',
  /** Ascending sort for timestamp */
  TimestampAsc = 'timestamp_asc',
  /** Descending sort for timestamp */
  TimestampDesc = 'timestamp_desc',
  /** Ascending sort for branch */
  BranchAsc = 'branch_asc',
  /** Descending sort for branch */
  BranchDesc = 'branch_desc'
}

export type _PushesFilter = {
  branch?: Maybe<Scalars['String']>;
  after?: Maybe<_CommitFilter>;
  before?: Maybe<_CommitFilter>;
  provider?: Maybe<_ProviderFilter>;
  repo?: Maybe<_RepoFilter>;
};

/** Ordering Enum for Release */
export enum _ReleaseOrdering {
  /** Ascending sort for atmTeamId */
  AtmTeamIdAsc = 'atmTeamId_asc',
  /** Descending sort for atmTeamId */
  AtmTeamIdDesc = 'atmTeamId_desc',
  /** Ascending sort for id */
  IdAsc = 'id_asc',
  /** Descending sort for id */
  IdDesc = 'id_desc',
  /** Ascending sort for name */
  NameAsc = 'name_asc',
  /** Descending sort for name */
  NameDesc = 'name_desc',
  /** Ascending sort for timestamp */
  TimestampAsc = 'timestamp_asc',
  /** Descending sort for timestamp */
  TimestampDesc = 'timestamp_desc'
}

export type _RepoFilter = {
  defaultBranch?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  name_not?: Maybe<Scalars['String']>;
  owner?: Maybe<Scalars['String']>;
  repoId?: Maybe<Scalars['String']>;
  branches_some?: Maybe<_BranchFilter>;
  channels_some?: Maybe<_ChatChannelFilter>;
  issue_some?: Maybe<_IssueFilter>;
  issues_some?: Maybe<_IssueFilter>;
  labels_some?: Maybe<_LabelFilter>;
  org?: Maybe<_OrgFilter>;
  pullRequest_some?: Maybe<_PullRequestFilter>;
  pullRequests_some?: Maybe<_PullRequestFilter>;
  pushes_some?: Maybe<_PushFilter>;
  AND?: Maybe<Array<_RepoFilter>>;
  OR?: Maybe<Array<_RepoFilter>>;
};

/** Ordering Enum for Repo */
export enum _RepoOrdering {
  /** Ascending sort for atmTeamId */
  AtmTeamIdAsc = 'atmTeamId_asc',
  /** Descending sort for atmTeamId */
  AtmTeamIdDesc = 'atmTeamId_desc',
  /** Ascending sort for id */
  IdAsc = 'id_asc',
  /** Descending sort for id */
  IdDesc = 'id_desc',
  /** Ascending sort for owner */
  OwnerAsc = 'owner_asc',
  /** Descending sort for owner */
  OwnerDesc = 'owner_desc',
  /** Ascending sort for name */
  NameAsc = 'name_asc',
  /** Descending sort for name */
  NameDesc = 'name_desc',
  /** Ascending sort for allowRebaseMerge */
  AllowRebaseMergeAsc = 'allowRebaseMerge_asc',
  /** Descending sort for allowRebaseMerge */
  AllowRebaseMergeDesc = 'allowRebaseMerge_desc',
  /** Ascending sort for allowSquashMerge */
  AllowSquashMergeAsc = 'allowSquashMerge_asc',
  /** Descending sort for allowSquashMerge */
  AllowSquashMergeDesc = 'allowSquashMerge_desc',
  /** Ascending sort for allowMergeCommit */
  AllowMergeCommitAsc = 'allowMergeCommit_asc',
  /** Descending sort for allowMergeCommit */
  AllowMergeCommitDesc = 'allowMergeCommit_desc',
  /** Ascending sort for repoId */
  RepoIdAsc = 'repoId_asc',
  /** Descending sort for repoId */
  RepoIdDesc = 'repoId_desc',
  /** Ascending sort for gitHubId */
  GitHubIdAsc = 'gitHubId_asc',
  /** Descending sort for gitHubId */
  GitHubIdDesc = 'gitHubId_desc',
  /** Ascending sort for defaultBranch */
  DefaultBranchAsc = 'defaultBranch_asc',
  /** Descending sort for defaultBranch */
  DefaultBranchDesc = 'defaultBranch_desc'
}

/** Ordering Enum for ResourceProvider */
export enum _ResourceProviderOrdering {
  /** Ascending sort for atmTeamId */
  AtmTeamIdAsc = 'atmTeamId_asc',
  /** Descending sort for atmTeamId */
  AtmTeamIdDesc = 'atmTeamId_desc',
  /** Ascending sort for id */
  IdAsc = 'id_asc',
  /** Descending sort for id */
  IdDesc = 'id_desc'
}

export type _ReviewFilter = {
  state?: Maybe<ReviewState>;
  by_some?: Maybe<_ScmIdFilter>;
};

/** Ordering Enum for Review */
export enum _ReviewOrdering {
  /** Ascending sort for atmTeamId */
  AtmTeamIdAsc = 'atmTeamId_asc',
  /** Descending sort for atmTeamId */
  AtmTeamIdDesc = 'atmTeamId_desc',
  /** Ascending sort for id */
  IdAsc = 'id_asc',
  /** Descending sort for id */
  IdDesc = 'id_desc',
  /** Ascending sort for gitHubId */
  GitHubIdAsc = 'gitHubId_asc',
  /** Descending sort for gitHubId */
  GitHubIdDesc = 'gitHubId_desc',
  /** Ascending sort for reviewId */
  ReviewIdAsc = 'reviewId_asc',
  /** Descending sort for reviewId */
  ReviewIdDesc = 'reviewId_desc',
  /** Ascending sort for body */
  BodyAsc = 'body_asc',
  /** Descending sort for body */
  BodyDesc = 'body_desc',
  /** Ascending sort for state */
  StateAsc = 'state_asc',
  /** Descending sort for state */
  StateDesc = 'state_desc',
  /** Ascending sort for submittedAt */
  SubmittedAtAsc = 'submittedAt_asc',
  /** Descending sort for submittedAt */
  SubmittedAtDesc = 'submittedAt_desc',
  /** Ascending sort for htmlUrl */
  HtmlUrlAsc = 'htmlUrl_asc',
  /** Descending sort for htmlUrl */
  HtmlUrlDesc = 'htmlUrl_desc'
}

export type _ScmIdFilter = {
  person?: Maybe<_PersonFilter>;
};

/** Ordering Enum for SCMId */
export enum _ScmIdOrdering {
  /** Ascending sort for atmTeamId */
  AtmTeamIdAsc = 'atmTeamId_asc',
  /** Descending sort for atmTeamId */
  AtmTeamIdDesc = 'atmTeamId_desc',
  /** Ascending sort for login */
  LoginAsc = 'login_asc',
  /** Descending sort for login */
  LoginDesc = 'login_desc',
  /** Ascending sort for name */
  NameAsc = 'name_asc',
  /** Descending sort for name */
  NameDesc = 'name_desc',
  /** Ascending sort for avatar */
  AvatarAsc = 'avatar_asc',
  /** Descending sort for avatar */
  AvatarDesc = 'avatar_desc'
}

export type _ScmProviderFilter = {
  providerId?: Maybe<Scalars['String']>;
};

/** Ordering Enum for SCMProvider */
export enum _ScmProviderOrdering {
  /** Ascending sort for atmTeamId */
  AtmTeamIdAsc = 'atmTeamId_asc',
  /** Descending sort for atmTeamId */
  AtmTeamIdDesc = 'atmTeamId_desc',
  /** Ascending sort for id */
  IdAsc = 'id_asc',
  /** Descending sort for id */
  IdDesc = 'id_desc',
  /** Ascending sort for url */
  UrlAsc = 'url_asc',
  /** Descending sort for url */
  UrlDesc = 'url_desc',
  /** Ascending sort for providerId */
  ProviderIdAsc = 'providerId_asc',
  /** Descending sort for providerId */
  ProviderIdDesc = 'providerId_desc',
  /** Ascending sort for apiUrl */
  ApiUrlAsc = 'apiUrl_asc',
  /** Descending sort for apiUrl */
  ApiUrlDesc = 'apiUrl_desc',
  /** Ascending sort for gitUrl */
  GitUrlAsc = 'gitUrl_asc',
  /** Descending sort for gitUrl */
  GitUrlDesc = 'gitUrl_desc',
  /** Ascending sort for providerType */
  ProviderTypeAsc = 'providerType_asc',
  /** Descending sort for providerType */
  ProviderTypeDesc = 'providerType_desc'
}

/** Ordering Enum for Status */
export enum _StatusOrdering {
  /** Ascending sort for atmTeamId */
  AtmTeamIdAsc = 'atmTeamId_asc',
  /** Descending sort for atmTeamId */
  AtmTeamIdDesc = 'atmTeamId_desc',
  /** Ascending sort for id */
  IdAsc = 'id_asc',
  /** Descending sort for id */
  IdDesc = 'id_desc',
  /** Ascending sort for state */
  StateAsc = 'state_asc',
  /** Descending sort for state */
  StateDesc = 'state_desc',
  /** Ascending sort for description */
  DescriptionAsc = 'description_asc',
  /** Descending sort for description */
  DescriptionDesc = 'description_desc',
  /** Ascending sort for targetUrl */
  TargetUrlAsc = 'targetUrl_asc',
  /** Descending sort for targetUrl */
  TargetUrlDesc = 'targetUrl_desc',
  /** Ascending sort for context */
  ContextAsc = 'context_asc',
  /** Descending sort for context */
  ContextDesc = 'context_desc',
  /** Ascending sort for timestamp */
  TimestampAsc = 'timestamp_asc',
  /** Descending sort for timestamp */
  TimestampDesc = 'timestamp_desc'
}

export type _TagFilter = {
  name?: Maybe<Scalars['String']>;
  commit?: Maybe<_CommitFilter>;
};

/** Ordering Enum for Tag */
export enum _TagOrdering {
  /** Ascending sort for atmTeamId */
  AtmTeamIdAsc = 'atmTeamId_asc',
  /** Descending sort for atmTeamId */
  AtmTeamIdDesc = 'atmTeamId_desc',
  /** Ascending sort for id */
  IdAsc = 'id_asc',
  /** Descending sort for id */
  IdDesc = 'id_desc',
  /** Ascending sort for name */
  NameAsc = 'name_asc',
  /** Descending sort for name */
  NameDesc = 'name_desc',
  /** Ascending sort for description */
  DescriptionAsc = 'description_asc',
  /** Descending sort for description */
  DescriptionDesc = 'description_desc',
  /** Ascending sort for ref */
  RefAsc = 'ref_asc',
  /** Descending sort for ref */
  RefDesc = 'ref_desc',
  /** Ascending sort for timestamp */
  TimestampAsc = 'timestamp_asc',
  /** Descending sort for timestamp */
  TimestampDesc = 'timestamp_desc'
}

/** Ordering Enum for Team */
export enum _TeamOrdering {
  /** Ascending sort for atmTeamId */
  AtmTeamIdAsc = 'atmTeamId_asc',
  /** Descending sort for atmTeamId */
  AtmTeamIdDesc = 'atmTeamId_desc',
  /** Ascending sort for id */
  IdAsc = 'id_asc',
  /** Descending sort for id */
  IdDesc = 'id_desc',
  /** Ascending sort for name */
  NameAsc = 'name_asc',
  /** Descending sort for name */
  NameDesc = 'name_desc',
  /** Ascending sort for description */
  DescriptionAsc = 'description_asc',
  /** Descending sort for description */
  DescriptionDesc = 'description_desc',
  /** Ascending sort for iconUrl */
  IconUrlAsc = 'iconUrl_asc',
  /** Descending sort for iconUrl */
  IconUrlDesc = 'iconUrl_desc',
  /** Ascending sort for createdAt */
  CreatedAtAsc = 'createdAt_asc',
  /** Descending sort for createdAt */
  CreatedAtDesc = 'createdAt_desc'
}

/** Ordering Enum for UserJoinedChannel */
export enum _UserJoinedChannelOrdering {
  /** Ascending sort for atmTeamId */
  AtmTeamIdAsc = 'atmTeamId_asc',
  /** Descending sort for atmTeamId */
  AtmTeamIdDesc = 'atmTeamId_desc',
  /** Ascending sort for id */
  IdAsc = 'id_asc',
  /** Descending sort for id */
  IdDesc = 'id_desc'
}

/** Ordering Enum for Workflow */
export enum _WorkflowOrdering {
  /** Ascending sort for atmTeamId */
  AtmTeamIdAsc = 'atmTeamId_asc',
  /** Descending sort for atmTeamId */
  AtmTeamIdDesc = 'atmTeamId_desc',
  /** Ascending sort for id */
  IdAsc = 'id_asc',
  /** Descending sort for id */
  IdDesc = 'id_desc',
  /** Ascending sort for name */
  NameAsc = 'name_asc',
  /** Descending sort for name */
  NameDesc = 'name_desc',
  /** Ascending sort for workflowId */
  WorkflowIdAsc = 'workflowId_asc',
  /** Descending sort for workflowId */
  WorkflowIdDesc = 'workflowId_desc',
  /** Ascending sort for provider */
  ProviderAsc = 'provider_asc',
  /** Descending sort for provider */
  ProviderDesc = 'provider_desc',
  /** Ascending sort for config */
  ConfigAsc = 'config_asc',
  /** Descending sort for config */
  ConfigDesc = 'config_desc'
}

export type PersonFieldsFragment = (
  { __typename?: 'Person' }
  & Pick<Person, 'forename' | 'surname' | 'name'>
  & { emails?: Maybe<Array<Maybe<(
    { __typename?: 'Email' }
    & Pick<Email, 'address'>
  )>>>, gitHubId?: Maybe<(
    { __typename?: 'GitHubId' }
    & Pick<GitHubId, 'login'>
  )>, chatId?: Maybe<(
    { __typename?: 'ChatId' }
    & Pick<ChatId, 'screenName'>
    & { chatTeam?: Maybe<(
      { __typename?: 'ChatTeam' }
      & Pick<ChatTeam, 'id'>
    )> }
  )> }
);

export type RepoFieldsFragment = (
  { __typename?: 'Repo' }
  & Pick<Repo, 'id' | 'url' | 'owner' | 'name' | 'defaultBranch'>
  & { org?: Maybe<(
    { __typename?: 'Org' }
    & Pick<Org, 'id' | 'owner' | 'ownerType'>
    & { provider?: Maybe<(
      { __typename?: 'GitHubProvider' }
      & Pick<GitHubProvider, 'providerId' | 'providerType' | 'apiUrl' | 'url'>
    )> }
  )>, channels?: Maybe<Array<Maybe<(
    { __typename?: 'ChatChannel' }
    & Pick<ChatChannel, 'name' | 'id' | 'channelId'>
    & { team?: Maybe<(
      { __typename?: 'ChatTeam' }
      & Pick<ChatTeam, 'id'>
    )> }
  )>>> }
);

export type OnChannelLinkSubscriptionVariables = Exact<{ [key: string]: never; }>;


export type OnChannelLinkSubscription = (
  { __typename?: 'Subscription' }
  & { ChannelLink?: Maybe<Array<Maybe<(
    { __typename?: 'ChannelLink' }
    & { repo?: Maybe<(
      { __typename?: 'Repo' }
      & RepoFieldsFragment
    )>, channel?: Maybe<(
      { __typename?: 'ChatChannel' }
      & Pick<ChatChannel, 'name' | 'id'>
      & { team?: Maybe<(
        { __typename?: 'ChatTeam' }
        & Pick<ChatTeam, 'id'>
      )> }
    )> }
  )>>> }
);

export type OnNewUserSubscriptionVariables = Exact<{ [key: string]: never; }>;


export type OnNewUserSubscription = (
  { __typename?: 'Subscription' }
  & { ChatId?: Maybe<Array<Maybe<(
    { __typename?: 'ChatId' }
    & Pick<ChatId, 'screenName' | 'isBot' | 'timezoneLabel'>
    & { person?: Maybe<(
      { __typename?: 'Person' }
      & PersonFieldsFragment
    )> }
  )>>> }
);

export type OnUserJoiningChannelSubscriptionVariables = Exact<{ [key: string]: never; }>;


export type OnUserJoiningChannelSubscription = (
  { __typename?: 'Subscription' }
  & { UserJoinedChannel?: Maybe<Array<Maybe<(
    { __typename?: 'UserJoinedChannel' }
    & { user?: Maybe<(
      { __typename?: 'ChatId' }
      & Pick<ChatId, 'screenName'>
      & { person?: Maybe<(
        { __typename?: 'Person' }
        & PersonFieldsFragment
      )> }
    )>, channel?: Maybe<(
      { __typename?: 'ChatChannel' }
      & Pick<ChatChannel, 'name'>
      & { repos?: Maybe<Array<Maybe<(
        { __typename?: 'Repo' }
        & RepoFieldsFragment
      )>>> }
    )> }
  )>>> }
);

export type OnBranchSubscriptionVariables = Exact<{ [key: string]: never; }>;


export type OnBranchSubscription = (
  { __typename?: 'Subscription' }
  & { Branch?: Maybe<Array<Maybe<(
    { __typename?: 'Branch' }
    & Pick<Branch, 'id' | 'name' | 'timestamp'>
    & { commit?: Maybe<(
      { __typename?: 'Commit' }
      & Pick<Commit, 'sha' | 'message'>
      & { author?: Maybe<(
        { __typename?: 'SCMId' }
        & Pick<ScmId, 'login'>
        & { person?: Maybe<(
          { __typename?: 'Person' }
          & PersonFieldsFragment
        )> }
      )>, committer?: Maybe<(
        { __typename?: 'SCMId' }
        & Pick<ScmId, 'login'>
        & { person?: Maybe<(
          { __typename?: 'Person' }
          & PersonFieldsFragment
        )> }
      )> }
    )>, repo?: Maybe<(
      { __typename?: 'Repo' }
      & RepoFieldsFragment
    )> }
  )>>> }
);

export type OnCheckRunSubscriptionVariables = Exact<{ [key: string]: never; }>;


export type OnCheckRunSubscription = (
  { __typename?: 'Subscription' }
  & { CheckRun?: Maybe<Array<Maybe<(
    { __typename?: 'CheckRun' }
    & Pick<CheckRun, 'id' | 'name' | 'checkRunId' | 'action' | 'url' | 'htmlUrl' | 'detailsUrl' | 'conclusion' | 'startedAt' | 'completedAt' | 'outputTitle' | 'status'>
    & { checkSuite: (
      { __typename?: 'CheckSuite' }
      & Pick<CheckSuite, 'appSlug' | 'action' | 'conclusion' | 'timestamp' | 'status'>
      & { commit?: Maybe<(
        { __typename?: 'Commit' }
        & Pick<Commit, 'sha' | 'message'>
        & { repo?: Maybe<(
          { __typename?: 'Repo' }
          & RepoFieldsFragment
        )>, author?: Maybe<(
          { __typename?: 'SCMId' }
          & Pick<ScmId, 'login'>
          & { person?: Maybe<(
            { __typename?: 'Person' }
            & PersonFieldsFragment
          )> }
        )>, committer?: Maybe<(
          { __typename?: 'SCMId' }
          & Pick<ScmId, 'login'>
          & { person?: Maybe<(
            { __typename?: 'Person' }
            & PersonFieldsFragment
          )> }
        )> }
      )> }
    ) }
  )>>> }
);

export type OnCommentSubscriptionVariables = Exact<{ [key: string]: never; }>;


export type OnCommentSubscription = (
  { __typename?: 'Subscription' }
  & { Comment?: Maybe<Array<Maybe<(
    { __typename?: 'Comment' }
    & Pick<Comment, 'gitHubId' | 'timestamp' | 'body'>
    & { by?: Maybe<(
      { __typename?: 'SCMId' }
      & Pick<ScmId, 'login' | 'name'>
      & { person?: Maybe<(
        { __typename?: 'Person' }
        & PersonFieldsFragment
      )> }
    )>, pullRequest?: Maybe<(
      { __typename?: 'PullRequest' }
      & Pick<PullRequest, 'title' | 'body' | 'number' | 'state' | 'merged'>
      & { repo?: Maybe<(
        { __typename?: 'Repo' }
        & Pick<Repo, 'id' | 'url' | 'owner' | 'name' | 'defaultBranch'>
        & { org?: Maybe<(
          { __typename?: 'Org' }
          & Pick<Org, 'id' | 'owner' | 'ownerType'>
          & { provider?: Maybe<(
            { __typename?: 'GitHubProvider' }
            & Pick<GitHubProvider, 'providerId' | 'providerType' | 'apiUrl' | 'url'>
          )> }
        )>, channels?: Maybe<Array<Maybe<(
          { __typename?: 'ChatChannel' }
          & Pick<ChatChannel, 'name' | 'id' | 'channelId'>
          & { team?: Maybe<(
            { __typename?: 'ChatTeam' }
            & Pick<ChatTeam, 'id'>
          )> }
        )>>> }
      )>, author?: Maybe<(
        { __typename?: 'SCMId' }
        & Pick<ScmId, 'login'>
        & { person?: Maybe<(
          { __typename?: 'Person' }
          & PersonFieldsFragment
        )> }
      )>, assignees?: Maybe<Array<Maybe<(
        { __typename?: 'SCMId' }
        & Pick<ScmId, 'login'>
        & { person?: Maybe<(
          { __typename?: 'Person' }
          & PersonFieldsFragment
        )> }
      )>>>, reviewers?: Maybe<Array<Maybe<(
        { __typename?: 'SCMId' }
        & Pick<ScmId, 'login'>
        & { person?: Maybe<(
          { __typename?: 'Person' }
          & PersonFieldsFragment
        )> }
      )>>>, reviews?: Maybe<Array<Maybe<(
        { __typename?: 'Review' }
        & Pick<Review, 'body' | 'state'>
        & { by?: Maybe<Array<Maybe<(
          { __typename?: 'SCMId' }
          & Pick<ScmId, 'login'>
          & { person?: Maybe<(
            { __typename?: 'Person' }
            & PersonFieldsFragment
          )> }
        )>>> }
      )>>>, labels?: Maybe<Array<Maybe<(
        { __typename?: 'Label' }
        & Pick<Label, 'name'>
      )>>> }
    )>, issue?: Maybe<(
      { __typename?: 'Issue' }
      & Pick<Issue, 'title' | 'body' | 'number' | 'state'>
      & { repo: (
        { __typename?: 'Repo' }
        & RepoFieldsFragment
      ), openedBy?: Maybe<(
        { __typename?: 'SCMId' }
        & Pick<ScmId, 'login'>
        & { person?: Maybe<(
          { __typename?: 'Person' }
          & PersonFieldsFragment
        )> }
      )>, closedBy?: Maybe<(
        { __typename?: 'SCMId' }
        & Pick<ScmId, 'login'>
        & { person?: Maybe<(
          { __typename?: 'Person' }
          & PersonFieldsFragment
        )> }
      )>, assignees?: Maybe<Array<Maybe<(
        { __typename?: 'SCMId' }
        & Pick<ScmId, 'login'>
        & { person?: Maybe<(
          { __typename?: 'Person' }
          & PersonFieldsFragment
        )> }
      )>>>, labels?: Maybe<Array<Maybe<(
        { __typename?: 'Label' }
        & Pick<Label, 'name'>
      )>>> }
    )> }
  )>>> }
);

export type OnDeletedBranchSubscriptionVariables = Exact<{ [key: string]: never; }>;


export type OnDeletedBranchSubscription = (
  { __typename?: 'Subscription' }
  & { DeletedBranch?: Maybe<Array<Maybe<(
    { __typename?: 'DeletedBranch' }
    & Pick<DeletedBranch, 'id' | 'name' | 'timestamp'>
    & { commit?: Maybe<(
      { __typename?: 'Commit' }
      & Pick<Commit, 'sha' | 'message'>
      & { author?: Maybe<(
        { __typename?: 'SCMId' }
        & Pick<ScmId, 'login'>
        & { person?: Maybe<(
          { __typename?: 'Person' }
          & PersonFieldsFragment
        )> }
      )>, committer?: Maybe<(
        { __typename?: 'SCMId' }
        & Pick<ScmId, 'login'>
        & { person?: Maybe<(
          { __typename?: 'Person' }
          & PersonFieldsFragment
        )> }
      )> }
    )>, repo?: Maybe<(
      { __typename?: 'Repo' }
      & RepoFieldsFragment
    )> }
  )>>> }
);

export type OnIssueSubscriptionVariables = Exact<{ [key: string]: never; }>;


export type OnIssueSubscription = (
  { __typename?: 'Subscription' }
  & { Issue?: Maybe<Array<Maybe<(
    { __typename?: 'Issue' }
    & Pick<Issue, 'number' | 'title' | 'state' | 'body' | 'createdAt' | 'updatedAt'>
    & { openedBy?: Maybe<(
      { __typename?: 'SCMId' }
      & Pick<ScmId, 'login'>
      & { person?: Maybe<(
        { __typename?: 'Person' }
        & PersonFieldsFragment
      )> }
    )>, repo: (
      { __typename?: 'Repo' }
      & RepoFieldsFragment
    ), assignees?: Maybe<Array<Maybe<(
      { __typename?: 'SCMId' }
      & Pick<ScmId, 'login'>
      & { person?: Maybe<(
        { __typename?: 'Person' }
        & PersonFieldsFragment
      )> }
    )>>>, labels?: Maybe<Array<Maybe<(
      { __typename?: 'Label' }
      & Pick<Label, 'name'>
    )>>> }
  )>>> }
);

export type OnNewRepoSubscriptionVariables = Exact<{ [key: string]: never; }>;


export type OnNewRepoSubscription = (
  { __typename?: 'Subscription' }
  & { Repo?: Maybe<Array<Maybe<(
    { __typename?: 'Repo' }
    & RepoFieldsFragment
  )>>> }
);

export type OnPullRequestSubscriptionVariables = Exact<{ [key: string]: never; }>;


export type OnPullRequestSubscription = (
  { __typename?: 'Subscription' }
  & { PullRequest?: Maybe<Array<Maybe<(
    { __typename?: 'PullRequest' }
    & Pick<PullRequest, 'title' | 'number' | 'body' | 'id' | 'action' | 'createdAt' | 'updatedAt' | 'mergeStatus'>
    & { branch?: Maybe<(
      { __typename?: 'Branch' }
      & Pick<Branch, 'name'>
    )>, base?: Maybe<(
      { __typename?: 'Commit' }
      & Pick<Commit, 'sha' | 'message'>
      & { author?: Maybe<(
        { __typename?: 'SCMId' }
        & Pick<ScmId, 'login'>
        & { person?: Maybe<(
          { __typename?: 'Person' }
          & PersonFieldsFragment
        )> }
      )>, committer?: Maybe<(
        { __typename?: 'SCMId' }
        & Pick<ScmId, 'login'>
        & { person?: Maybe<(
          { __typename?: 'Person' }
          & PersonFieldsFragment
        )> }
      )> }
    )>, author?: Maybe<(
      { __typename?: 'SCMId' }
      & Pick<ScmId, 'login'>
      & { person?: Maybe<(
        { __typename?: 'Person' }
        & PersonFieldsFragment
      )> }
    )>, head?: Maybe<(
      { __typename?: 'Commit' }
      & Pick<Commit, 'sha' | 'message'>
      & { author?: Maybe<(
        { __typename?: 'SCMId' }
        & Pick<ScmId, 'login'>
        & { person?: Maybe<(
          { __typename?: 'Person' }
          & PersonFieldsFragment
        )> }
      )>, committer?: Maybe<(
        { __typename?: 'SCMId' }
        & Pick<ScmId, 'login'>
        & { person?: Maybe<(
          { __typename?: 'Person' }
          & PersonFieldsFragment
        )> }
      )> }
    )>, labels?: Maybe<Array<Maybe<(
      { __typename?: 'Label' }
      & Pick<Label, 'name'>
    )>>>, reviewers?: Maybe<Array<Maybe<(
      { __typename?: 'SCMId' }
      & Pick<ScmId, 'login'>
      & { person?: Maybe<(
        { __typename?: 'Person' }
        & PersonFieldsFragment
      )> }
    )>>>, reviews?: Maybe<Array<Maybe<(
      { __typename?: 'Review' }
      & Pick<Review, 'body' | 'state'>
      & { by?: Maybe<Array<Maybe<(
        { __typename?: 'SCMId' }
        & Pick<ScmId, 'login'>
        & { person?: Maybe<(
          { __typename?: 'Person' }
          & PersonFieldsFragment
        )> }
      )>>> }
    )>>>, repo?: Maybe<(
      { __typename?: 'Repo' }
      & RepoFieldsFragment
    )> }
  )>>> }
);

export type OnPushSubscriptionVariables = Exact<{ [key: string]: never; }>;


export type OnPushSubscription = (
  { __typename?: 'Subscription' }
  & { Push?: Maybe<Array<Maybe<(
    { __typename?: 'Push' }
    & Pick<Push, 'branch' | 'timestamp'>
    & { repo?: Maybe<(
      { __typename?: 'Repo' }
      & RepoFieldsFragment
    )>, after?: Maybe<(
      { __typename?: 'Commit' }
      & Pick<Commit, 'url' | 'sha' | 'message'>
      & { author?: Maybe<(
        { __typename?: 'SCMId' }
        & Pick<ScmId, 'login'>
        & { person?: Maybe<(
          { __typename?: 'Person' }
          & PersonFieldsFragment
        )> }
      )>, committer?: Maybe<(
        { __typename?: 'SCMId' }
        & Pick<ScmId, 'login'>
        & { person?: Maybe<(
          { __typename?: 'Person' }
          & PersonFieldsFragment
        )> }
      )>, tags?: Maybe<Array<Maybe<(
        { __typename?: 'Tag' }
        & Pick<Tag, 'name'>
        & { release?: Maybe<(
          { __typename?: 'Release' }
          & Pick<Release, 'name'>
        )> }
      )>>>, statuses?: Maybe<Array<Maybe<(
        { __typename?: 'Status' }
        & Pick<Status, 'context' | 'description' | 'targetUrl' | 'state'>
      )>>> }
    )>, commits?: Maybe<Array<Maybe<(
      { __typename?: 'Commit' }
      & Pick<Commit, 'sha' | 'message'>
      & { author?: Maybe<(
        { __typename?: 'SCMId' }
        & Pick<ScmId, 'login'>
        & { person?: Maybe<(
          { __typename?: 'Person' }
          & PersonFieldsFragment
        )> }
      )>, committer?: Maybe<(
        { __typename?: 'SCMId' }
        & Pick<ScmId, 'login'>
        & { person?: Maybe<(
          { __typename?: 'Person' }
          & PersonFieldsFragment
        )> }
      )> }
    )>>> }
  )>>> }
);

export type OnReleaseSubscriptionVariables = Exact<{ [key: string]: never; }>;


export type OnReleaseSubscription = (
  { __typename?: 'Subscription' }
  & { Release?: Maybe<Array<Maybe<(
    { __typename?: 'Release' }
    & Pick<Release, 'id' | 'name'>
    & { tag?: Maybe<(
      { __typename?: 'Tag' }
      & Pick<Tag, 'name' | 'description' | 'timestamp'>
      & { release?: Maybe<(
        { __typename?: 'Release' }
        & Pick<Release, 'name' | 'id' | 'timestamp'>
      )>, commit?: Maybe<(
        { __typename?: 'Commit' }
        & Pick<Commit, 'sha' | 'message'>
        & { repo?: Maybe<(
          { __typename?: 'Repo' }
          & RepoFieldsFragment
        )> }
      )> }
    )> }
  )>>> }
);

export type OnReviewSubscriptionVariables = Exact<{ [key: string]: never; }>;


export type OnReviewSubscription = (
  { __typename?: 'Subscription' }
  & { Review?: Maybe<Array<Maybe<(
    { __typename?: 'Review' }
    & Pick<Review, 'body' | 'state'>
    & { by?: Maybe<Array<Maybe<(
      { __typename?: 'SCMId' }
      & Pick<ScmId, 'login'>
      & { person?: Maybe<(
        { __typename?: 'Person' }
        & PersonFieldsFragment
      )> }
    )>>>, pullRequest?: Maybe<(
      { __typename?: 'PullRequest' }
      & Pick<PullRequest, 'title' | 'number' | 'body' | 'id' | 'action' | 'createdAt' | 'updatedAt' | 'mergeStatus'>
      & { branch?: Maybe<(
        { __typename?: 'Branch' }
        & Pick<Branch, 'name'>
      )>, base?: Maybe<(
        { __typename?: 'Commit' }
        & Pick<Commit, 'sha' | 'message'>
        & { author?: Maybe<(
          { __typename?: 'SCMId' }
          & Pick<ScmId, 'login'>
          & { person?: Maybe<(
            { __typename?: 'Person' }
            & PersonFieldsFragment
          )> }
        )>, committer?: Maybe<(
          { __typename?: 'SCMId' }
          & Pick<ScmId, 'login'>
          & { person?: Maybe<(
            { __typename?: 'Person' }
            & PersonFieldsFragment
          )> }
        )> }
      )>, author?: Maybe<(
        { __typename?: 'SCMId' }
        & Pick<ScmId, 'login'>
        & { person?: Maybe<(
          { __typename?: 'Person' }
          & PersonFieldsFragment
        )> }
      )>, head?: Maybe<(
        { __typename?: 'Commit' }
        & Pick<Commit, 'sha' | 'message'>
        & { author?: Maybe<(
          { __typename?: 'SCMId' }
          & Pick<ScmId, 'login'>
          & { person?: Maybe<(
            { __typename?: 'Person' }
            & PersonFieldsFragment
          )> }
        )>, committer?: Maybe<(
          { __typename?: 'SCMId' }
          & Pick<ScmId, 'login'>
          & { person?: Maybe<(
            { __typename?: 'Person' }
            & PersonFieldsFragment
          )> }
        )> }
      )>, labels?: Maybe<Array<Maybe<(
        { __typename?: 'Label' }
        & Pick<Label, 'name'>
      )>>>, reviewers?: Maybe<Array<Maybe<(
        { __typename?: 'SCMId' }
        & Pick<ScmId, 'login'>
        & { person?: Maybe<(
          { __typename?: 'Person' }
          & PersonFieldsFragment
        )> }
      )>>>, reviews?: Maybe<Array<Maybe<(
        { __typename?: 'Review' }
        & Pick<Review, 'body' | 'state'>
        & { by?: Maybe<Array<Maybe<(
          { __typename?: 'SCMId' }
          & Pick<ScmId, 'login'>
          & { person?: Maybe<(
            { __typename?: 'Person' }
            & PersonFieldsFragment
          )> }
        )>>> }
      )>>>, repo?: Maybe<(
        { __typename?: 'Repo' }
        & RepoFieldsFragment
      )> }
    )> }
  )>>> }
);

export type OnStatusSubscriptionVariables = Exact<{ [key: string]: never; }>;


export type OnStatusSubscription = (
  { __typename?: 'Subscription' }
  & { Status?: Maybe<Array<Maybe<(
    { __typename?: 'Status' }
    & Pick<Status, 'state' | 'targetUrl' | 'context' | 'description'>
    & { commit?: Maybe<(
      { __typename?: 'Commit' }
      & Pick<Commit, 'sha' | 'message'>
      & { statuses?: Maybe<Array<Maybe<(
        { __typename?: 'Status' }
        & Pick<Status, 'context' | 'description' | 'state'>
      )>>>, repo?: Maybe<(
        { __typename?: 'Repo' }
        & RepoFieldsFragment
      )>, pushes?: Maybe<Array<Maybe<(
        { __typename?: 'Push' }
        & Pick<Push, 'branch'>
      )>>> }
    )> }
  )>>> }
);

export type OnTagSubscriptionVariables = Exact<{ [key: string]: never; }>;


export type OnTagSubscription = (
  { __typename?: 'Subscription' }
  & { Tag?: Maybe<Array<Maybe<(
    { __typename?: 'Tag' }
    & Pick<Tag, 'id' | 'name' | 'description' | 'timestamp'>
    & { release?: Maybe<(
      { __typename?: 'Release' }
      & Pick<Release, 'name' | 'id' | 'timestamp'>
    )>, commit?: Maybe<(
      { __typename?: 'Commit' }
      & Pick<Commit, 'url' | 'sha' | 'message'>
      & { repo?: Maybe<(
        { __typename?: 'Repo' }
        & RepoFieldsFragment
      )>, author?: Maybe<(
        { __typename?: 'SCMId' }
        & Pick<ScmId, 'login'>
        & { person?: Maybe<(
          { __typename?: 'Person' }
          & PersonFieldsFragment
        )> }
      )>, committer?: Maybe<(
        { __typename?: 'SCMId' }
        & Pick<ScmId, 'login'>
        & { person?: Maybe<(
          { __typename?: 'Person' }
          & PersonFieldsFragment
        )> }
      )>, tags?: Maybe<Array<Maybe<(
        { __typename?: 'Tag' }
        & Pick<Tag, 'name'>
        & { release?: Maybe<(
          { __typename?: 'Release' }
          & Pick<Release, 'name'>
        )> }
      )>>>, statuses?: Maybe<Array<Maybe<(
        { __typename?: 'Status' }
        & Pick<Status, 'context' | 'description' | 'targetUrl' | 'state'>
      )>>> }
    )> }
  )>>> }
);

export type OnAttachmentActionSubscriptionVariables = Exact<{ [key: string]: never; }>;


export type OnAttachmentActionSubscription = (
  { __typename?: 'Subscription' }
  & { AtmJobTask?: Maybe<Array<(
    { __typename?: 'AtmJobTask' }
    & Pick<AtmJobTask, 'id' | 'data' | 'name' | 'state'>
    & { job: (
      { __typename?: 'AtmJob' }
      & Pick<AtmJob, 'id'>
    ) }
  )>> }
);

export type OnScheduleSubscriptionVariables = Exact<{ [key: string]: never; }>;


export type OnScheduleSubscription = (
  { __typename?: 'Subscription' }
  & { OnSchedule: Array<(
    { __typename?: 'OnSchedule' }
    & Pick<OnSchedule, 'configurationName' | 'parameterName'>
  )> }
);
